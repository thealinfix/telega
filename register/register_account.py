import asyncio
import random
import openai
from telethon import TelegramClient
from telethon.tl.functions.messages import SendReactionRequest, ReadHistoryRequest, SetTypingRequest
from telethon.tl.functions.channels import ReadMessageContentsRequest
from telethon.tl.types import ReactionEmoji, SendMessageTypingAction, SendMessageCancelAction
from telethon.tl.functions.account import UpdateStatusRequest
from datetime import datetime, timedelta
import json
import os
import time

# ==== –ö–û–ù–§–ò–ì ====
api_id = 2040
api_hash = 'b18441a1ff607e10a989891a5462e627'
session_file = 'sessions/172143346_telethon.session'
proxy = ('socks5', '217.29.62.212', 12049, True, 'ZcqNj3', 'KNqLM6')

openai_client = openai.OpenAI(
    api_key="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"
)

# Define the OpenAI GPT model to use
GPT_MODEL = "gpt-3.5-turbo"

channel_username = 'chinapack'
discussion_chat = 'chipack_chat'

SKIP_POSTS_WITHOUT_TEXT = True

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
HISTORY_FILE = "comment_history.json"
REACTIONS_HISTORY_FILE = "reactions_history.json"
PRIVATE_CHAT_HISTORY_FILE = "private_chat_history.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–∞
ANTIDETECT_CONFIG = {
    # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    "private_message_reply_chance": 0.3,      # 30% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    "max_private_replies_per_day": 5,         # –ú–∞–∫—Å–∏–º—É–º –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ª–∏—á–∫–µ –∑–∞ –¥–µ–Ω—å
    "private_reply_delay": (60, 300),         # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –≤ –ª–∏—á–∫–µ (1-5 –º–∏–Ω—É—Ç)
    "ignore_spam_keywords": ["–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–∞", "–±–∏—Ä–∂–∞", "—Å—Ç–∞–≤–∫–∏"],
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    "random_channel_view_chance": 0.7,        # 70% —à–∞–Ω—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    "channels_to_view": 3,                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    "read_messages_delay": (2, 10),           # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    # –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
    "update_online_status": True,             # –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
    "online_duration": (300, 900),            # –í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω (5-15 –º–∏–Ω—É—Ç)
    "offline_duration": (1800, 7200),         # –í—Ä–µ–º—è –æ—Ñ–ª–∞–π–Ω (30 –º–∏–Ω - 2 —á–∞—Å–∞)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    "typing_duration": (3, 8),                # –í—Ä–µ–º—è "–Ω–∞–±–æ—Ä–∞" —Å–æ–æ–±—â–µ–Ω–∏—è
    "typing_chance": 0.8,                     # 80% —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
    
    # –ü–∞—É–∑—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    "action_cooldown": (5, 20),               # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    "session_duration": (1800, 3600),         # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (30-60 –º–∏–Ω—É—Ç)
    
    # –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    "max_actions_per_day": 50,                # –ú–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å
    "max_messages_per_hour": 10,              # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å
    
    # –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
    "active_hours": (9, 23),                  # –ê–∫—Ç–∏–≤–µ–Ω —Å 9 –¥–æ 23
    "weekend_activity_reduction": 0.5,        # 50% —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
}

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
POPULAR_CHANNELS = [
    "durov", "telegram", "tginfo", "tginforu", "markettwits",
    "breakingmash", "meduzalive", "rian_ru", "rt_russian"
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–∫—Ü–∏–π (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
REACTIONS_CONFIG = {
    "channel_post_reaction_chance": 1.0,
    "comment_reaction_chance": 0.3,
    "max_reactions_per_hour": 20,
    "min_time_between_reactions": 20,
    "react_to_replies_chance": 0.9,
    "reaction_delay": (5, 45),
    "max_reactions_per_session": 5
}

REPLY_CONFIG = {
    "reply_to_interesting_comment": 0.15,
    "reply_if_mentioned_brand": 0.4,
    "reply_if_question": 0.6,
    "reply_if_strong_emotion": 0.3,
    "max_replies_per_post": 2,
    "min_time_between_replies": 180,
    "reply_delay": (30, 120)
}

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ...

SPAM_PROTECTION = {
    "max_comments_per_day": 10,
    "min_time_between_comments": 120
}

def load_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return create_empty_history()
    return create_empty_history()

def create_empty_history():
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    return {
        "posts_commented": {},
        "all_comments": [],
        "daily_count": {},
        "last_styles": []
    }

def save_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def load_reactions_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–∫—Ü–∏–π"""
    if os.path.exists(REACTIONS_HISTORY_FILE):
        try:
            with open(REACTIONS_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return create_empty_reactions_history()
    return create_empty_reactions_history()

def create_empty_reactions_history():
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–∫—Ü–∏–π"""
    return {
        "session_reactions_count": 0
    }

def save_reactions_history(reactions_history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–∫—Ü–∏–π"""
    with open(REACTIONS_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(reactions_history, f, ensure_ascii=False, indent=2)

def load_private_chat_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if os.path.exists(PRIVATE_CHAT_HISTORY_FILE):
        try:
            with open(PRIVATE_CHAT_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return create_empty_private_history()
    return create_empty_private_history()

def create_empty_private_history():
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return {
        "replied_to": {},        # {user_id: [timestamps]}
        "daily_replies": {},     # {date: count}
        "last_reply_time": None,
        "ignored_users": []      # –°–ø–∞–º–µ—Ä—ã –∏ –±–æ—Ç—ã
    }

def save_private_chat_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    with open(PRIVATE_CHAT_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

async def simulate_typing(client, peer, duration=None):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞"""
    if random.random() < ANTIDETECT_CONFIG["typing_chance"]:
        if not duration:
            duration = random.uniform(*ANTIDETECT_CONFIG["typing_duration"])
        
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º "–ø–µ—á–∞—Ç–∞—Ç—å"
            await client(SetTypingRequest(peer, SendMessageTypingAction()))
            print(f"‚å®Ô∏è –ü–µ—á–∞—Ç–∞—é {duration:.1f} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(duration)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ø–µ—á–∞—Ç—å"
            await client(SetTypingRequest(peer, SendMessageCancelAction()))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞: {e}")

async def update_online_status(client, online=True):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω"""
    if ANTIDETECT_CONFIG["update_online_status"]:
        try:
            await client(UpdateStatusRequest(offline=not online))
            status = "–æ–Ω–ª–∞–π–Ω üü¢" if online else "–æ—Ñ–ª–∞–π–Ω ‚ö´"
            print(f"üì± –°—Ç–∞—Ç—É—Å: {status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def read_channel_messages(client, channel, limit=10):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (–æ—Ç–º–µ—á–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ)"""
    try:
        messages = await client.get_messages(channel, limit=limit)
        if messages:
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            await client(ReadHistoryRequest(
                peer=channel,
                max_id=messages[0].id
            ))
            print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ @{channel}")
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á—Ç–µ–Ω–∏–µ–º
            delay = random.uniform(*ANTIDETECT_CONFIG["read_messages_delay"])
            await asyncio.sleep(delay)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")

async def simulate_channel_browsing(client):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    if random.random() < ANTIDETECT_CONFIG["random_channel_view_chance"]:
        print("\nüåê –ò–º–∏—Ç–∏—Ä—É—é –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤...")
        
        channels = random.sample(POPULAR_CHANNELS, 
                               min(ANTIDETECT_CONFIG["channels_to_view"], len(POPULAR_CHANNELS)))
        
        for channel in channels:
            await read_channel_messages(client, channel, limit=random.randint(5, 15))
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
            await asyncio.sleep(random.uniform(5, 15))

async def should_work_now():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    now = datetime.now()
    hour = now.hour
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤
    start_hour, end_hour = ANTIDETECT_CONFIG["active_hours"]
    if not (start_hour <= hour < end_hour):
        print(f"üò¥ –ù–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è ({hour}:00). –ê–∫—Ç–∏–≤–µ–Ω —Å {start_hour}:00 –¥–æ {end_hour}:00")
        return False
    
    # –°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
    if now.weekday() >= 5:
        if random.random() > ANTIDETECT_CONFIG["weekend_activity_reduction"]:
            print("üèñ –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            return False
    
    return True

async def handle_private_message(client, message, private_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_id.user_id if hasattr(message.from_id, 'user_id') else message.from_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø–∞–º –ª–∏ —ç—Ç–æ
    if any(keyword in message.text.lower() for keyword in ANTIDETECT_CONFIG["ignore_spam_keywords"]):
        print(f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–ø–∞–º –æ—Ç {user_id}")
        if user_id not in private_history["ignored_users"]:
            private_history["ignored_users"].append(user_id)
            save_private_chat_history(private_history)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    today = datetime.now().strftime("%Y-%m-%d")
    daily_count = private_history["daily_replies"].get(today, 0)
    
    if daily_count >= ANTIDETECT_CONFIG["max_private_replies_per_day"]:
        print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ª–∏—á–∫–µ ({daily_count})")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–ª–∏ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_replies = private_history["replied_to"].get(str(user_id), [])
    if user_replies:
        last_reply = datetime.fromisoformat(user_replies[-1])
        if (datetime.now() - last_reply).total_seconds() < 3600:  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —á–∞—Å
            print(f"‚è∞ –ù–µ–¥–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return
    
    # –†–µ—à–∞–µ–º, –æ—Ç–≤–µ—á–∞—Ç—å –ª–∏
    if random.random() < ANTIDETECT_CONFIG["private_message_reply_chance"]:
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        delay = random.randint(*ANTIDETECT_CONFIG["private_reply_delay"])
        print(f"üí¨ –û—Ç–≤–µ—á—É –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
        await asyncio.sleep(delay)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        await simulate_typing(client, message.from_id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        reply = await generate_private_reply(message.text)
        
        try:
            await client.send_message(message.from_id, reply)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if str(user_id) not in private_history["replied_to"]:
                private_history["replied_to"][str(user_id)] = []
            private_history["replied_to"][str(user_id)].append(datetime.now().isoformat())
            
            private_history["daily_replies"][today] = daily_count + 1
            private_history["last_reply_time"] = datetime.now().isoformat()
            save_private_chat_history(private_history)
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –≤ –ª–∏—á–∫—É: {reply}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def generate_private_reply(message_text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    prompts = {
        "greeting": "–ü—Ä–∏–≤–µ—Ç–ª–∏–≤–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –Ω–æ –∫—Ä–∞—Ç–∫–æ.",
        "question": "–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.",
        "default": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç."
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    message_lower = message_text.lower()
    if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π", "—Ö–∞–π", "–∫—É"]):
        prompt_type = "greeting"
    elif "?" in message_text:
        prompt_type = "question"
    else:
        prompt_type = "default"
    
    prompt = f"""–¢—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram. {prompts[prompt_type]}
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 10 —Å–ª–æ–≤), –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.
–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π.
–ù–ï –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è, –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π "—á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å".

–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç:"""

    try:
        response = openai_client.chat.completions.create(
            model=GPT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=30,
            temperature=0.8,
        )
        return response.choices[0].message.content.strip()
    except Exception:
        # –ó–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        replies = [
            "–ø—Ä–∏–≤–µ—Ç! üëã",
            "–∫–∞–∫ –¥–µ–ª–∞?",
            "–Ω–æ—Ä–º)",
            "–¥–∞, –≤—Å–µ –æ–∫",
            "–ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é",
            "–º–æ–∂–µ—Ç –±—ã—Ç—å"
        ]
        return random.choice(replies)

async def perform_random_actions(client):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    actions = [
        ("browse_channels", 0.3),      # 30% —à–∞–Ω—Å
        ("check_saved_messages", 0.2), # 20% —à–∞–Ω—Å
        ("view_profile", 0.1),         # 10% —à–∞–Ω—Å
    ]
    
    for action, chance in actions:
        if random.random() < chance:
            if action == "browse_channels":
                await simulate_channel_browsing(client)
            elif action == "check_saved_messages":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                await client.get_messages("me", limit=5)
                print("üìå –ü—Ä–æ–≤–µ—Ä–∏–ª –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            elif action == "view_profile":
                # –°–º–æ—Ç—Ä–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                try:
                    random_channel = random.choice(POPULAR_CHANNELS)
                    await client.get_entity(random_channel)
                    print(f"üë§ –ü–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å @{random_channel}")
                except Exception:
                    pass
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            await asyncio.sleep(random.uniform(*ANTIDETECT_CONFIG["action_cooldown"]))

async def check_and_limit_actions(history):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π"""
    now = datetime.now()
    current_hour = now.strftime("%Y-%m-%d-%H")
    today = now.strftime("%Y-%m-%d")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
    hourly_actions = history.get("hourly_actions", {})
    if hourly_actions.get(current_hour, 0) >= ANTIDETECT_CONFIG["max_messages_per_hour"]:
        print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    daily_actions = history.get("daily_actions", {})
    if daily_actions.get(today, 0) >= ANTIDETECT_CONFIG["max_actions_per_day"]:
        print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π")
        return False
    
    return True

async def monitor_private_messages(client):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüì® –ü—Ä–æ–≤–µ—Ä—è—é –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        dialogs = await client.get_dialogs(limit=10)
        
        for dialog in dialogs:
            await process_dialog_messages(client, dialog)
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def process_dialog_messages(client, dialog):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
    if dialog.is_user and dialog.unread_count > 0:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await client.get_messages(dialog.entity, limit=dialog.unread_count)
        
        for message in messages:
            if message.out:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                continue
            
            if message.text:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
                await handle_private_message(client, message, load_private_chat_history())
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        await client.send_read_acknowledge(dialog.entity)

async def enhanced_main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –∑–∞—â–∏—Ç–æ–π"""
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –∑–∞—â–∏—Ç–æ–π - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if not await should_work_now():
        print("üí§ –ù–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏
    history = load_history()
    reactions_history = load_reactions_history()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if not await check_and_limit_actions(history):
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
    session_duration = random.randint(*ANTIDETECT_CONFIG["session_duration"])
    session_end_time = datetime.now() + timedelta(seconds=session_duration)
    print(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration//60} –º–∏–Ω—É—Ç")
    
    client = TelegramClient(session_file, api_id, api_hash, proxy=proxy)
    await client.start()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
        await update_online_status(client, True)
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
        await asyncio.sleep(random.uniform(5, 15))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await perform_random_actions(client)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await monitor_private_messages(client)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞
        await main_bot_work(client, history, reactions_history)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ü–µ
        if datetime.now() < session_end_time:
            await perform_random_actions(client)
        
    finally:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω
        await update_online_status(client, False)
        await client.disconnect()
        print(f"\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

async def get_last_channel_post(client, channel_username):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
    """
    try:
        messages = await client.get_messages(channel_username, limit=1)
        if messages:
            return messages[0]
        else:
            print(f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ @{channel_username}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        return None

async def main_bot_work(client, history, reactions_history):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
    reactions_history["session_reactions_count"] = 0
    save_reactions_history(reactions_history)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
    last_channel_post = await get_last_channel_post(client, channel_username)
    if not last_channel_post:
        return
    
    post_text = print_post_info(last_channel_post)
    if not post_text:
        post_text = "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞)"
    
    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∞–∫—Ü–∏–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    await asyncio.sleep(random.uniform(3, 10))
    
    # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    await process_channel_post_reaction(client, last_channel_post, reactions_history)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    await handle_discussion_and_comments(client, last_channel_post, post_text, history, reactions_history)
    
    await client.disconnect()
    print(f"\nüëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

async def process_channel_post_reaction(client, post, reactions_history):
    """
    –°—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç.
    """
    if reactions_history.get("session_reactions_count", 0) >= REACTIONS_CONFIG["max_reactions_per_session"]:
        print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ—Å—Å–∏—é")
        return
    if random.random() > REACTIONS_CONFIG["channel_post_reaction_chance"]:
        print("‚è© –ü—Ä–æ–ø—É—Å–∫–∞—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç (–ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)")
        return
    try:
        emoji_list = ["üëç", "üî•", "üòÇ", "üòç", "üëè", "üòÆ", "üò¢", "ü§î"]
        emoji = random.choice(emoji_list)
        await client(SendReactionRequest(
            peer=post.peer_id,
            msg_id=post.id,
            reaction=[ReactionEmoji(emoticon=emoji)]
        ))
        reactions_history["session_reactions_count"] = reactions_history.get("session_reactions_count", 0) + 1
        save_reactions_history(reactions_history)
        print(f"‚ù§Ô∏è‚Äçüî• –ü–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é {emoji} –Ω–∞ –ø–æ—Å—Ç {post.id}")
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–∞–∫—Ü–∏–∏
        await asyncio.sleep(random.uniform(*REACTIONS_CONFIG["reaction_delay"]))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

async def find_discussion_msg_id(client, last_channel_post, discussion_chat):
    """
    –ù–∞—Ö–æ–¥–∏—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è (reply_to_msg_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å id –ø–æ—Å—Ç–∞)
        messages = await client.get_messages(discussion_chat, limit=100)
        for msg in messages:
            if getattr(msg, "reply_to_msg_id", None) == last_channel_post.id:
                return msg.id
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {e}")
        return None

async def process_comment_reactions_and_replies(client, discussion_chat, reactions_history, my_comment_id=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = await client.get_messages(discussion_chat, limit=30)
        for comment in comments:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω my_comment_id
            if my_comment_id and comment.id == my_comment_id:
                continue
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not comment.text:
                continue
            # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if random.random() < REACTIONS_CONFIG["comment_reaction_chance"]:
                emoji_list = ["üëç", "üòÇ", "üî•", "üëè", "üòç", "üòÆ"]
                emoji = random.choice(emoji_list)
                try:
                    await client(SendReactionRequest(
                        peer=comment.peer_id,
                        msg_id=comment.id,
                        reaction=[ReactionEmoji(emoticon=emoji)]
                    ))
                    reactions_history["session_reactions_count"] = reactions_history.get("session_reactions_count", 0) + 1
                    save_reactions_history(reactions_history)
                    print(f"üí¨ –ü–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é {emoji} –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id}")
                    await asyncio.sleep(random.uniform(*REACTIONS_CONFIG["reaction_delay"]))
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")

async def handle_discussion_and_comments(client, last_channel_post, post_text, history, reactions_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É, —Å–Ω–∏–∂–∞—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å main"""
    discussion_msg_id = await find_discussion_msg_id(client, last_channel_post, discussion_chat)
    my_comment_id = None

    if not discussion_msg_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.")
        # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤
        await process_comment_reactions_and_replies(client, discussion_chat, reactions_history)
        return

    if can_comment(last_channel_post.id, history):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É
        style = get_comment_style(history)
        wait_time = random.randint(10, 30)
        print(f"\n‚è≥ –ñ–¥—É {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –ø–æ—Å—Ç—É...")
        await asyncio.sleep(wait_time)
        comment = await gpt_comment_with_context(post_text, style)
        sent_msg = await send_comment_and_get_id(client, discussion_chat, discussion_msg_id, comment, last_channel_post.id, history)
        if sent_msg:
            my_comment_id = sent_msg.id
    else:
        print("\n‚õî –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã")
    
    async def send_comment_and_get_id(client, discussion_chat, discussion_msg_id, comment, post_id, history):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        try:
            sent_msg = await client.send_message(
                entity=discussion_chat,
                message=comment,
                reply_to=discussion_msg_id
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            now = datetime.now()
            post_key = str(post_id)
            history["posts_commented"][post_key] = {
                "comment_id": sent_msg.id,
                "time": now.isoformat(),
                "text": comment
            }
            history["all_comments"].append({
                "post_id": post_key,
                "comment_id": sent_msg.id,
                "time": now.isoformat(),
                "text": comment
            })
            today = now.strftime("%Y-%m-%d")
            history.setdefault("daily_count", {})
            history["daily_count"][today] = history["daily_count"].get(today, 0) + 1
            save_history(history)
            print(f"‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
            return sent_msg
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return None

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    await asyncio.sleep(random.randint(20, 60))
    await process_comment_reactions_and_replies(client, discussion_chat, reactions_history, my_comment_id)

def can_comment(post_id, history):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞.
    """
    now = datetime.now()
    post_key = str(post_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç —Ä–∞–Ω–µ–µ
    if post_key in history.get("posts_commented", {}):
        return False
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ –¥–µ–Ω—å
    daily_count = history.get("daily_count", {})
    today = now.strftime("%Y-%m-%d")
    if daily_count.get(today, 0) >= SPAM_PROTECTION["max_comments_per_day"]:
        return False
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±—ã—Å—Ç—Ä–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
    if history.get("all_comments"):
        last_comment_time = datetime.fromisoformat(history["all_comments"][-1]["time"])
        if (now - last_comment_time).total_seconds() < SPAM_PROTECTION["min_time_between_comments"]:
            return False
    return True

def print_post_info(post):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞"""
    post_text = post.text or post.caption or ""
    print("\n====== –ü–û–°–õ–ï–î–ù–ò–ô –ü–û–°–¢ ======")
    print(f"ID: {post.id}")
    print(f"–î–∞—Ç–∞: {post.date.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–¢–µ–∫—Å—Ç: {post_text[:300]}")
    print("============================\n")
    return post_text

def get_comment_style(history):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –ø–æ—Å—Ç–∞.
    –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–±–µ–≥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∏–ª–µ–π.
    """
    styles = ["positive", "neutral", "short_reaction", "question", "funny", "love", "cool"]
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∏–ª–∏
    last_styles = history.get("last_styles", [])
    available_styles = [s for s in styles if s not in last_styles[-2:]] if last_styles else styles
    style = random.choice(available_styles)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∏–ª–µ–π
    history.setdefault("last_styles", []).append(style)
    if len(history["last_styles"]) > 5:
        history["last_styles"] = history["last_styles"][-5:]
    return style

async def gpt_comment_with_context(post_text, style):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –∏ –∏—Å—Ç–æ—Ä–∏–∏.
    """
    style_prompts = {
        "positive": "–ù–∞–ø–∏—à–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É.",
        "neutral": "–ù–∞–ø–∏—à–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É.",
        "short_reaction": "–ù–∞–ø–∏—à–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–∞–∫—Ü–∏—é (1-2 —Å–ª–æ–≤–∞ –∏–ª–∏ —ç–º–æ–¥–∑–∏) –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç.",
        "question": "–ó–∞–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ –ø–æ—Å—Ç–∞.",
        "funny": "–ù–∞–ø–∏—à–∏ –∑–∞–±–∞–≤–Ω—ã–π, –Ω–µ —Å–ª–∏—à–∫–æ–º –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É.",
        "love": "–ü–æ–∫–∞–∂–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ —ç—Ç–∏–º –ø–æ—Å—Ç–æ–º.",
        "cool": "–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç–∏–ª–µ '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä', '–æ–≥–æ–Ω—å'."
    }
    prompt = f"""–¢—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram. {style_prompts.get(style, '')}
–ü–æ—Å—Ç: {post_text}

–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"""
    try:
        response = openai_client.chat.completions.create(
            model=GPT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=40,
            temperature=0.85,
        )
        return response.choices[0].message.content.strip()
    except Exception:
        # –ó–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        fallback_comments = [
            "–ö–ª–∞—Å—Å! üëç",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            "–°–æ–≥–ª–∞—Å–µ–Ω!",
            "üî•üî•üî•",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç!",
            "–ó–∞–±–∞–≤–Ω–æ)",
            "–í–∞—É!"
        ]
        return random.choice(fallback_comments)

if __name__ == '__main__':
    asyncio.run(enhanced_main())