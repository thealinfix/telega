# multi_bot_manager.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

import asyncio
import random
import json
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from dataclasses import dataclass
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, FloodWaitError, UserIsBlockedError

@dataclass
class BotAccount:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ—Ç–∞"""
    phone: str
    api_id: int
    api_hash: str
    session_file: str
    proxy: Optional[tuple] = None
    name: str = ""
    status: str = "inactive"  # active, inactive, banned, flood_wait
    last_active: Optional[datetime] = None
    flood_wait_until: Optional[datetime] = None
    daily_actions: int = 0
    role: str = "commenter"  # commenter, reactor, lurker, mixed

class MultiBotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏"""
    
    def __init__(self, config_file: str = "bots_config.json"):
        self.config_file = config_file
        self.bots: List[BotAccount] = []
        self.active_clients: Dict[str, TelegramClient] = {}
        self.bot_interactions = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
        self.load_config()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                for bot_data in config.get('bots', []):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –≤ –∫–æ—Ä—Ç–µ–∂–∏ –¥–ª—è proxy
                    if bot_data.get('proxy'):
                        bot_data['proxy'] = tuple(bot_data['proxy'])
                    
                    # –°–æ–∑–¥–∞–µ–º BotAccount –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
                    bot_fields = {
                        'phone': bot_data.get('phone'),
                        'api_id': bot_data.get('api_id'),
                        'api_hash': bot_data.get('api_hash'),
                        'session_file': bot_data.get('session_file'),
                        'proxy': bot_data.get('proxy'),
                        'name': bot_data.get('name', ''),
                        'status': bot_data.get('status', 'inactive'),
                        'role': bot_data.get('role', 'commenter')
                    }
                    
                    bot = BotAccount(**bot_fields)
                    self.bots.append(bot)
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.create_example_config()
    
    def create_example_config(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        example_config = {
            "bots": [
                {
                    "phone": "+1234567890",
                    "api_id": 123456,
                    "api_hash": "your_api_hash_here",
                    "session_file": "sessions/bot1.session",
                    "proxy": ["socks5", "proxy.host", 1080, True, "username", "password"],
                    "name": "Bot1",
                    "role": "commenter"
                }
            ],
            "interaction_settings": {
                "enable_bot_interactions": True,
                "interaction_chance": 0.3,
                "recognize_other_bots": True,
                "bot_conversation_depth": 3
            }
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(example_config, f, indent=4, ensure_ascii=False)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_file}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config = {
            "bots": [
                {
                    "phone": bot.phone,
                    "api_id": bot.api_id,
                    "api_hash": bot.api_hash,
                    "session_file": bot.session_file,
                    "proxy": list(bot.proxy) if bot.proxy else None,
                    "name": bot.name,
                    "role": bot.role,
                    "status": bot.status,
                    "last_active": bot.last_active.isoformat() if bot.last_active else None,
                    "daily_actions": bot.daily_actions
                }
                for bot in self.bots
            ]
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
    
    async def connect_bot(self, bot: BotAccount) -> Optional[TelegramClient]:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            client = TelegramClient(
                bot.session_file,
                bot.api_id,
                bot.api_hash,
                proxy=bot.proxy
            )
            
            await client.connect()
            
            if not await client.is_user_authorized():
                print(f"‚ùå –ë–æ—Ç {bot.name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return None
            
            bot.status = "active"
            bot.last_active = datetime.now()
            self.active_clients[bot.phone] = client
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            me = await client.get_me()
            bot.name = f"{me.first_name or ''} {me.last_name or ''}".strip()
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –±–æ—Ç: {bot.name} ({bot.phone})")
            return client
            
        except FloodWaitError as e:
            bot.status = "flood_wait"
            bot.flood_wait_until = datetime.now() + timedelta(seconds=e.seconds)
            print(f"‚ö†Ô∏è –ë–æ—Ç {bot.name} –≤ —Ñ–ª—É–¥-–≤–µ–π—Ç–µ –Ω–∞ {e.seconds} —Å–µ–∫—É–Ω–¥")
            return None
            
        except UserIsBlockedError:
            bot.status = "banned"
            print(f"‚ùå –ë–æ—Ç {bot.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ {bot.name}: {e}")
            return None
    
    async def get_available_bot(self, exclude_phones: List[str] = None) -> Optional[tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        exclude_phones = exclude_phones or []
        available_bots = []
        
        for bot in self.bots:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            if bot.phone in exclude_phones:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if bot.status == "banned":
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª—É–¥-–≤–µ–π—Ç
            if bot.status == "flood_wait" and bot.flood_wait_until:
                if datetime.now() < bot.flood_wait_until:
                    continue
                else:
                    bot.status = "inactive"
                    bot.flood_wait_until = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            if bot.daily_actions >= 100:  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ª–∏–º–∏—Ç
                continue
            
            available_bots.append(bot)
        
        if not available_bots:
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–π
        bot = min(available_bots, key=lambda b: b.daily_actions)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        if bot.phone not in self.active_clients:
            client = await self.connect_bot(bot)
            if not client:
                return None
        else:
            client = self.active_clients[bot.phone]
        
        return bot, client
    
    async def rotate_bots(self, channel: str, discussion_chat: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–æ—Ç–∞—Ü–∏–∏ –±–æ—Ç–æ–≤"""
        print("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–æ—Ç–∞—Ü–∏–∏ –±–æ—Ç–æ–≤...")
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–æ—Ç–∞
            bot_data = await self.get_available_bot()
            if not bot_data:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
                continue
            
            bot, client = bot_data
            print(f"\nü§ñ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–æ—Ç: {bot.name}")
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                session_duration = random.randint(1800, 3600)  # 30-60 –º–∏–Ω—É—Ç
                await self.run_bot_session(bot, client, channel, discussion_chat, session_duration)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ {bot.name}: {e}")
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞
            bot.status = "inactive"
            bot.daily_actions += random.randint(10, 20)
            self.save_config()
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
            pause = random.randint(300, 600)  # 5-10 –º–∏–Ω—É—Ç
            print(f"‚è∏Ô∏è –ü–∞—É–∑–∞ {pause//60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞...")
            await asyncio.sleep(pause)
    
    async def run_bot_session(self, bot: BotAccount, client: TelegramClient, 
                             channel: str, discussion_chat: str, duration: int):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        try:
            from main import process_new_posts
        except ImportError:
            print("‚ö†Ô∏è –ù–µ –º–æ–≥—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å process_new_posts –∏–∑ main.py")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ main.py")
            return
        
        session_end = datetime.now() + timedelta(seconds=duration)
        print(f"‚è±Ô∏è –°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–∏—Ç—Å—è {duration//60} –º–∏–Ω—É—Ç")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
        bot_history_file = f"history_{bot.phone.replace('+', '')}.json"
        bot_reactions_file = f"reactions_{bot.phone.replace('+', '')}.json"
        
        while datetime.now() < session_end:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
                await process_new_posts(
                    client, 
                    channel, 
                    discussion_chat,
                    history_file=bot_history_file,
                    reactions_file=bot_reactions_file
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏
                await self.check_bot_interactions(bot, client, discussion_chat)
                
                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(random.randint(60, 180))
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
                await asyncio.sleep(60)
    
    async def check_bot_interactions(self, current_bot: BotAccount, 
                                   client: TelegramClient, discussion_chat: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤
        our_bot_names = [b.name for b in self.bots if b.name and b.phone != current_bot.phone]
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await client.get_messages(discussion_chat, limit=20)
            
            for msg in messages:
                if not msg.sender or not msg.text:
                    continue
                
                sender_name = f"{msg.sender.first_name or ''} {msg.sender.last_name or ''}".strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–∞—à –±–æ—Ç?
                if sender_name in our_bot_names:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
                    if random.random() < 0.3:  # 30% —à–∞–Ω—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                        print(f"ü§ù –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–≤–æ–π –±–æ—Ç: {sender_name}")
                        
                        # –ú–æ–∂–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å
                        if random.random() < 0.7:  # 70% —Ä–µ–∞–∫—Ü–∏—è, 30% –æ—Ç–≤–µ—Ç
                            # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
                            emoji = random.choice(["üëç", "‚ù§Ô∏è", "üî•", "üòä"])
                            try:
                                from telethon.tl.functions.messages import SendReactionRequest
                                from telethon.tl.types import ReactionEmoji
                                
                                await client(SendReactionRequest(
                                    peer=discussion_chat,
                                    msg_id=msg.id,
                                    reaction=[ReactionEmoji(emoticon=emoji)]
                                ))
                                print(f"‚úÖ –ü–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é {emoji} –±–æ—Ç—É {sender_name}")
                            except:
                                pass
                        else:
                            # –û—Ç–≤–µ—á–∞–µ–º
                            response = random.choice([
                                "—Å–æ–≥–ª–∞—Å–µ–Ω", "—Ç–æ—á–Ω–æ", "+1", "—Ç–æ–∂–µ —Ç–∞–∫ –¥—É–º–∞—é",
                                "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–Ω–µ –∑–Ω–∞–ª", "—Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ—É"
                            ])
                            
                            await asyncio.sleep(random.randint(30, 90))
                            
                            try:
                                await client.send_message(
                                    discussion_chat,
                                    response,
                                    reply_to=msg.id
                                )
                                print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –±–æ—Ç—É {sender_name}: {response}")
                            except:
                                pass
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {e}")
    
    async def reset_daily_limits(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –≤—Å–µ—Ö –±–æ—Ç–æ–≤ (–∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)"""
        for bot in self.bots:
            bot.daily_actions = 0
        self.save_config()
        print("‚úÖ –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
async def start_multi_bot_system():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏"""
    manager = MultiBotManager()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    async def daily_reset():
        while True:
            await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
            await manager.reset_daily_limits()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await asyncio.gather(
        manager.rotate_bots("@chinapack", "@chipack_chat"),
        daily_reset()
    )

if __name__ == "__main__":
    asyncio.run(start_multi_bot_system())