# smart_bot_coordinator.py - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

import asyncio
import json
import random
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from dataclasses import dataclass
import math

@dataclass
class PostActivity:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º"""
    post_id: int
    channel: str
    timestamp: datetime
    bots_commented: List[str] = None
    bots_reacted: List[str] = None
    total_comments: int = 0
    
    def __post_init__(self):
        if self.bots_commented is None:
            self.bots_commented = []
        if self.bots_reacted is None:
            self.bots_reacted = []

class SmartBotCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤"""
    
    def __init__(self, config_file="bots_config.json", activity_file="bot_activity.json"):
        self.config_file = config_file
        self.activity_file = activity_file
        self.post_activities: Dict[int, PostActivity] = {}
        self.load_config()
        self.load_activity()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        with open(self.config_file, 'r', encoding='utf-8') as f:
            self.config = json.load(f)
        self.bots = self.config.get('bots', [])
    
    def load_activity(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if os.path.exists(self.activity_file):
            try:
                with open(self.activity_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã PostActivity
                    for post_id, activity_data in data.items():
                        self.post_activities[int(post_id)] = PostActivity(
                            post_id=activity_data['post_id'],
                            channel=activity_data['channel'],
                            timestamp=datetime.fromisoformat(activity_data['timestamp']),
                            bots_commented=activity_data.get('bots_commented', []),
                            bots_reacted=activity_data.get('bots_reacted', []),
                            total_comments=activity_data.get('total_comments', 0)
                        )
            except:
                self.post_activities = {}
    
    def save_activity(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        data = {}
        for post_id, activity in self.post_activities.items():
            data[str(post_id)] = {
                'post_id': activity.post_id,
                'channel': activity.channel,
                'timestamp': activity.timestamp.isoformat(),
                'bots_commented': activity.bots_commented,
                'bots_reacted': activity.bots_reacted,
                'total_comments': activity.total_comments
            }
        
        with open(self.activity_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    
    def calculate_comment_probability(self, post_id: int, bot_phone: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ—Ç–æ–≤
        base_probabilities = {
            1: 1.0,      # 1 –±–æ—Ç = 100% –¥–æ–ª–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
            2: 0.7,      # 2 –±–æ—Ç–∞ = 70% –∫–∞–∂–¥—ã–π
            3: 0.5,      # 3 –±–æ—Ç–∞ = 50% –∫–∞–∂–¥—ã–π
            4: 0.4,      # 4 –±–æ—Ç–∞ = 40% –∫–∞–∂–¥—ã–π
            5: 0.35,     # 5 –±–æ—Ç–æ–≤ = 35% –∫–∞–∂–¥—ã–π
            10: 0.25,    # 10 –±–æ—Ç–æ–≤ = 25% –∫–∞–∂–¥—ã–π
            20: 0.15,    # 20 –±–æ—Ç–æ–≤ = 15% –∫–∞–∂–¥—ã–π
        }
        
        active_bots_count = len([b for b in self.bots if b.get('status') != 'banned'])
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if active_bots_count in base_probabilities:
            base_prob = base_probabilities[active_bots_count]
        else:
            # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤
            base_prob = max(0.1, 1.0 / math.log(active_bots_count + 1))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥ –ø–æ—Å—Ç–æ–º
        activity = self.post_activities.get(post_id)
        if activity:
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤
            if activity.bots_commented:
                # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
                reduction_factor = 0.7 ** len(activity.bots_commented)
                base_prob *= reduction_factor
                
                # –ù–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                if len(activity.bots_commented) == 0 and active_bots_count > 0:
                    base_prob = max(base_prob, 0.9)
        else:
            # –ù–æ–≤—ã–π –ø–æ—Å—Ç - –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if active_bots_count == 1:
                base_prob = 1.0
            else:
                base_prob = max(base_prob, 0.8)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –±–æ—Ç–∞
        bot_config = next((b for b in self.bots if b['phone'] == bot_phone), None)
        if bot_config:
            role = bot_config.get('role', 'mixed')
            role_modifiers = {
                'commenter': 1.3,    # +30% –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤
                'reactor': 0.5,      # -50% –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –±–æ–ª—å—à–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç
                'lurker': 0.2,       # -80% –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
                'mixed': 1.0         # –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            }
            base_prob *= role_modifiers.get(role, 1.0)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä - —Å–Ω–∏–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
        if activity and activity.timestamp:
            hours_passed = (datetime.now() - activity.timestamp).total_seconds() / 3600
            if hours_passed > 2:
                base_prob *= 0.5  # -50% –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
            if hours_passed > 6:
                base_prob *= 0.5  # –µ—â–µ -50% –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤
        
        return min(1.0, max(0.05, base_prob))  # –û—Ç 5% –¥–æ 100%
    
    async def should_bot_comment(self, post_id: int, bot_phone: str, force_at_least_one: bool = True) -> bool:
        """–†–µ—à–∞–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ—Å—Ç–∞
        if post_id not in self.post_activities:
            self.post_activities[post_id] = PostActivity(
                post_id=post_id,
                channel="@chinapack",
                timestamp=datetime.now()
            )
        
        activity = self.post_activities[post_id]
        
        # –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª - –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if bot_phone in activity.bots_commented:
            print(f"üö´ –ë–æ—Ç {bot_phone} —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç {post_id}")
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        probability = self.calculate_comment_probability(post_id, bot_phone)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if force_at_least_one and not activity.bots_commented:
            # –≠—Ç–æ –ø–µ—Ä–≤—ã–π –±–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –ø–æ—Å—Ç
            active_bots = [b for b in self.bots if b.get('status') != 'banned']
            if bot_phone == active_bots[0]['phone']:
                # –ü–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
                probability = 1.0
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        should_comment = random.random() < probability
        
        print(f"üé≤ –ë–æ—Ç {bot_phone}: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {probability:.1%}, —Ä–µ—à–µ–Ω–∏–µ: {'–î–ê' if should_comment else '–ù–ï–¢'}")
        
        if should_comment:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            activity.bots_commented.append(bot_phone)
            activity.total_comments += 1
            self.save_activity()
        
        return should_comment
    
    async def coordinate_post_activity(self, post_id: int, channel: str = "@chinapack") -> Dict[str, bool]:
        """–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞"""
        
        print(f"\nüìä –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
        print(f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {len([b for b in self.bots if b.get('status') != 'banned'])}")
        
        decisions = {}
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±–æ—Ç–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        active_bots = [b for b in self.bots if b.get('status') != 'banned']
        random.shuffle(active_bots)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        for i, bot in enumerate(active_bots):
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ—à–µ–Ω–∏—è–º–∏
            if i > 0:
                await asyncio.sleep(random.uniform(0.5, 2))
            
            should_comment = await self.should_bot_comment(
                post_id, 
                bot['phone'],
                force_at_least_one=True
            )
            
            decisions[bot['phone']] = should_comment
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        commenters = [phone for phone, should in decisions.items() if should]
        print(f"\nüìà –ò—Ç–æ–≥–æ –±—É–¥—É—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å: {len(commenters)} –∏–∑ {len(active_bots)} –±–æ—Ç–æ–≤")
        
        return decisions
    
    def get_activity_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        stats = {
            'total_posts': len(self.post_activities),
            'posts_last_hour': 0,
            'posts_last_24h': 0,
            'total_comments': sum(a.total_comments for a in self.post_activities.values()),
            'bot_activity': {}
        }
        
        now = datetime.now()
        
        for activity in self.post_activities.values():
            hours_passed = (now - activity.timestamp).total_seconds() / 3600
            
            if hours_passed <= 1:
                stats['posts_last_hour'] += 1
            if hours_passed <= 24:
                stats['posts_last_24h'] += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º
            for bot_phone in activity.bots_commented:
                if bot_phone not in stats['bot_activity']:
                    stats['bot_activity'][bot_phone] = {
                        'comments': 0,
                        'reactions': 0
                    }
                stats['bot_activity'][bot_phone]['comments'] += 1
        
        return stats

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py
async def check_should_comment(post_id: int, bot_phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py)"""
    coordinator = SmartBotCoordinator()
    return await coordinator.should_bot_comment(post_id, bot_phone)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è main.py
def should_comment_smart(post_id: int, bot_phone: str, history: Dict) -> bool:
    """–£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —É—á–µ—Ç–æ–º –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    coordinator = SmartBotCoordinator()
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ async
    probability = coordinator.calculate_comment_probability(post_id, bot_phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity = coordinator.post_activities.get(post_id)
    
    # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –±–æ—Ç
    if not activity or not activity.bots_commented:
        active_bots = [b for b in coordinator.bots if b.get('status') != 'banned']
        if active_bots and bot_phone == active_bots[0]['phone']:
            return True  # –ü–µ—Ä–≤—ã–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
    
    # –ò–Ω–∞—á–µ - —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    return random.random() < probability

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py
"""
# –í —Ñ—É–Ω–∫—Ü–∏–∏ handle_discussion_and_comments –¥–æ–±–∞–≤—å—Ç–µ:

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
from smart_bot_coordinator import should_comment_smart

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
me = await client.get_me()
bot_phone = me.phone

# –í–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ can_comment –∏—Å–ø–æ–ª—å–∑—É–µ–º:
if should_comment_smart(last_channel_post.id, bot_phone, history):
    # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
    pass
else:
    print("üé≤ –†–µ—à–µ–Ω–æ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç")
"""

if __name__ == "__main__":
    # –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    async def test():
        coordinator = SmartBotCoordinator()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Å—Ç–∞
        post_id = 12345
        decisions = await coordinator.coordinate_post_activity(post_id)
        
        print("\nüìä –†–µ—à–µ–Ω–∏—è –ø–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:")
        for phone, should_comment in decisions.items():
            print(f"  {phone}: {'‚úÖ –î–∞' if should_comment else '‚ùå –ù–µ—Ç'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = coordinator.get_activity_stats()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}")
        print(f"  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['total_comments']}")
    
    asyncio.run(test())