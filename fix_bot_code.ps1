# fix_bot_code.ps1
# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ –±–æ—Ç–∞

param(
    [string]$FilePath = "paste.txt",
    [string]$OutputPath = "bot_fixed.py"
)

Write-Host "üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –±–æ—Ç–∞..." -ForegroundColor Green
Write-Host "üìÑ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: $FilePath" -ForegroundColor Cyan
Write-Host "üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: $OutputPath" -ForegroundColor Cyan

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
if (-not (Test-Path $FilePath)) {
    Write-Host "‚ùå –§–∞–π–ª $FilePath –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    exit 1
}

# –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
$content = Get-Content $FilePath -Raw -Encoding UTF8

Write-Host "`nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º..." -ForegroundColor Yellow

# 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ ContentAnalyzer
Write-Host "  1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ContentAnalyzer..." -ForegroundColor White

# –ò—â–µ–º –∫–ª–∞—Å—Å ContentAnalyzer —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Ç–æ–¥–æ–≤
$classPattern = '(?s)(class ContentAnalyzer:.*?)(?=\nclass\s|\nasync\s+def\s|\ndef\s+[^_]|\n# ==|\z)'
$matches = [regex]::Matches($content, $classPattern)

$fullClass = ""
$maxMethods = 0

foreach ($match in $matches) {
    $classContent = $match.Value
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ def –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
    $methodCount = ([regex]::Matches($classContent, '\n\s+def\s+')).Count
    
    if ($methodCount -gt $maxMethods) {
        $maxMethods = $methodCount
        $fullClass = $classContent
    }
}

Write-Host "    ‚úì –ù–∞–π–¥–µ–Ω –ø–æ–ª–Ω—ã–π –∫–ª–∞—Å—Å —Å $maxMethods –º–µ—Ç–æ–¥–∞–º–∏" -ForegroundColor Green

# –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ContentAnalyzer
$content = $content -replace '(?s)class ContentAnalyzer:.*?(?=\nclass\s|\nasync\s+def\s|\ndef\s+[^_]|\n# ==|\z)', ''

# –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∫–ª–∞—Å—Å –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
$importEndPattern = '(?s)(.*?bot_coordinator = SmartBotCoordinator\(\)\s*\n)'
if ($content -match $importEndPattern) {
    $imports = $matches[1]
    $afterImports = $content.Substring($imports.Length)
    $content = $imports + "`n" + $fullClass + "`n" + $afterImports
}

# 2. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ analyze_post –≤–Ω–µ –∫–ª–∞—Å—Å–∞
Write-Host "  2Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π..." -ForegroundColor White

# –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ ContentAnalyzer –≤–Ω–µ –∫–ª–∞—Å—Å–∞
$methodsToRemove = @(
    'analyze_post',
    '_extract_brands', 
    '_extract_models',
    '_extract_colors',
    '_extract_materials',
    '_extract_price_context',
    '_has_price',
    '_get_release_type',
    '_is_news',
    '_get_main_topic',
    '_analyze_sentiment'
)

foreach ($method in $methodsToRemove) {
    # –£–¥–∞–ª—è–µ–º def method(self, ...) –≤–Ω–µ –∫–ª–∞—Å—Å–∞
    $pattern = "(?m)^def $method\(self[^)]*\):(?:\n(?!def |class |async def ).*)*"
    $content = $content -replace $pattern, ''
}

# 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º enhanced_main - —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
Write-Host "  3Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ enhanced_main..." -ForegroundColor White

# –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é enhanced_main –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä—É
$enhancedMainPattern = '(?s)(async def enhanced_main\(\):.*?)(?=\nasync def|\ndef [^_]|\nclass|\z)'
if ($content -match $enhancedMainPattern) {
    $funcContent = $matches[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ print statements
    if ($funcContent -match '(?s)(print.*?–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.*?\n)(.*?)(print.*?–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.*?\n)') {
        # –ï—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
        $fixedFunc = @'
async def enhanced_main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –∑–∞—â–∏—Ç–æ–π"""
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –∑–∞—â–∏—Ç–æ–π - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ sessions
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ sessions:")
    if os.path.exists('sessions'):
        files = os.listdir('sessions')
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for file in files:
            print(f"  - {file}")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ sessions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üìÅ –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É sessions...")
        os.makedirs('sessions', exist_ok=True)
    
    print(f"\nüîç –ò—â—É —Ñ–∞–π–ª: {session_file}")
    print(f"üìç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(session_file)}")
    print(f"üì¢ –ö–∞–Ω–∞–ª: @{channel_username}")
    print(f"üí¨ –ß–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è: @{discussion_chat}")
    print(f"üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã: 100%")
    print(f"üí≠ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –≤–∫–ª—é—á–µ–Ω—ã")
    
    client = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if not await should_work_now():
            print("üí§ –ù–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏
        history = load_history()
        reactions_history = load_reactions_history()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not await check_and_limit_actions(history):
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        session_duration = random.randint(*ANTIDETECT_CONFIG["session_duration"])
        session_end_time = datetime.now() + timedelta(seconds=session_duration)
        print(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration//60} –º–∏–Ω—É—Ç")
        
        client = TelegramClient(session_file, api_id, api_hash, proxy=proxy)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await client.connect()
        
        if not await client.is_user_authorized():
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            print("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã): ")
            await client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
            try:
                await client.sign_in(phone, code)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å): ")
                await client.sign_in(password=password)
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
        await update_online_status(client, True)
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
        await asyncio.sleep(random.uniform(5, 15))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await perform_random_actions(client)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await monitor_private_messages(client)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞
        await main_bot_work(client, history, reactions_history)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ü–µ
        if datetime.now() < session_end_time:
            await perform_random_actions(client)
        
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–æ—Å—Ç–∞–µ–º—Å—è –æ–Ω–ª–∞–π–Ω)
        await update_online_status(client, True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await continuous_monitoring_loop(client, reactions_history)
        
    except asyncio.CancelledError:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Ctrl+C)")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if client and client.is_connected():
            try:
                await update_online_status(client, False)
                await client.disconnect()
            except Exception:
                pass
        print(f"\nüëã –ü–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
'@
        
        $content = $content -replace [regex]::Escape($funcContent), $fixedFunc
        Write-Host "    ‚úì –§—É–Ω–∫—Ü–∏—è enhanced_main –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞" -ForegroundColor Green
    }
}

# 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
Write-Host "  4Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞..." -ForegroundColor White

# –£–¥–∞–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ if __name__ == "__main__":
$content = $content -replace '(?s)if __name__ == "__main__":(?:\n(?!if |class |async def |def [^_]).*)*', ''

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
$mainBlock = @'


if __name__ == "__main__":
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç–∞
    selected_bot = select_bot()
    
    if selected_bot:
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        api_id = selected_bot['api_id']
        api_hash = selected_bot['api_hash']
        session_file = selected_bot['session_file']
        
        # –ü—Ä–æ–∫—Å–∏ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∫–æ—Ä—Ç–µ–∂
        if selected_bot.get('proxy'):
            proxy = tuple(selected_bot['proxy'])
        else:
            proxy = None
        
        print(f"\nüì± –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
        print(f"   –°–µ—Å—Å–∏—è: {session_file}")
        print(f"   API ID: {api_id}")
        if proxy:
            print(f"   –ü—Ä–æ–∫—Å–∏: {proxy[1]}:{proxy[2]}")
    else:
        print("\nüì± –ó–∞–ø—É—Å–∫ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if "--stats" in sys.argv:
        asyncio.run(show_coordination_stats())
    else:
        asyncio.run(enhanced_main())
'@

$content = $content.TrimEnd() + $mainBlock

# 5. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
Write-Host "  5Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤..." -ForegroundColor White

# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ bot_coordinator
$lines = $content -split "`n"
$seen = @{}
$cleanedLines = @()

foreach ($line in $lines) {
    if ($line -match 'from smart_bot_coordinator import') {
        if (-not $seen.ContainsKey('bot_coordinator')) {
            $seen['bot_coordinator'] = $true
            $cleanedLines += $line
        }
    }
    elseif ($line -match 'bot_coordinator = SmartBotCoordinator') {
        if (-not $seen.ContainsKey('bot_coordinator_init')) {
            $seen['bot_coordinator_init'] = $true
            $cleanedLines += $line
        }
    }
    else {
        $cleanedLines += $line
    }
}

$content = $cleanedLines -join "`n"

# 6. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º handle_discussion_and_comments
Write-Host "  6Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ handle_discussion_and_comments..." -ForegroundColor White

# –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∫–æ–¥–æ–º if not my_comment_id:
$problemPattern = '(?s)if not my_comment_id:(.*?)else:(.*?)(?=\n\nasync def|$)'
if ($content -match $problemPattern) {
    $fixedCode = @'
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    await asyncio.sleep(random.randint(20, 60))
    
    if not my_comment_id:
        # –ë–æ—Ç –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª - –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—è–º–∏
        print("üéØ –ë–æ—Ç –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª - –≤–∫–ª—é—á–∞—é —É—Å–∏–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–∞–∫—Ü–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        modified_config = {
            "comment_reaction_chance": REACTIONS_CONFIG["comment_reaction_chance"] * 1.5,
            "react_to_replies_chance": REACTIONS_CONFIG["react_to_replies_chance"],
            "reaction_delay": REACTIONS_CONFIG["reaction_delay"],
            "max_reactions_per_session": 8
        }
        
        await process_comment_reactions_and_replies_modified(
            client, discussion_chat, post_text, reactions_history,
            history, my_comment_id, modified_config
        )
    else:
        # –ë–æ—Ç –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        await process_comment_reactions_and_replies(
            client, discussion_chat, post_text, reactions_history, 
            history, my_comment_id
        )
'@
    
    $content = $content -replace [regex]::Escape($matches[0]), $fixedCode
}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
Write-Host "`nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..." -ForegroundColor Yellow
$content | Out-File -FilePath $OutputPath -Encoding UTF8

Write-Host "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green
Write-Host "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $OutputPath" -ForegroundColor Cyan

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
$originalSize = (Get-Item $FilePath).Length
$newSize = (Get-Item $OutputPath).Length
$reduction = [math]::Round((($originalSize - $newSize) / $originalSize) * 100, 2)

Write-Host "`nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" -ForegroundColor Yellow
Write-Host "   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: $([math]::Round($originalSize/1KB, 2)) KB" -ForegroundColor White
Write-Host "   –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: $([math]::Round($newSize/1KB, 2)) KB" -ForegroundColor White
Write-Host "   –£–º–µ–Ω—å—à–µ–Ω–∏–µ: $reduction%" -ForegroundColor Green