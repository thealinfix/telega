# check_bots.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤ –∏ –ø—Ä–æ–∫—Å–∏

import asyncio
import json
import os
from datetime import datetime
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, FloodWaitError

async def check_proxy(proxy_config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ {proxy_config[1]}:{proxy_config[2]}...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    test_client = TelegramClient(
        'test_proxy.session',
        2040,  # –í–∞—à API ID
        'b18441a1ff607e10a989891a5462e627',  # –í–∞—à API Hash
        proxy=proxy_config
    )
    
    try:
        await test_client.connect()
        print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
        result = await test_client.get_me()
        if result:
            print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        await test_client.disconnect()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        if os.path.exists('test_proxy.session'):
            os.remove('test_proxy.session')
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        try:
            await test_client.disconnect()
        except:
            pass
        
        if os.path.exists('test_proxy.session'):
            os.remove('test_proxy.session')
            
        return False

async def check_bot_session(bot_config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Å—Å–∏—é –±–æ—Ç–∞"""
    print(f"\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ {bot_config['name']} ({bot_config['phone']})...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
    if not os.path.exists(bot_config['session_file']):
        print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {bot_config['session_file']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
        alt_paths = [
            f"sessions/{bot_config['phone'].replace('+', '')}.session",
            f"register/{bot_config['phone'].replace('+', '')}.session",
            bot_config['session_file'].replace('.telethon', '')
        ]
        
        for alt_path in alt_paths:
            if os.path.exists(alt_path):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª: {alt_path}")
                bot_config['session_file'] = alt_path
                break
    
    try:
        client = TelegramClient(
            bot_config['session_file'],
            bot_config['api_id'],
            bot_config['api_hash'],
            proxy=tuple(bot_config['proxy']) if bot_config.get('proxy') else None
        )
        
        await client.connect()
        
        if not await client.is_user_authorized():
            print(f"‚ùå –ë–æ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥)")
            await client.disconnect()
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = await client.get_me()
        print(f"‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞!")
        print(f"   ID: {me.id}")
        print(f"   –ò–º—è: {me.first_name} {me.last_name or ''}")
        print(f"   Username: @{me.username}" if me.username else "   Username: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"   Premium: {'–î–∞' if me.premium else '–ù–µ—Ç'}")
        
        await client.disconnect()
        return True
        
    except FloodWaitError as e:
        print(f"‚ö†Ô∏è Flood wait: {e.seconds} —Å–µ–∫—É–Ω–¥")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("=" * 60)
    print("üîß –ü–†–û–í–ï–†–ö–ê –ë–û–¢–û–í –ò –ü–†–û–ö–°–ò")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not os.path.exists('bots_config.json'):
        print("‚ùå –§–∞–π–ª bots_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—à–µ.")
        return
    
    with open('bots_config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    bots = config['bots']
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤: {len(bots)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    unique_proxies = {}
    for bot in bots:
        if bot.get('proxy'):
            proxy_key = f"{bot['proxy'][1]}:{bot['proxy'][2]}"
            if proxy_key not in unique_proxies:
                unique_proxies[proxy_key] = bot['proxy']
    
    print(f"\nüåê –ü–†–û–í–ï–†–ö–ê –ü–†–û–ö–°–ò ({len(unique_proxies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)")
    print("-" * 60)
    
    working_proxies = []
    for proxy_key, proxy in unique_proxies.items():
        if await check_proxy(tuple(proxy)):
            working_proxies.append(proxy_key)
    
    print(f"\n‚úÖ –†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)} –∏–∑ {len(unique_proxies)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–æ–≤
    print(f"\nü§ñ –ü–†–û–í–ï–†–ö–ê –ë–û–¢–û–í")
    print("-" * 60)
    
    working_bots = []
    for bot in bots:
        if await check_bot_session(bot):
            working_bots.append(bot['name'])
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)} –∏–∑ {len(unique_proxies)}")
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {len(working_bots)} –∏–∑ {len(bots)}")
    
    if working_bots:
        print(f"\nüü¢ –ì–æ—Ç–æ–≤—ã–µ –∫ —Ä–∞–±–æ—Ç–µ –±–æ—Ç—ã:")
        for bot_name in working_bots:
            print(f"   - {bot_name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('bots_config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main())