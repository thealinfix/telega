# run_multi_bot.py - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã

import asyncio
import sys
from multi_bot_manager import MultiBotManager, start_multi_bot_system
import json

async def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
    manager = MultiBotManager()
    
    while True:
        print("\n" + "="*50)
        print("ü§ñ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ë–û–¢–ê–ú–ò")
        print("="*50)
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–æ—Ç–æ–≤: {len(manager.bots)}")
        print("\n1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–æ—Ç–∞—Ü–∏—é")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞")
        print("5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤")
        print("6. –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã")
        print("7. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–æ–≤")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        
        if choice == "1":
            show_all_bots(manager)
        elif choice == "2":
            await add_new_bot(manager)
        elif choice == "3":
            await start_auto_rotation(manager)
        elif choice == "4":
            await run_specific_bot(manager)
        elif choice == "5":
            check_bot_status(manager)
        elif choice == "6":
            await manager.reset_daily_limits()
        elif choice == "7":
            configure_bot_interactions(manager)
        elif choice == "0":
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def show_all_bots(manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    print("\nüìã –°–ü–ò–°–û–ö –ë–û–¢–û–í:")
    print("-" * 80)
    
    for i, bot in enumerate(manager.bots, 1):
        status_emoji = {
            "active": "üü¢",
            "inactive": "‚ö´",
            "banned": "üî¥",
            "flood_wait": "üü°"
        }.get(bot.status, "‚ùì")
        
        print(f"{i}. {bot.name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ({bot.phone})")
        print(f"   –°—Ç–∞—Ç—É—Å: {status_emoji} {bot.status}")
        print(f"   –†–æ–ª—å: {bot.role}")
        print(f"   –î–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {bot.daily_actions}")
        if bot.last_active:
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {bot.last_active.strftime('%Y-%m-%d %H:%M')}")
        print()

async def add_new_bot(manager):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    print("\n‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ë–û–¢–ê")
    
    phone = input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã): ")
    api_id = int(input("API ID: "))
    api_hash = input("API Hash: ")
    session_file = f"sessions/{phone.replace('+', '')}.session"
    
    print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    proxy_host = input("Proxy host: ")
    
    proxy = None
    if proxy_host:
        proxy_port = int(input("Proxy port: "))
        proxy_user = input("Proxy username: ")
        proxy_pass = input("Proxy password: ")
        proxy = ("socks5", proxy_host, proxy_port, True, proxy_user, proxy_pass)
    
    role = input("–†–æ–ª—å –±–æ—Ç–∞ (commenter/reactor/lurker/mixed) [mixed]: ") or "mixed"
    
    new_bot = {
        "phone": phone,
        "api_id": api_id,
        "api_hash": api_hash,
        "session_file": session_file,
        "proxy": proxy,
        "role": role,
        "name": "",
        "status": "inactive",
        "daily_actions": 0
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
    config_file = "bots_config.json"
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except:
        config = {"bots": []}
    
    config["bots"].append(new_bot)
    
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)
    
    print("‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    manager.load_config()

async def start_auto_rotation(manager):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–æ—Ç–∞—Ü–∏—é"""
    print("\nüîÑ –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –†–û–¢–ê–¶–ò–ò")
    
    channel = input("–ö–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ [@chinapack]: ") or "@chinapack"
    discussion = input("–ß–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è [@chipack_chat]: ") or "@chipack_chat"
    
    print(f"\n‚úÖ –ó–∞–ø—É—Å–∫ —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è {channel} / {discussion}")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    try:
        await manager.rotate_bots(channel, discussion)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –†–æ—Ç–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

async def run_specific_bot(manager):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    show_all_bots(manager)
    
    try:
        bot_num = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±–æ—Ç–∞: ")) - 1
        if 0 <= bot_num < len(manager.bots):
            bot = manager.bots[bot_num]
            
            duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (–º–∏–Ω—É—Ç—ã) [30]: ") or "30") * 60
            channel = input("–ö–∞–Ω–∞–ª [@chinapack]: ") or "@chinapack"
            discussion = input("–ß–∞—Ç [@chipack_chat]: ") or "@chipack_chat"
            
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {bot.name or bot.phone}")
            
            client = await manager.connect_bot(bot)
            if client:
                await manager.run_bot_session(bot, client, channel, discussion, duration)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

def check_bot_status(manager):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    print("\nüìä –°–¢–ê–¢–£–° –ë–û–¢–û–í:")
    print("-" * 50)
    
    active = sum(1 for b in manager.bots if b.status == "active")
    inactive = sum(1 for b in manager.bots if b.status == "inactive")
    banned = sum(1 for b in manager.bots if b.status == "banned")
    flood = sum(1 for b in manager.bots if b.status == "flood_wait")
    
    print(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active}")
    print(f"‚ö´ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {inactive}")
    print(f"üî¥ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ: {banned}")
    print(f"üü° –§–ª—É–¥-–≤–µ–π—Ç: {flood}")
    print(f"\nüìà –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: {sum(b.daily_actions for b in manager.bots)}")

def configure_bot_interactions(manager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
    print("\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –ë–û–¢–û–í")
    
    config_file = "bots_config.json"
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except:
        config = {}
    
    settings = config.get("interaction_settings", {
        "enable_bot_interactions": True,
        "interaction_chance": 0.3,
        "recognize_other_bots": True,
        "bot_conversation_depth": 3
    })
    
    print(f"\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"1. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏: {'–í–∫–ª—é—á–µ–Ω–æ' if settings['enable_bot_interactions'] else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
    print(f"2. –®–∞–Ω—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {settings['interaction_chance']*100}%")
    print(f"3. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤: {'–î–∞' if settings['recognize_other_bots'] else '–ù–µ—Ç'}")
    print(f"4. –ì–ª—É–±–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–æ–≤: {settings['bot_conversation_depth']} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    choice = input("\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n): ")
    
    if choice.lower() == 'y':
        settings['enable_bot_interactions'] = input("–í–∫–ª—é—á–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è? (y/n): ").lower() == 'y'
        
        chance = input(f"–®–∞–Ω—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (0-100) [{settings['interaction_chance']*100}]: ")
        if chance:
            settings['interaction_chance'] = float(chance) / 100
        
        settings['recognize_other_bots'] = input("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤? (y/n): ").lower() == 'y'
        
        depth = input(f"–ì–ª—É–±–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–æ–≤ [{settings['bot_conversation_depth']}]: ")
        if depth:
            settings['bot_conversation_depth'] = int(depth)
        
        config['interaction_settings'] = settings
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏...")
    
    try:
        asyncio.run(main_menu())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()