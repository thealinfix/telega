import logging
from telegram import InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import TelegramError, BadRequest
import httpx
from . import config, utils, fetcher
from .state import state, save_state
from .openai_utils import openai_client

async def gen_caption(title: str, context: str, category: str = "sneakers", is_thought: bool = False, image_description: str = "") -> str:
    if is_thought:
        # –†–µ–∂–∏–º "–º—ã—Å–ª–µ–π" - –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–π –∏ –ª–∏—á–Ω—ã–π —Å—Ç–∏–ª—å
        system_prompt = """–¢—ã –≤–µ–¥–µ—à—å –ª–∏—á–Ω—ã–π –±–ª–æ–≥ –æ –∫—Ä–æ—Å—Å–æ–≤–∫–∞—Ö –∏ —É–ª–∏—á–Ω–æ–π –º–æ–¥–µ. –ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –±—É–¥—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏. –°—Ç–∏–ª—å –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π, —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –ª–∏—á–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º. 

–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –≠–ú–û–î–ó–ò:
- –¢–û–õ–¨–ö–û –≤ –Ω–∞—á–∞–ª–µ –∞–±–∑–∞—Ü–∞ –∏–ª–∏ –≤—Å–µ–≥–æ –ø–æ—Å—Ç–∞
- –ù–ï –ë–û–õ–ï–ï –æ–¥–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –Ω–∞ –∞–±–∑–∞—Ü
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏: üòç üî• üí≠ ü§î üòé ‚ú® üëü

–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
- –õ–∏—á–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è ("–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è", "–ø–æ-–º–æ–µ–º—É", "—á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è")
- –≠–º–æ—Ü–∏–∏ ("–æ–±–∞–ª–¥–µ–ª –∫–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª", "–≤–ª—é–±–∏–ª—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞", "–Ω–µ –º–æ–≥—É –Ω–∞–ª—é–±–æ–≤–∞—Ç—å—Å—è")
- –°—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑ –∂–∏–∑–Ω–∏
- –ù–µ–º–Ω–æ–≥–æ —é–º–æ—Ä–∞ –∏–ª–∏ –∏—Ä–æ–Ω–∏–∏ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ

–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–µ–∑–∂–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã."""
        
        if image_description:
            user_prompt = f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–º—ã.\n–¢–µ–º–∞: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_description}"
        else:
            user_prompt = f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –æ: {title}"
    else:
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å —ç–º–æ–¥–∑–∏
        system_prompt = """–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ —É–ª–∏—á–Ω—É—é –º–æ–¥—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ü–µ–ø–ª—è—é—â–∏–µ –∏ —Å—Ç–∏–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –æ —Ä–µ–ª–∏–∑–∞—Ö, —Ç—Ä–µ–Ω–¥–∞—Ö –∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è—Ö. 

–ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –≠–ú–û–î–ó–ò:
- –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –ø–æ—Å—Ç–∞ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/—Ç–µ–º–∞)
- –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –û–î–ò–ù —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ (–ø—Ä–∏–∑—ã–≤/–≤–æ–ø—Ä–æ—Å)
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –∫–∞–∂–¥–æ–º –∞–±–∑–∞—Ü–µ
- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞: üî• ‚ö°Ô∏è üí´ üëü üö®
- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –∫–æ–Ω—Ü–∞: üëÄ ü§î üí≠

–ü–∏—à–∏ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–º–æ–ª–æ–¥—ë–∂–Ω–æ–º —Ç–æ–Ω–µ: –±–µ–∑ –ø–∞—Ñ–æ—Å–∞, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞, –±–µ–∑ –∂–∞—Ä–≥–æ–Ω–∞. –°—Ç–∏–ª—å ‚Äî –∂–∏–≤–æ–π, –ª—ë–≥–∫–∏–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞:
1. –ù–∞—á–Ω–∏ —Å –û–î–ù–û–ì–û —ç–º–æ–¥–∑–∏ –∏ —Ü–µ–ø–ª—è—é—â–µ–π —Ñ—Ä–∞–∑—ã (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –°—É—Ç—å —Ä–µ–ª–∏–∑–∞: –±—Ä–µ–Ω–¥, –º–æ–¥–µ–ª—å, –¥–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) - –ë–ï–ó —ç–º–æ–¥–∑–∏
3. –≠—Å—Ç–µ—Ç–∏–∫–∞: –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ü–≤–µ—Ç–∞, —á—Ç–æ —Ü–µ–ø–ª—è–µ—Ç - –ë–ï–ó —ç–º–æ–¥–∑–∏
4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –º–Ω–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –û–î–ò–ù —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω—Ü–µ)

–ò–∑–±–µ–≥–∞–π: –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π, —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–ª–∏—à–µ.
–ú–∞–∫—Å–∏–º—É–º 600 —Å–∏–º–≤–æ–ª–æ–≤."""
        
        user_prompt = f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–î–µ—Ç–∞–ª–∏: {context[:500] if context else '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}"
    
    models = ["gpt-4o", "gpt-4-turbo", "gpt-4", "gpt-3.5-turbo"]
    
    for model in models:
        try:
            logging.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é {'–º—ã—Å–ª–∏' if is_thought else '–æ–ø–∏—Å–∞–Ω–∏–µ'} –¥–ª—è: {title[:50]}... —Å –º–æ–¥–µ–ª—å—é {model}")
            response = await openai_client.chat.completions.create(
                model=model,
                temperature=0.9 if is_thought else 0.8,
                max_tokens=300,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
            )
            generated = response.choices[0].message.content.strip()
            logging.info(f"{'–ú—ã—Å–ª–∏' if is_thought else '–û–ø–∏—Å–∞–Ω–∏–µ'} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –î–ª—è –º—ã—Å–ª–µ–π –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if not is_thought and title.lower() not in generated.lower():
                generated = f"<b>{title}</b>\n\n{generated}"
            
            return generated if generated else f"<b>{title}</b>\n\nüî• –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–∫–æ—Ä–æ!"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {type(e).__name__}: {str(e)}")
            continue
    
    logging.error("–í—Å–µ –º–æ–¥–µ–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    return f"<b>{title}</b>\n\nüëü –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"

def build_media_group(record: dict, for_channel: bool = False) -> list:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã —Å —É—á–µ—Ç–æ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    generated_images = state.get("generated_images", {}).get(record["id"], [])
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ
    if generated_images:
        images = generated_images + record.get("original_images", [])
    else:
        images = record.get("images") or []
    
    caption = record.get("description") or record.get("context") or record.get("title") or ""
    
    if for_channel:
        hashtags = utils.get_hashtags(record.get("title", ""), record.get("category", "sneakers"))
        source_text = f"\n\nüìç {record.get('source', 'Unknown')}"
        category_emoji = "üëü" if record.get("category") == "sneakers" else "üëî"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        schedule_info = ""
        if record.get("scheduled_time"):
            schedule_info = f"\n‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {record['scheduled_time']}"
        
        if len(caption) + len(record['link']) + len(source_text) + len(hashtags) + len(schedule_info) + 50 < 1024:
            caption += f"{source_text}\n{category_emoji} <a href=\"{record['link']}\">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>{schedule_info}\n\n{hashtags}"
        elif len(caption) + len(hashtags) + 20 < 1024:
            caption += f"\n\n{hashtags}"
    
    caption = caption[:1020] + "..." if len(caption) > 1024 else caption
    media = []
    
    if images:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_to_use = images[:config.MAX_IMAGES_PER_POST]
        
        media.append(InputMediaPhoto(
            media=images_to_use[0],
            caption=caption,
            parse_mode=ParseMode.HTML
        ))
        for url in images_to_use[1:]:
            media.append(InputMediaPhoto(media=url))
    
    return media

async def send_preview(bot, record: dict, chat_id: int, current_idx: int, total: int, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Ç–µ–≥–∞–º–∏"""
    category_emoji = "üëü" if record.get("category") == "sneakers" else "üëî"
    date_str = utils.format_date_for_display(record.get("timestamp", ""))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    has_generated = record.get("id") in state.get("generated_images", {})
    is_favorite = record.get("id") in state.get("favorites", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    generated_count = len(state.get("generated_images", {}).get(record["id"], []))
    original_count = len(record.get("images", []))
    total_images = generated_count + original_count if has_generated else original_count
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏
    tags = record.get("tags", {})
    # –ï—Å–ª–∏ —É —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
    if not tags and "title" in record:
        tags = utils.extract_tags(record.get("title", ""), record.get("context", ""))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–≥–∏ –≤ –∑–∞–ø–∏—Å—å
        if record["id"] in state["pending"]:
            state["pending"][record["id"]]["tags"] = tags
            save_state()
    
    tags_display = utils.format_tags_for_display(tags)
    
    preview_text = (
        f"üìÖ <b>{date_str}</b>\n"
        f"{category_emoji} <b>{record['title']}</b>\n\n"
    )
    
    if tags_display:
        preview_text += f"{tags_display}\n\n"
    
    preview_text += (
        f"üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {record.get('source', 'Unknown')}\n"
        f"üîó <a href=\"{record['link']}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é</a>\n"
        f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}\n"
    )
    
    if has_generated:
        preview_text += f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_count}\n"
    
    if is_favorite:
        preview_text += "‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º\n"
    
    preview_text += f"\nüìä –ü–æ—Å—Ç {current_idx + 1} –∏–∑ {total}"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons = []
    
    nav_buttons = []
    if current_idx > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"preview_prev:{current_idx}"))
    nav_buttons.append(InlineKeyboardButton(f"{current_idx + 1}/{total}", callback_data="noop"))
    if current_idx < total - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"preview_next:{current_idx}"))
    
    keyboard_buttons.append(nav_buttons)
    keyboard_buttons.append([
        InlineKeyboardButton("üëÅ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_full:{record['id']}"),
        InlineKeyboardButton("‚≠êÔ∏è" if is_favorite else "‚òÜ", callback_data=f"toggle_fav:{record['id']}")
    ])
    keyboard_buttons.append([
        InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data=f"gen_cover:{record['id']}"),
        InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"schedule:{record['id']}")
    ])
    keyboard_buttons.append([
        InlineKeyboardButton("üè∑ –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º", callback_data="filter_tags"),
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="preview_close")
    ])
    keyboard_buttons.append([
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cmd_back_main")
    ])
    
    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    
    try:
        if message_id:
            return await bot.edit_message_text(
                preview_text,
                chat_id,
                message_id,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
        else:
            return await bot.send_message(
                chat_id,
                preview_text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
    except BadRequest as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é: {e}")
        return None

async def send_full_post(bot, record: dict, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ–ø–∏—Å–∞–Ω–∏—è"""
    loading_msg = await bot.send_message(
        chat_id,
        "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...",
        parse_mode=ParseMode.HTML
    )
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if record.get("needs_parsing"):
            async with httpx.AsyncClient(timeout=30, follow_redirects=True) as client:
                record = await fetcher.parse_full_content(client, record)
                if record["id"] in state["pending"]:
                    state["pending"][record["id"]] = record
                    save_state()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if not record.get("description") or record.get("description") == record.get("title"):
            description = await gen_caption(
                record["title"], 
                record.get("context", ""), 
                record.get("category", "sneakers")
            )
            record["description"] = description
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
            if record["id"] in state["pending"]:
                state["pending"][record["id"]]["description"] = description
                save_state()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await bot.delete_message(chat_id, loading_msg.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await send_for_moderation(bot, record, show_all=False)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞",
            chat_id,
            loading_msg.message_id
        )

async def send_for_moderation(bot, record: dict, show_all: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not isinstance(record, dict):
        logging.error("Record –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")
        return False
    
    required_fields = ['id', 'title', 'link']
    for field in required_fields:
        if field not in record:
            logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            return False
    
    description = record.get("description")
    if not description:
        description = record.get("context") or record["title"]
        record["description"] = description
    
    approve_data = f"approve:{record['id']}"
    reject_data = f"reject:{record['id']}"
    regenerate_data = f"regen:{record['id']}"
    back_data = f"back_preview:{record['id']}"
    gen_cover_data = f"gen_cover_full:{record['id']}"
    revert_img_data = f"revert_img:{record['id']}"
    custom_prompt_data = f"custom_prompt:{record['id']}"
    
    keyboard_buttons = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=approve_data)],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=regenerate_data)],
        [
            InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data=gen_cover_data),
            InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç", callback_data=custom_prompt_data)
        ],
        [
            InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data=revert_img_data),
            InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=reject_data)
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–≤—å—é", callback_data=back_data),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cmd_back_main")
        ]
    ]
    
    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    
    category_emoji = "üëü" if record.get("category") == "sneakers" else "üëî"
    date_str = utils.format_date_for_display(record.get("timestamp", ""))
    hashtags = utils.get_hashtags(record.get("title", ""), record.get("category", "sneakers"))
    source_info = f"\nüìç –ò—Å—Ç–æ—á–Ω–∏–∫: {record.get('source', 'Unknown')}"
    link_info = f"\nüîó –°—Ç–∞—Ç—å—è: {record['link']}"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
    img_info = ""
    generated_count = len(state.get("generated_images", {}).get(record["id"], []))
    original_count = len(record.get("images", []))
    
    if generated_count > 0:
        img_info = f"\nüé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {generated_count}, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö: {original_count}"
    else:
        img_info = f"\nüñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {original_count}"
    
    text = (f"üìÖ {date_str}\n"
           f"{category_emoji} <b>{record['title']}</b>\n\n"
           f"{record['description'][:400]}"
           f"{source_info}{link_info}{img_info}\n\n"
           f"{hashtags}\n\n"
           f"üÜî ID: {record['id']}")
    
    try:
        media = build_media_group(record, for_channel=False)
        if media:
            await bot.send_media_group(config.ADMIN_CHAT_ID, media)
            await bot.send_message(
                config.ADMIN_CHAT_ID,
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        else:
            await bot.send_message(
                config.ADMIN_CHAT_ID,
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
        return True
    except TelegramError as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        return False

async def publish_release(bot, record: dict):
    logging.info(f"–ü—É–±–ª–∏–∫—É—é –≤ –∫–∞–Ω–∞–ª: {record['title'][:50]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    channel = state.get("channel", config.TELEGRAM_CHANNEL)
    
    try:
        media = build_media_group(record, for_channel=True)
        if media:
            await bot.send_media_group(channel, media)
        else:
            category_emoji = "üëü" if record.get("category") == "sneakers" else "üëî"
            hashtags = utils.get_hashtags(record.get("title", ""), record.get("category", "sneakers"))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_emojis = {
                "SneakerNews": "üì∞",
                "Hypebeast": "üî•",
                "Highsnobiety": "üíé",
                "Hypebeast Footwear": "üëü",
                "Hypebeast Fashion": "üëî",
                "Highsnobiety Sneakers": "‚ú®",
                "Highsnobiety Fashion": "üé®"
            }
            source_emoji = source_emojis.get(record.get('source', ''), "üìç")
            source_text = f"\n\n{source_emoji} {record.get('source', 'Unknown')}"
            
            text = (f"{category_emoji} <b>{record['title']}</b>\n\n"
                   f"{record['description']}{source_text}\n\n"
                   f"üîó <a href=\"{record['link']}\">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n\n"
                   f"{hashtags}")
            await bot.send_message(
                channel,
                text,
                parse_mode=ParseMode.HTML
            )
        return True
    except TelegramError as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False

