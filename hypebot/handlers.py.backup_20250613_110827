import logging
import asyncio
from datetime import datetime, timezone, timedelta
import httpx
import re
import pytz
from bs4 import BeautifulSoup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from . import config, state, utils
from .openai_utils import generate_image, analyze_image
from .state import state, save_state, clean_old_posts, get_user_timezone, localize_datetime
from .messaging import (
    gen_caption,
    build_media_group,
    send_preview,
    send_full_post,
    send_for_moderation,
    publish_release,
)
from .tasks import check_releases_job


async def thoughts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"""
    try:
        user_id = update.message.from_user.id
        if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not context.args:
            await update.message.reply_text(
                "üí≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/thoughts <–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/thoughts –Ω–æ–≤—ã–µ Jordan 4 –≤ —á–µ—Ä–Ω–æ–º —Ü–≤–µ—Ç–µ\n\n"
                "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
        topic = " ".join(context.args)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        state["waiting_for_image"] = {
            "type": "thoughts",
            "topic": topic,
            "message_id": update.message.message_id
        }
        save_state()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        msg = await update.message.reply_text(
            "üí≠ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ thoughts_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏")

async def skip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if state.get("waiting_for_image"):
        waiting_data = state["waiting_for_image"]
        state["waiting_for_image"] = None
        save_state()
        
        if waiting_data["type"] == "thoughts":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            msg = await update.message.reply_text("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º—ã—Å–ª–∏...")
            
            thought_text = await gen_caption(
                waiting_data["topic"], 
                "", 
                "sneakers", 
                is_thought=True
            )
            
            hashtags = utils.get_hashtags(waiting_data["topic"], "sneakers")
            final_text = f"{thought_text}\n\n{hashtags}"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_thought")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regen_thought")],
                [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="gen_thought_cover")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
            ])
            
            state["current_thought"] = {
                "text": final_text,
                "topic": waiting_data["topic"]
            }
            save_state()
            
            await msg.edit_text(
                f"üí≠ <b>–ü–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ:</b>\n\n{final_text}",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        if not state.get("waiting_for_image"):
            return
        
        user_id = update.message.from_user.id
        if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
            return
        
        waiting_data = state["waiting_for_image"]
        state["waiting_for_image"] = None
        save_state()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
        file = await context.bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_bytes = await file.download_as_bytearray()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_description = await analyze_image(bytes(image_bytes))
        
        if waiting_data["type"] == "thoughts":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await msg.edit_text("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º—ã—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            thought_text = await gen_caption(
                waiting_data["topic"], 
                "", 
                "sneakers", 
                is_thought=True,
                image_description=image_description
            )
            
            hashtags = utils.get_hashtags(waiting_data["topic"], "sneakers")
            final_text = f"{thought_text}\n\n{hashtags}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            uploaded_photo = await update.message.photo[-1].get_file()
            photo_url = uploaded_photo.file_path
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_thought")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regen_thought")],
                [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="gen_thought_cover")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
            ])
            
            state["current_thought"] = {
                "text": final_text,
                "topic": waiting_data["topic"],
                "image_description": image_description,
                "image_url": photo.file_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            }
            save_state()
            
            await msg.edit_text(
                f"üí≠ <b>–ü–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ:</b>\n\n{final_text}\n\n"
                f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
        if data.startswith("cmd_"):
            if data == "cmd_status":
                await show_status_info(query)
                return
            elif data == "cmd_help":
                await show_help_info(query)
                return
            elif data == "cmd_preview":
                if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    return
                await start_preview_mode(query, context)
                return
            elif data == "cmd_check":
                if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    return
                await query.edit_message_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤...")
                asyncio.create_task(check_releases_job(context))
                return
            elif data == "cmd_thoughts":
                if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    return
                await show_thoughts_prompt(query)
                return
            elif data == "cmd_scheduled":
                if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    return
                await show_scheduled_posts(query)
                return
            elif data == "cmd_stats":
                await show_stats_info(query)
                return
            elif data == "cmd_clean_menu":
                if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    return
                await show_clean_menu(query)
                return
            elif data == "cmd_tools_menu":
                if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    return
                await show_tools_menu(query)
                return
            elif data == "cmd_back_main":
                await show_main_menu(query)
                return
            elif data == "cmd_auto_menu":
                if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    return
                await show_auto_publish_menu(query)
                return
            elif data == "cmd_settings":
                if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                    return
                await show_settings_menu(query)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if data.startswith("settings_"):
            if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                return
                
            if data == "settings_channel":
                state["waiting_for_channel"] = True
                save_state()
                await query.edit_message_text(
                    "üì¢ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "‚Ä¢ <code>@channelname</code> - –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
                    "‚Ä¢ <code>-1001234567890</code> - –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (ID —á–∞—Ç–∞)\n\n"
                    f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: <code>{state.get('channel', config.TELEGRAM_CHANNEL)}</code>\n\n"
                    "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    parse_mode=ParseMode.HTML
                )
                return
            elif data == "settings_timezone":
                await show_timezone_menu(query)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
        if data.startswith("tz_"):
            if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                return
                
            timezone_name = data.replace("tz_", "").replace("_", "/")
            state["timezone"] = timezone_name
            save_state()
            
            await query.edit_message_text(
                f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {timezone_name}\n\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(pytz.timezone(timezone_name)).strftime('%H:%M')}",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if data.startswith("auto_"):
            if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                return
            
            if data == "auto_toggle":
                state["auto_publish"] = not state.get("auto_publish", False)
                save_state()
                await show_auto_publish_menu(query)
                return
            elif data.startswith("auto_interval:"):
                interval = int(data.split(":")[1])
                state["publish_interval"] = interval
                save_state()
                await show_auto_publish_menu(query)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if data.startswith("toggle_fav:"):
            uid = data.split(":")[1]
            if "favorites" not in state:
                state["favorites"] = []
            
            if uid in state["favorites"]:
                state["favorites"].remove(uid)
            else:
                state["favorites"].append(uid)
            
            save_state()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
            preview_list = state.get("preview_mode", {}).get("list", [])
            if uid in preview_list:
                idx = preview_list.index(uid)
                record = state["pending"].get(uid)
                if record:
                    await send_preview(
                        context.bot,
                        record,
                        query.message.chat.id,
                        idx,
                        len(preview_list),
                        query.message.message_id
                    )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏
        if data.startswith("clean_"):
            if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                return
                
            if data == "clean_old":
                before_count = len(state["pending"])
                removed = clean_old_posts(state)
                after_count = len(state["pending"])
                save_state()
                
                await query.edit_message_text(
                    f"üóë <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n\n"
                    f"–ë—ã–ª–æ –ø–æ—Å—Ç–æ–≤: {before_count}\n"
                    f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö: {removed}\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: {after_count}\n\n"
                    f"–£–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ {config.MAX_POST_AGE_DAYS} –¥–Ω–µ–π",
                    parse_mode=ParseMode.HTML
                )
                return
            elif data == "clean_pending":
                count = len(state["pending"])
                state["pending"].clear()
                state["preview_mode"].clear()
                state["generated_images"].clear()
                save_state()
                
                await query.edit_message_text(f"üóë –û—á–∏—â–µ–Ω–æ {count} –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
                return
            elif data == "clean_sent":
                count = len(state["sent_links"])
                state["sent_links"].clear()
                save_state()
                
                await query.edit_message_text(f"üóë –û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {count} –∑–∞–ø–∏—Å–µ–π")
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if data.startswith("tool_"):
            if config.ADMIN_CHAT_ID and query.from_user.id != config.ADMIN_CHAT_ID:
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                return
                
            if data == "tool_test_sources":
                await query.edit_message_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
                await test_sources_inline(query, context)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if data.startswith("schedule:"):
            uid = data.split(":")[1]
            state["waiting_for_schedule"] = uid
            save_state()
            
            user_tz = get_user_timezone()
            await query.edit_message_text(
                f"‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
                f"–í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {state.get('timezone', config.DEFAULT_TIMEZONE)}\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(user_tz).strftime('%H:%M')}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                f"‚Ä¢ <code>18:30</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 18:30\n"
                f"‚Ä¢ <code>25.12 15:00</code> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞\n"
                f"‚Ä¢ <code>+2h</code> - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n"
                f"‚Ä¢ <code>+30m</code> - —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
                f"‚Ä¢ <code>+1d</code> - —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å\n\n"
                f"–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if data.startswith("edit_schedule:"):
            post_id = data.split(":")[1]
            state["editing_schedule"] = post_id
            save_state()
            
            schedule_info = state["scheduled_posts"].get(post_id)
            if schedule_info:
                scheduled_time = datetime.fromisoformat(schedule_info["time"].replace('Z', '+00:00'))
                local_time = localize_datetime(scheduled_time)
                user_tz = get_user_timezone()
                
                await query.edit_message_text(
                    f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
                    f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {local_time.strftime('%d.%m.%Y %H:%M')} ({state.get('timezone', config.DEFAULT_TIMEZONE)})\n"
                    f"–°–µ–π—á–∞—Å: {datetime.now(user_tz).strftime('%H:%M')}\n\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    f"‚Ä¢ <code>18:30</code> - —Å–µ–≥–æ–¥–Ω—è –≤ 18:30\n"
                    f"‚Ä¢ <code>25.12 15:00</code> - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞\n"
                    f"‚Ä¢ <code>+2h</code> - —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\n\n"
                    f"–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    parse_mode=ParseMode.HTML
                )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if data.startswith("delete_schedule:"):
            post_id = data.split(":")[1]
            if post_id in state.get("scheduled_posts", {}):
                state["scheduled_posts"].pop(post_id)
                save_state()
                await query.edit_message_text("‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        if data.startswith("custom_prompt:"):
            uid = data.split(":")[1]
            state["waiting_for_prompt"] = uid
            save_state()
            
            await query.edit_message_text(
                "‚úèÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ–±–ª–æ–∂–∫–∏</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                "–ü—Ä–∏–º–µ—Ä: <i>Futuristic Nike Air Max sneakers floating in space with neon lights</i>\n\n"
                "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if data == "filter_tags":
            await show_filter_menu(query)
            return
        
        elif data.startswith("filter_brand:"):
            brand = data.split(":")[1]
            await filter_posts_by_tag(query, context, "brand", brand)
            return
        
        elif data.startswith("filter_model:"):
            model = data.split(":")[1]
            await filter_posts_by_tag(query, context, "model", model)
            return
        
        elif data.startswith("filter_type:"):
            release_type = data.split(":")[1]
            await filter_posts_by_tag(query, context, "type", release_type)
            return
        
        elif data == "filter_reset":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            preview_list = sorted(
                state["pending"].keys(),
                key=lambda x: state["pending"][x].get("timestamp", ""),
                reverse=True
            )
            state["preview_mode"] = {
                "list": preview_list,
                "current": 0,
                "filter": None
            }
            save_state()
            
            await query.edit_message_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
            
            if preview_list:
                first_record = state["pending"].get(preview_list[0])
                if first_record:
                    await send_preview(
                        context.bot,
                        first_record,
                        query.message.chat.id,
                        0,
                        len(preview_list)
                    )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—å—é
        if data.startswith("preview_"):
            if data == "preview_close":
                await query.message.delete()
                return
            
            elif data.startswith("preview_next:") or data.startswith("preview_prev:"):
                current_idx = int(data.split(":")[1])
                preview_list = state.get("preview_mode", {}).get("list", [])
                
                if data.startswith("preview_next:"):
                    new_idx = min(current_idx + 1, len(preview_list) - 1)
                else:
                    new_idx = max(current_idx - 1, 0)
                
                if 0 <= new_idx < len(preview_list):
                    uid = preview_list[new_idx]
                    record = state["pending"].get(uid)
                    if record:
                        await send_preview(
                            context.bot, 
                            record, 
                            query.message.chat.id,
                            new_idx,
                            len(preview_list),
                            query.message.message_id
                        )
                return
            
            elif data.startswith("preview_full:"):
                uid = data.split(":")[1]
                record = state["pending"].get(uid)
                if record:
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–≤—å—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Å—Ç
                    await query.message.delete()
                    await send_full_post(context.bot, record, query.message.chat.id)
                return
        
        elif data.startswith("gen_cover"):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏
            uid = data.split(":")[-1]
            record = state["pending"].get(uid)
            if record:
                await query.message.edit_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±–ª–æ–∂–∫—É...")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å
                category = record.get("category", "sneakers")
                style_config = config.IMAGE_STYLES.get(category, config.IMAGE_STYLES["sneakers"])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
                prompt = style_config["prompt_template"].format(title=record["title"])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = await generate_image(prompt, style_config["style"])
                
                if image_url:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if uid not in state["generated_images"]:
                        state["generated_images"][uid] = []
                    
                    state["generated_images"][uid].append(image_url)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    state["pending"][uid] = record
                    save_state()
                    
                    await query.message.edit_text("‚úÖ –û–±–ª–æ–∂–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
                    if "full" in data:
                        await send_for_moderation(context.bot, record)
                else:
                    await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏")
            return
        
        elif data.startswith("revert_img:"):
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            uid = data.split(":")[1]
            record = state["pending"].get(uid)
            if record:
                state["generated_images"].pop(uid, None)
                save_state()
                
                await query.message.edit_text("‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                await send_for_moderation(context.bot, record)
            return
        
        elif data.startswith("back_preview:"):
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–≤—å—é
            uid = data.split(":")[1]
            await query.message.delete()
            
            preview_list = state.get("preview_mode", {}).get("list", [])
            if uid in preview_list:
                idx = preview_list.index(uid)
                record = state["pending"].get(uid)
                if record:
                    await send_preview(
                        context.bot,
                        record,
                        query.message.chat.id,
                        idx,
                        len(preview_list)
                    )
            return
        
        elif data == "publish_thought":
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º—ã—Å–ª–∏
            thought_data = state.get("current_thought")
            if thought_data:
                try:
                    channel = state.get("channel", config.TELEGRAM_CHANNEL)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if thought_data.get("image_url"):
                        await context.bot.send_photo(
                            channel,
                            thought_data["image_url"],
                            caption=thought_data["text"],
                            parse_mode=ParseMode.HTML
                        )
                    else:
                        await context.bot.send_message(
                            channel,
                            thought_data["text"],
                            parse_mode=ParseMode.HTML
                        )
                    await query.edit_message_text("‚úÖ –ú—ã—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!")
                    state.pop("current_thought", None)
                    save_state()
                except Exception as e:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return
        
        elif data == "regen_thought":
            # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–∏
            thought_data = state.get("current_thought")
            if thought_data:
                await query.edit_message_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –º—ã—Å–ª–∏...")
                
                new_thought = await gen_caption(
                    thought_data["topic"], 
                    "", 
                    "sneakers", 
                    is_thought=True,
                    image_description=thought_data.get("image_description", "")
                )
                hashtags = utils.get_hashtags(thought_data["topic"], "sneakers")
                final_text = f"{new_thought}\n\n{hashtags}"
                
                state["current_thought"]["text"] = final_text
                save_state()
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_thought")],
                    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regen_thought")],
                    [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="gen_thought_cover")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
                ])
                
                await query.edit_message_text(
                    f"üí≠ <b>–ü–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ:</b>\n\n{final_text}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
            return
        
        elif data == "gen_thought_cover":
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –º—ã—Å–ª–∏
            thought_data = state.get("current_thought")
            if thought_data:
                await query.edit_message_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±–ª–æ–∂–∫—É –¥–ª—è –º—ã—Å–ª–∏...")
                
                style_config = config.IMAGE_STYLES["thoughts"]
                prompt = style_config["prompt_template"].format(topic=thought_data["topic"])
                
                image_url = await generate_image(prompt, style_config["style"])
                
                if image_url:
                    thought_data["image_url"] = image_url
                    state["current_thought"] = thought_data
                    save_state()
                    
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_thought")],
                        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="regen_thought")],
                        [InlineKeyboardButton("üé® –ù–æ–≤–∞—è –æ–±–ª–æ–∂–∫–∞", callback_data="gen_thought_cover")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
                    ])
                    
                    await query.edit_message_text(
                        f"üí≠ <b>–ü–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ:</b>\n\n{thought_data['text']}\n\n"
                        f"üé® –û–±–ª–æ–∂–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
                        parse_mode=ParseMode.HTML,
                        reply_markup=keyboard
                    )
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏")
            return
        
        elif data == "cancel_thought":
            await query.message.delete()
            state.pop("current_thought", None)
            save_state()
            return
        
        elif data == "noop":
            # –ü—É—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        if ":" not in data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        action, uid = data.split(":", 1)
        
        if action not in ["approve", "reject", "regen"]:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        
        record = state["pending"].get(uid)
        if not record:
            await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
        
        if action == "approve":
            published = await publish_release(context.bot, record)
            if published:
                await query.edit_message_text(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {record['title'][:50]}...")
                if record["link"] not in state["sent_links"]:
                    state["sent_links"].append(record["link"])
                    if len(state["sent_links"]) > 1000:
                        state["sent_links"] = state["sent_links"][-500:]
                state["pending"].pop(uid, None)
                state["generated_images"].pop(uid, None)
                save_state()
            else:
                await query.edit_message_text(f"üö® –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {record['title'][:50]}...")
        
        elif action == "reject":
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {record['title'][:50]}...")
            state["pending"].pop(uid, None)
            state["generated_images"].pop(uid, None)
            save_state()
        
        elif action == "regen":
            await query.edit_message_text(f"üîÑ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è: {record['title'][:50]}...")
            
            context_text = record.get("context", "")
            if not context_text and "link" in record:
                context_text = f"–†–µ–ª–∏–∑ –æ—Ç {record.get('title', '')}"
            
            new_description = await gen_caption(record["title"], context_text, record.get("category", "sneakers"))
            record["description"] = new_description
            state["pending"][uid] = record
            save_state()
            
            await send_for_moderation(context.bot, record, show_all=False)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        except:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")
        is_admin = not config.ADMIN_CHAT_ID or update.message.from_user.id == config.ADMIN_CHAT_ID
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard_buttons = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="cmd_status")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="cmd_help")]
        ]
        
        if is_admin:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            keyboard_buttons.extend([
                [
                    InlineKeyboardButton("üëÅ –ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤", callback_data="cmd_preview"),
                    InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–∏–∑—ã", callback_data="cmd_check")
                ],
                [
                    InlineKeyboardButton("üí≠ –°–æ–∑–¥–∞—Ç—å –º—ã—Å–ª–∏", callback_data="cmd_thoughts"),
                    InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="cmd_scheduled")
                ],
                [
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cmd_stats"),
                    InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è", callback_data="cmd_auto_menu")
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="cmd_settings"),
                    InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="cmd_clean_menu")
                ],
                [
                    InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="cmd_tools_menu")
                ]
            ])
        
        keyboard = InlineKeyboardMarkup(keyboard_buttons)
        
        welcome_text = (
            "üëü <b>HypeBot</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ —É–ª–∏—á–Ω–æ–π –º–æ–¥—ã\n\n"
            "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã Nike, Adidas, Jordan –∏ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –æ–±–ª–æ–∂–µ–∫\n"
            "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:"
        )
        
        if is_admin:
            welcome_text += f"\n\nüîê <i>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</i>"
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.message.from_user.id
        if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
            return
        
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        if state.get("waiting_for_channel"):
            # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            new_channel = text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
            if new_channel.startswith("@") or (new_channel.lstrip("-").isdigit() and len(new_channel) > 5):
                state["channel"] = new_channel
                state["waiting_for_channel"] = False
                save_state()
                
                await update.message.reply_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{new_channel}</code>\n\n"
                    f"–í—Å–µ –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ <code>@channelname</code> –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
                    "‚Ä¢ <code>-1001234567890</code> –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
                    parse_mode=ParseMode.HTML
                )
        
        elif state.get("waiting_for_schedule"):
            # –û–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scheduled_time = utils.parse_schedule_time(text)
            if scheduled_time:
                post_id = state["waiting_for_schedule"]
                record = state["pending"].get(post_id)
                
                if record:
                    state["scheduled_posts"][post_id] = {
                        "time": scheduled_time.isoformat(),
                        "record": record
                    }
                    
                    state["waiting_for_schedule"] = None
                    save_state()
                    
                    local_time = localize_datetime(scheduled_time)
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {local_time.strftime('%d.%m.%Y %H:%M')} ({state.get('timezone', config.DEFAULT_TIMEZONE)})\n"
                        f"üìù {record['title'][:50]}..."
                    )
                else:
                    await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ <code>18:30</code>\n"
                    "‚Ä¢ <code>25.12 15:00</code>\n"
                    "‚Ä¢ <code>+2h</code>",
                    parse_mode=ParseMode.HTML
                )
        
        elif state.get("editing_schedule"):
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scheduled_time = utils.parse_schedule_time(text)
            if scheduled_time:
                post_id = state["editing_schedule"]
                
                if post_id in state.get("scheduled_posts", {}):
                    state["scheduled_posts"][post_id]["time"] = scheduled_time.isoformat()
                    state["editing_schedule"] = None
                    save_state()
                    
                    local_time = localize_datetime(scheduled_time)
                    await update.message.reply_text(
                        f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {local_time.strftime('%d.%m.%Y %H:%M')} ({state.get('timezone', config.DEFAULT_TIMEZONE)})"
                    )
                else:
                    await update.message.reply_text("‚ùå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        elif state.get("waiting_for_prompt"):
            # –û–∂–∏–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            uid = state["waiting_for_prompt"]
            record = state["pending"].get(uid)
            
            if record:
                await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º...")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = await generate_image(text, "creative")
                
                if image_url:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if uid not in state["generated_images"]:
                        state["generated_images"][uid] = []
                    
                    state["generated_images"][uid].append(image_url)
                    state["waiting_for_prompt"] = None
                    save_state()
                    
                    await update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
                    await send_for_moderation(context.bot, record)
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        elif state.get("auto_interval_custom"):
            # –û–∂–∏–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            try:
                minutes = int(text)
                if 10 <= minutes <= 1440:  # –û—Ç 10 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤
                    state["publish_interval"] = minutes * 60
                    state["auto_interval_custom"] = False
                    save_state()
                    await update.message.reply_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {minutes} –º–∏–Ω—É—Ç")
                else:
                    await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 1440 –º–∏–Ω—É—Ç")
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = update.message.from_user.id
    if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
        return
    
    cancelled = []
    
    if state.get("waiting_for_schedule"):
        state["waiting_for_schedule"] = None
        cancelled.append("–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    
    if state.get("editing_schedule"):
        state["editing_schedule"] = None
        cancelled.append("–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    if state.get("waiting_for_image"):
        state["waiting_for_image"] = None
        cancelled.append("–æ–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    if state.get("waiting_for_prompt"):
        state["waiting_for_prompt"] = None
        cancelled.append("–æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
    
    if state.get("auto_interval_custom"):
        state["auto_interval_custom"] = False
        cancelled.append("—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
    
    if state.get("waiting_for_channel"):
        state["waiting_for_channel"] = False
        cancelled.append("–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
    



    if state.get("editing_thought"):
        state["editing_thought"] = False
        cancelled.append("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏")
    
    if state.get("changing_thought_photo"):
        state["changing_thought_photo"] = False
        cancelled.append("–∑–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ –º—ã—Å–ª–∏")
    
    if state.get("editing_post"):
        state["editing_post"] = None
        cancelled.append("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞")
    
    if state.get("changing_post_photo"):
        state["changing_post_photo"] = None
        cancelled.append("–∑–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞")
    
    if state.get("editing_thought"):
        state["editing_thought"] = False
        cancelled.append("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏")
    
    if state.get("changing_thought_photo"):
        state["changing_thought_photo"] = False
        cancelled.append("–∑–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ –º—ã—Å–ª–∏")
    
    if state.get("editing_post"):
        state["editing_post"] = None
        cancelled.append("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞")
    
    if state.get("changing_post_photo"):
        state["changing_post_photo"] = None
        cancelled.append("–∑–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞")
    
    if state.get("editing_thought"):
        state["editing_thought"] = False
        cancelled.append("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏")
    
    if state.get("changing_thought_photo"):
        state["changing_thought_photo"] = False
        cancelled.append("–∑–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ –º—ã—Å–ª–∏")
    
    if state.get("editing_post"):
        state["editing_post"] = None
        cancelled.append("—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞")
    
    if state.get("changing_post_photo"):
        state["changing_post_photo"] = None
        cancelled.append("–∑–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞")
    
    save_state()
    
    if cancelled:
        await update.message.reply_text(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {', '.join(cancelled)}")
    else:
        await update.message.reply_text("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    is_admin = not config.ADMIN_CHAT_ID or query.from_user.id == config.ADMIN_CHAT_ID
    
    keyboard_buttons = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="cmd_status")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="cmd_help")]
    ]
    
    if is_admin:
        keyboard_buttons.extend([
            [
                InlineKeyboardButton("üëÅ –ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤", callback_data="cmd_preview"),
                InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–∏–∑—ã", callback_data="cmd_check")
            ],
            [
                InlineKeyboardButton("üí≠ –°–æ–∑–¥–∞—Ç—å –º—ã—Å–ª–∏", callback_data="cmd_thoughts"),
                InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="cmd_scheduled")
            ],
            [
                InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cmd_stats"),
                InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è", callback_data="cmd_auto_menu")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="cmd_settings"),
                InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="cmd_clean_menu")
            ],
            [
                InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="cmd_tools_menu")
            ]
        ])
    
    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    
    welcome_text = (
        "üëü <b>HypeBot</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ —É–ª–∏—á–Ω–æ–π –º–æ–¥—ã\n\n"
        "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã Nike, Adidas, Jordan –∏ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
        "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –æ–±–ª–æ–∂–µ–∫\n"
        "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
        "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:"
    )
    
    if is_admin:
        welcome_text += f"\n\nüîê <i>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</i>"
    
    await query.edit_message_text(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def show_help_info(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ HypeBot</b>\n\n"
        "üî• <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ –º–æ–¥—ã\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ —á–µ—Ä–µ–∑ –ò–ò\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
        "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        "üì± <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
        "‚Ä¢ SneakerNews\n"
        "‚Ä¢ Hypebeast\n"
        "‚Ä¢ Highsnobiety\n\n"
        "ü§ñ <b>–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤\n"
        "‚Ä¢ DALL-E 3 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫\n"
        "‚Ä¢ GPT-4 Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        "üè∑ <b>–°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤\n"
        "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π\n"
        "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n"
        "üí¨ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
    ])
    
    await query.edit_message_text(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def show_settings_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    current_channel = state.get("channel", config.TELEGRAM_CHANNEL)
    current_timezone = state.get("timezone", config.DEFAULT_TIMEZONE)
    
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"üì¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <code>{current_channel}</code>\n"
        f"üïê –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {current_timezone}\n"
        f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(pytz.timezone(current_timezone)).strftime('%H:%M')}\n"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="settings_channel")],
        [InlineKeyboardButton("üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É", callback_data="settings_timezone")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
    ])
    
    await query.edit_message_text(
        settings_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def show_timezone_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã"""
    timezones = [
        ("üá∑üá∫ –ú–æ—Å–∫–≤–∞", "Europe/Moscow"),
        ("üá∑üá∫ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "Europe/Moscow"),
        ("üá∑üá∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "Asia/Yekaterinburg"),
        ("üá∑üá∫ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "Asia/Novosibirsk"),
        ("üá∑üá∫ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "Asia/Vladivostok"),
        ("üá∫üá¶ –ö–∏–µ–≤", "Europe/Kiev"),
        ("üá∞üáø –ê–ª–º–∞—Ç—ã", "Asia/Almaty"),
        ("üáßüáæ –ú–∏–Ω—Å–∫", "Europe/Minsk"),
        ("üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫", "America/New_York"),
        ("üá¨üáß –õ–æ–Ω–¥–æ–Ω", "Europe/London"),
    ]
    
    keyboard_buttons = []
    for name, tz in timezones:
        callback_data = f"tz_{tz.replace('/', '_')}"
        keyboard_buttons.append([InlineKeyboardButton(name, callback_data=callback_data)])
    
    keyboard_buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cmd_settings")])
    
    await query.edit_message_text(
        "üïê <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard_buttons)
    )

async def show_stats_info(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        pending_count = len(state["pending"])
        sent_count = len(state["sent_links"])
        scheduled_count = len(state.get("scheduled_posts", {}))
        favorites_count = len(state.get("favorites", []))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
        brand_stats = {}
        for post in state["pending"].values():
            brands = post.get("tags", {}).get("brands", [])
            for brand in brands:
                brand_stats[brand] = brand_stats.get(brand, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        source_stats = {}
        for post in state["pending"].values():
            source = post.get("source", "Unknown")
            source_stats[source] = source_stats.get(source, 0) + 1
        
        stats_text = (
            f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üìù –ü–æ—Å—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}\n"
            f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_count}\n"
            f"‚≠êÔ∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}\n"
            f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {sent_count}\n\n"
        )
        
        if brand_stats:
            stats_text += "üè∑ <b>–ü–æ –±—Ä–µ–Ω–¥–∞–º:</b>\n"
            for brand, count in sorted(brand_stats.items(), key=lambda x: x[1], reverse=True)[:5]:
                stats_text += f"‚Ä¢ {brand.title()}: {count}\n"
            stats_text += "\n"
        
        if source_stats:
            stats_text += "üìç <b>–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</b>\n"
            for source, count in sorted(source_stats.items(), key=lambda x: x[1], reverse=True):
                stats_text += f"‚Ä¢ {source}: {count}\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
        ])
        
        await query.edit_message_text(
            stats_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_stats_info: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_tools_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    tools_text = (
        "üîß <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</b>\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="tool_test_sources")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
    ])
    
    await query.edit_message_text(
        tools_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def show_clean_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏"""
    clean_text = (
        "üßπ <b>–ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üóë –°—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã", callback_data="clean_old")],
        [InlineKeyboardButton("üìù –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤", callback_data="clean_pending")],
        [InlineKeyboardButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ", callback_data="clean_sent")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
    ])
    
    await query.edit_message_text(
        clean_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def start_preview_mode(query, context):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–µ–≤—å—é"""
    try:
        if not state["pending"]:
            await query.edit_message_text("üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–µ–≤—å—é (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ)
        preview_list = sorted(
            state["pending"].keys(),
            key=lambda x: state["pending"][x].get("timestamp", ""),
            reverse=True
        )
        
        state["preview_mode"] = {
            "list": preview_list,
            "current": 0
        }
        save_state()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        first_record = state["pending"].get(preview_list[0])
        if first_record:
            await send_preview(
                context.bot,
                first_record,
                query.message.chat.id,
                0,
                len(preview_list),
                query.message.message_id
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_preview_mode: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–µ–≤—å—é")
        except:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–µ–≤—å—é")

async def show_status_info(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    try:
        pending_count = len(state["pending"])
        sent_count = len(state["sent_links"])
        scheduled_count = len(state.get("scheduled_posts", {}))
        
        # –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        next_scheduled = None
        if state.get("scheduled_posts"):
            next_post = min(
                state["scheduled_posts"].items(),
                key=lambda x: x[1]["time"]
            )
            next_time = datetime.fromisoformat(next_post[1]["time"].replace('Z', '+00:00'))
            local_time = localize_datetime(next_time)
            next_scheduled = f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: {local_time.strftime('%d.%m %H:%M')} ({state.get('timezone', config.DEFAULT_TIMEZONE)})"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ—Å—Ç–∞
        recent_posts = sorted(
            state["pending"].values(),
            key=lambda x: x.get("timestamp", ""),
            reverse=True
        )[:3]
        
        status_text = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
            f"üìù –ü–æ—Å—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}\n"
            f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_count}\n"
            f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {sent_count}\n"
            f"üì¢ –ö–∞–Ω–∞–ª: <code>{state.get('channel', config.TELEGRAM_CHANNEL)}</code>\n"
        )
        
        if next_scheduled:
            status_text += f"\n{next_scheduled}\n"
        
        if recent_posts:
            status_text += "\nüÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:</b>\n"
            for post in recent_posts:
                emoji = "üëü" if post.get("category") == "sneakers" else "üëî"
                date = utils.format_date_for_display(post.get("timestamp", ""))
                status_text += f"{emoji} {date} - {post['title'][:40]}...\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
        ])
        
        await query.edit_message_text(
            status_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_status_info: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_scheduled_posts(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        scheduled = state.get("scheduled_posts", {})
        
        if not scheduled:
            text = "üì≠ <b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</b>"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
            ])
        else:
            text = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n\n"
            keyboard_buttons = []
            
            for post_id, info in sorted(scheduled.items(), key=lambda x: x[1]["time"]):
                scheduled_time = datetime.fromisoformat(info["time"].replace('Z', '+00:00'))
                local_time = localize_datetime(scheduled_time)
                record = info["record"]
                
                text += (
                    f"‚è∞ {local_time.strftime('%d.%m %H:%M')} ({state.get('timezone', config.DEFAULT_TIMEZONE)})\n"
                    f"üìù {record['title'][:50]}...\n"
                    f"üìç {record.get('source', 'Unknown')}\n\n"
                )
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
                keyboard_buttons.append([
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_schedule:{post_id}"),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_schedule:{post_id}")
                ])
            
            keyboard_buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")])
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_scheduled_posts: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_auto_publish_menu(query):
    """–ú–µ–Ω—é –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    is_enabled = state.get("auto_publish", False)
    interval = state.get("publish_interval", 3600) // 60  # –í –º–∏–Ω—É—Ç–∞—Ö
    favorites_count = len(state.get("favorites", []))
    
    text = (
        f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if is_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω—É—Ç\n"
        f"–ü–æ—Å—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}\n\n"
        f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"
    )
    
    keyboard_buttons = [
        [InlineKeyboardButton(
            "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if is_enabled else "üü¢ –í–∫–ª—é—á–∏—Ç—å",
            callback_data="auto_toggle"
        )],
        [
            InlineKeyboardButton("30 –º–∏–Ω", callback_data="auto_interval:1800"),
            InlineKeyboardButton("1 —á–∞—Å", callback_data="auto_interval:3600"),
            InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="auto_interval:7200")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
    ]
    
    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def show_thoughts_prompt(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—ã—Å–ª–µ–π"""
    thoughts_text = (
        "üí≠ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è</b>\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/thoughts –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã</code>\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>/thoughts –Ω–æ–≤—ã–µ Jordan 4 –≤ —á–µ—Ä–Ω–æ–º —Ü–≤–µ—Ç–µ</code>\n\n"
        "üì∏ –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
        "üí° –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –ø–æ—Å—Ç –≤ –ª–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
    ])
    
    await query.edit_message_text(
        thoughts_text,
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def show_filter_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    all_brands = set()
    all_models = set()
    all_types = set()
    
    for post in state["pending"].values():
        tags = post.get("tags", {})
        all_brands.update(tags.get("brands", []))
        all_models.update(tags.get("models", []))
        all_types.update(tags.get("types", []))
    
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –±—Ä–µ–Ω–¥–æ–≤
    if all_brands:
        brand_buttons = []
        for brand in sorted(all_brands)[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            brand_buttons.append(
                InlineKeyboardButton(
                    brand.title(), 
                    callback_data=f"filter_brand:{brand}"
                )
            )
        keyboard_buttons.append(brand_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π
    if all_models:
        model_buttons = []
        for model in sorted(all_models)[:3]:
            model_buttons.append(
                InlineKeyboardButton(
                    model.upper(), 
                    callback_data=f"filter_model:{model}"
                )
            )
        keyboard_buttons.append(model_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤
    if all_types:
        type_buttons = []
        for rtype in sorted(all_types)[:3]:
            type_buttons.append(
                InlineKeyboardButton(
                    rtype.title(), 
                    callback_data=f"filter_type:{rtype}"
                )
            )
        keyboard_buttons.append(type_buttons)
    
    keyboard_buttons.extend([
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filter_reset")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="preview_close")]
    ])
    
    await query.edit_message_text(
        "üè∑ <b>–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard_buttons)
    )

async def filter_posts_by_tag(query, context, tag_type: str, tag_value: str):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–≥—É"""
    filtered_posts = []
    
    for uid, post in state["pending"].items():
        tags = post.get("tags", {})
        if tag_type == "brand" and tag_value in tags.get("brands", []):
            filtered_posts.append(uid)
        elif tag_type == "model" and tag_value in tags.get("models", []):
            filtered_posts.append(uid)
        elif tag_type == "type" and tag_value in tags.get("types", []):
            filtered_posts.append(uid)
    
    if not filtered_posts:
        await query.edit_message_text(f"üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–æ–º {tag_value}")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    filtered_posts.sort(
        key=lambda x: state["pending"][x].get("timestamp", ""),
        reverse=True
    )
    
    state["preview_mode"] = {
        "list": filtered_posts,
        "current": 0,
        "filter": {tag_type: tag_value}
    }
    save_state()
    
    await query.edit_message_text(
        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_posts)} –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–æ–º {tag_value}"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
    first_record = state["pending"].get(filtered_posts[0])
    if first_record:
        await send_preview(
            context.bot,
            first_record,
            query.message.chat.id,
            0,
            len(filtered_posts)
        )

async def test_sources_inline(query, context):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏"""
    try:
        async with httpx.AsyncClient(timeout=30, follow_redirects=True) as client:
            headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}
            
            results = []
            
            for idx, src in enumerate(config.SOURCES):
                try:
                    await query.edit_message_text(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏... ({idx + 1}/{len(config.SOURCES)})\nüìç {src['name']}")
                    
                    resp = await client.get(src["api"], headers=headers, timeout=20)
                    resp.raise_for_status()
                    
                    if src["type"] == "rss":
                        try:
                            soup = BeautifulSoup(resp.text, "xml")
                            items = soup.find_all("item")
                        except:
                            soup = BeautifulSoup(resp.text, "html.parser")
                            items = soup.find_all("item")
                        
                        if not items:
                            items = soup.find_all("entry")
                        
                        count = len(items)
                        first_title = items[0].find("title").get_text(strip=True) if items else "–ù–µ—Ç"
                        
                        results.append(f"‚úÖ {src['name']} ({src.get('category', 'unknown')}):\n"
                                     f"   –ó–∞–ø–∏—Å–µ–π: {count}\n"
                                     f"   –ü–µ—Ä–≤–∞—è: {first_title[:40]}...")
                    else:
                        posts = resp.json()
                        count = len(posts) if isinstance(posts, list) else 0
                        
                        results.append(f"‚úÖ {src['name']} ({src.get('category', 'unknown')}):\n"
                                     f"   –ü–æ—Å—Ç–æ–≤: {count}")
                    
                except Exception as e:
                    results.append(f"‚ùå {src['name']}: {type(e).__name__}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_text = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n" + "\n\n".join(results)
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
            ])
            
            await query.edit_message_text(
                final_text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ test_sources_inline: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def reset_state_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        user_id = update.message.from_user.id
        if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —á–∏—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        global state
        state = {
            "sent_links": [], 
            "pending": {}, 
            "moderation_queue": [], 
            "preview_mode": {}, 
            "thoughts_mode": False,
            "scheduled_posts": {},
            "generated_images": {},
            "waiting_for_image": None,
            "current_thought": None,
            "waiting_for_schedule": None,
            "editing_schedule": None,
            "favorites": [],
            "auto_publish": False,
            "publish_interval": 3600,
            "timezone": config.DEFAULT_TIMEZONE,
            "channel": config.TELEGRAM_CHANNEL,
            "waiting_for_channel": False
        }
        save_state()
        
        await update.message.reply_text(
            "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ!\n\n"
            "–í—Å–µ –ø–æ—Å—Ç—ã –æ—á–∏—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /check –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤."
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reset_state_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")



# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

async def edit_thought_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    state["editing_thought"] = True
    save_state()
    
    thought_data = state.get("current_thought", {})
    current_text = thought_data.get("text", "")
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:300]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def change_thought_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    state["changing_thought_photo"] = True
    save_state()
    
    await query.edit_message_text(
        "üì∑ <b>–ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def edit_post_text_handler(query, context, post_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    record = state["pending"].get(post_id)
    if not record:
        await query.edit_message_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    state["editing_post"] = post_id
    save_state()
    
    current_text = record.get("description", record.get("title", ""))
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:500]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

async def edit_thought_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    state["editing_thought"] = True
    save_state()
    
    thought_data = state.get("current_thought", {})
    current_text = thought_data.get("text", "")
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:300]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def change_thought_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    state["changing_thought_photo"] = True
    save_state()
    
    await query.edit_message_text(
        "üì∑ <b>–ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def edit_post_text_handler(query, context, post_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    record = state["pending"].get(post_id)
    if not record:
        await query.edit_message_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    state["editing_post"] = post_id
    save_state()
    
    current_text = record.get("description", record.get("title", ""))
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:500]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

async def edit_thought_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    state["editing_thought"] = True
    save_state()
    
    thought_data = state.get("current_thought", {})
    current_text = thought_data.get("text", "")
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:300]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def change_thought_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    state["changing_thought_photo"] = True
    save_state()
    
    await query.edit_message_text(
        "üì∑ <b>–ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def edit_post_text_handler(query, context, post_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    record = state["pending"].get(post_id)
    if not record:
        await query.edit_message_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    state["editing_post"] = post_id
    save_state()
    
    current_text = record.get("description", record.get("title", ""))
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:500]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

async def edit_thought_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    state["editing_thought"] = True
    save_state()
    
    thought_data = state.get("current_thought", {})
    current_text = thought_data.get("text", "")
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:300]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def change_thought_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    state["changing_thought_photo"] = True
    save_state()
    
    await query.edit_message_text(
        "üì∑ <b>–ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def edit_post_text_handler(query, context, post_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    record = state["pending"].get(post_id)
    if not record:
        await query.edit_message_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    state["editing_post"] = post_id
    save_state()
    
    current_text = record.get("description", record.get("title", ""))
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:500]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

async def edit_thought_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º—ã—Å–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    state["editing_thought"] = True
    save_state()
    
    thought_data = state.get("current_thought", {})
    current_text = thought_data.get("text", "")
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:300]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def change_thought_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    state["changing_thought_photo"] = True
    save_state()
    
    await query.edit_message_text(
        "üì∑ <b>–ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )


async def edit_post_text_handler(query, context, post_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    record = state["pending"].get(post_id)
    if not record:
        await query.edit_message_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    state["editing_post"] = post_id
    save_state()
    
    current_text = record.get("description", record.get("title", ""))
    
    await query.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n<i>{current_text[:500]}...</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode=ParseMode.HTML
    )
