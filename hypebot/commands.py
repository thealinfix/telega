import logging
import asyncio
from datetime import datetime, timezone, timedelta
import httpx
import re
import pytz
from bs4 import BeautifulSoup
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from . import config, state, utils
from .openai_utils import generate_image, analyze_image
from .messaging import (
    gen_caption,
    build_media_group,
    send_preview,
    send_full_post,
    send_for_moderation,
    publish_release,
)
from .tasks import check_releases_job


async def thoughts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"""
    try:
        user_id = update.message.from_user.id
        if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not context.args:
            await update.message.reply_text(
                "üí≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/thoughts <–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/thoughts –Ω–æ–≤—ã–µ Jordan 4 –≤ —á–µ—Ä–Ω–æ–º —Ü–≤–µ—Ç–µ\n\n"
                "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
        topic = " ".join(context.args)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        state["waiting_for_image"] = {
            "type": "thoughts",
            "topic": topic,
            "message_id": update.message.message_id
        }
        state.save_state()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        msg = await update.message.reply_text(
            "üí≠ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ thoughts_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏")

async def skip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if state.get("waiting_for_image"):
        waiting_data = state["waiting_for_image"]
        state["waiting_for_image"] = None
        state.save_state()
        
        if waiting_data["type"] == "thoughts":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            msg = await update.message.reply_text("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º—ã—Å–ª–∏...")
            
            thought_text = await gen_caption(
                waiting_data["topic"], 
                "", 
                "sneakers", 
                is_thought=True
            )
            
            hashtags = utils.get_hashtags(waiting_data["topic"], "sneakers")
            final_text = f"{thought_text}\n\n{hashtags}"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_thought")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regen_thought")],
                [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="gen_thought_cover")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
            ])
            
            state["current_thought"] = {
                "text": final_text,
                "topic": waiting_data["topic"]
            }
            state.save_state()
            
            await msg.edit_text(
                f"üí≠ <b>–ü–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ:</b>\n\n{final_text}",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        if not state.get("waiting_for_image"):
            return
        
        user_id = update.message.from_user.id
        if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
            return
        
        waiting_data = state["waiting_for_image"]
        state["waiting_for_image"] = None
        state.save_state()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
        file = await context.bot.get_file(photo.file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_bytes = await file.download_as_bytearray()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_description = await analyze_image(bytes(image_bytes))
        
        if waiting_data["type"] == "thoughts":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await msg.edit_text("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º—ã—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            thought_text = await gen_caption(
                waiting_data["topic"], 
                "", 
                "sneakers", 
                is_thought=True,
                image_description=image_description
            )
            
            hashtags = utils.get_hashtags(waiting_data["topic"], "sneakers")
            final_text = f"{thought_text}\n\n{hashtags}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            uploaded_photo = await update.message.photo[-1].get_file()
            photo_url = uploaded_photo.file_path
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_thought")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regen_thought")],
                [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="gen_thought_cover")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_thought")]
            ])
            
            state["current_thought"] = {
                "text": final_text,
                "topic": waiting_data["topic"],
                "image_description": image_description,
                "image_url": photo.file_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            }
            state.save_state()
            
            await msg.edit_text(
                f"üí≠ <b>–ü–æ—Å—Ç-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ:</b>\n\n{final_text}\n\n"
                f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}")
        is_admin = not config.ADMIN_CHAT_ID or update.message.from_user.id == config.ADMIN_CHAT_ID
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard_buttons = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="cmd_status")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="cmd_help")]
        ]
        
        if is_admin:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            keyboard_buttons.extend([
                [
                    InlineKeyboardButton("üëÅ –ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤", callback_data="cmd_preview"),
                    InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–∏–∑—ã", callback_data="cmd_check")
                ],
                [
                    InlineKeyboardButton("üí≠ –°–æ–∑–¥–∞—Ç—å –º—ã—Å–ª–∏", callback_data="cmd_thoughts"),
                    InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="cmd_scheduled")
                ],
                [
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cmd_stats"),
                    InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è", callback_data="cmd_auto_menu")
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="cmd_settings"),
                    InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="cmd_clean_menu")
                ],
                [
                    InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="cmd_tools_menu")
                ]
            ])
        
        keyboard = InlineKeyboardMarkup(keyboard_buttons)
        
        welcome_text = (
            "üëü <b>HypeBot</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ —É–ª–∏—á–Ω–æ–π –º–æ–¥—ã\n\n"
            "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã Nike, Adidas, Jordan –∏ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –æ–±–ª–æ–∂–µ–∫\n"
            "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:"
        )
        
        if is_admin:
            welcome_text += f"\n\nüîê <i>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</i>"
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.message.from_user.id
        if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
            return
        
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        if state.get("waiting_for_channel"):
            # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            new_channel = text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
            if new_channel.startswith("@") or (new_channel.lstrip("-").isdigit() and len(new_channel) > 5):
                state["channel"] = new_channel
                state["waiting_for_channel"] = False
                state.save_state()
                
                await update.message.reply_text(
                    f"‚úÖ –ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{new_channel}</code>\n\n"
                    f"–í—Å–µ –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ <code>@channelname</code> –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
                    "‚Ä¢ <code>-1001234567890</code> –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
                    parse_mode=ParseMode.HTML
                )
        
        elif state.get("waiting_for_schedule"):
            # –û–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scheduled_time = utils.parse_schedule_time(text)
            if scheduled_time:
                post_id = state["waiting_for_schedule"]
                record = state["pending"].get(post_id)
                
                if record:
                    state["scheduled_posts"][post_id] = {
                        "time": scheduled_time.isoformat(),
                        "record": record
                    }
                    
                    state["waiting_for_schedule"] = None
                    state.save_state()
                    
                    local_time = state.localize_datetime(scheduled_time)
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {local_time.strftime('%d.%m.%Y %H:%M')} ({state.get('timezone', config.DEFAULT_TIMEZONE)})\n"
                        f"üìù {record['title'][:50]}..."
                    )
                else:
                    await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ <code>18:30</code>\n"
                    "‚Ä¢ <code>25.12 15:00</code>\n"
                    "‚Ä¢ <code>+2h</code>",
                    parse_mode=ParseMode.HTML
                )
        
        elif state.get("editing_schedule"):
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scheduled_time = utils.parse_schedule_time(text)
            if scheduled_time:
                post_id = state["editing_schedule"]
                
                if post_id in state.get("scheduled_posts", {}):
                    state["scheduled_posts"][post_id]["time"] = scheduled_time.isoformat()
                    state["editing_schedule"] = None
                    state.save_state()
                    
                    local_time = state.localize_datetime(scheduled_time)
                    await update.message.reply_text(
                        f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {local_time.strftime('%d.%m.%Y %H:%M')} ({state.get('timezone', config.DEFAULT_TIMEZONE)})"
                    )
                else:
                    await update.message.reply_text("‚ùå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        elif state.get("waiting_for_prompt"):
            # –û–∂–∏–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            uid = state["waiting_for_prompt"]
            record = state["pending"].get(uid)
            
            if record:
                await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º...")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = await generate_image(text, "creative")
                
                if image_url:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if uid not in state["generated_images"]:
                        state["generated_images"][uid] = []
                    
                    state["generated_images"][uid].append(image_url)
                    state["waiting_for_prompt"] = None
                    state.save_state()
                    
                    await update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
                    await send_for_moderation(context.bot, record)
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        elif state.get("auto_interval_custom"):
            # –û–∂–∏–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            try:
                minutes = int(text)
                if 10 <= minutes <= 1440:  # –û—Ç 10 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤
                    state["publish_interval"] = minutes * 60
                    state["auto_interval_custom"] = False
                    state.save_state()
                    await update.message.reply_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {minutes} –º–∏–Ω—É—Ç")
                else:
                    await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 1440 –º–∏–Ω—É—Ç")
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = update.message.from_user.id
    if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
        return

    cancelled = []

    if state.get("waiting_for_schedule"):
        state["waiting_for_schedule"] = None
        cancelled.append("–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")

    if state.get("editing_schedule"):
        state["editing_schedule"] = None
        cancelled.append("–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

    if state.get("waiting_for_image"):
        state["waiting_for_image"] = None
        cancelled.append("–æ–∂–∏–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    if state.get("waiting_for_prompt"):
        state["waiting_for_prompt"] = None
        cancelled.append("–æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")

    if state.get("auto_interval_custom"):
        state["auto_interval_custom"] = False
        cancelled.append("—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")

    if state.get("waiting_for_channel"):
        state["waiting_for_channel"] = False
        cancelled.append("–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")

    state.save_state()

    if cancelled:
        await update.message.reply_text(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {', '.join(cancelled)}")
    else:
        await update.message.reply_text("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å")

async def reset_state_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        user_id = update.message.from_user.id
        if config.ADMIN_CHAT_ID and user_id != config.ADMIN_CHAT_ID:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —á–∏—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        global state
        state = {
            "sent_links": [], 
            "pending": {}, 
            "moderation_queue": [], 
            "preview_mode": {}, 
            "thoughts_mode": False,
            "scheduled_posts": {},
            "generated_images": {},
            "waiting_for_image": None,
            "current_thought": None,
            "waiting_for_schedule": None,
            "editing_schedule": None,
            "favorites": [],
            "auto_publish": False,
            "publish_interval": 3600,
            "timezone": config.DEFAULT_TIMEZONE,
            "channel": config.TELEGRAM_CHANNEL,
            "waiting_for_channel": False
        }
        state.save_state()
        
        await update.message.reply_text(
            "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ!\n\n"
            "–í—Å–µ –ø–æ—Å—Ç—ã –æ—á–∏—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /check –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤."
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reset_state_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

