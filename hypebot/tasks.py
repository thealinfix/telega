import logging
from datetime import datetime, timezone
import httpx
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from . import config, utils, fetcher
from .state import state, save_state
from .messaging import publish_release


async def check_releases_job(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω
        if not config.ADMIN_CHAT_ID:
            logging.warning("config.ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        progress_msg = await bot.send_message(
            config.ADMIN_CHAT_ID,
            "üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...",
            parse_mode=ParseMode.HTML
        )
        
        # –ò—â–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        logging.info("–ò—â—É –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã...")
        async with httpx.AsyncClient(timeout=30, follow_redirects=True) as client:
            new_releases = await fetcher.fetch_releases(client, progress_msg, bot)
        
        if not new_releases:
            await bot.edit_message_text(
                "üì≠ –ù–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                progress_msg.chat.id,
                progress_msg.message_id
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –≤ pending
        added_count = 0
        for rel in new_releases:
            try:
                if rel["id"] not in state["pending"]:
                    state["pending"][rel["id"]] = rel
                    added_count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞: {e}")
                continue
        
        if added_count > 0:
            save_state()
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–∞–º
            posts_by_date = {}
            for post in state["pending"].values():
                date_str = utils.format_date_for_display(post.get("timestamp", ""))
                if date_str not in posts_by_date:
                    posts_by_date[date_str] = []
                posts_by_date[date_str].append(post)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            summary = f"üÜï –ù–∞–π–¥–µ–Ω–æ <b>{added_count}</b> –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤!\n\n"
            
            for date, posts in sorted(posts_by_date.items()):
                summary += f"üìÖ <b>{date}</b> ({len(posts)} –ø–æ—Å—Ç–æ–≤)\n"
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                by_source = {}
                for post in posts:
                    src = post.get("source", "Unknown")
                    if src not in by_source:
                        by_source[src] = 0
                    by_source[src] += 1
                
                for src, count in by_source.items():
                    summary += f"  ‚Ä¢ {src}: {count}\n"
                summary += "\n"
            
            summary += f"üìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(state['pending'])}\n\n"
            summary += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /preview –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
            
            await bot.edit_message_text(
                summary,
                progress_msg.chat.id,
                progress_msg.message_id,
                parse_mode=ParseMode.HTML
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        await check_scheduled_posts(bot)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—é
        if state.get("auto_publish"):
            await auto_publish_next(bot)
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_releases_job: {e}")

async def check_scheduled_posts(bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    now = datetime.now(timezone.utc)
    published = []
    
    for post_id, schedule_info in list(state.get("scheduled_posts", {}).items()):
        try:
            scheduled_time = datetime.fromisoformat(schedule_info["time"].replace('Z', '+00:00'))
            if now >= scheduled_time:
                # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
                record = schedule_info["record"]
                success = await publish_release(bot, record)
                
                if success:
                    published.append(post_id)
                    logging.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: {record['title'][:50]}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    if config.ADMIN_CHAT_ID:
                        await bot.send_message(
                            config.ADMIN_CHAT_ID,
                            f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:\n{record['title'][:50]}...",
                            parse_mode=ParseMode.HTML
                        )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ {post_id}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    for post_id in published:
        state["scheduled_posts"].pop(post_id, None)
        # –£–¥–∞–ª—è–µ–º –∏–∑ pending
        state["pending"].pop(post_id, None)
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
        record = state["scheduled_posts"].get(post_id, {}).get("record", {})
        if record.get("link"):
            state["sent_links"].append(record["link"])
    
    if published:
        save_state()

async def auto_publish_next(bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    if not state.get("auto_publish"):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    last_publish = state.get("last_auto_publish")
    if last_publish:
        last_time = datetime.fromisoformat(last_publish.replace('Z', '+00:00'))
        interval = state.get("publish_interval", 3600)
        if (datetime.now(timezone.utc) - last_time).seconds < interval:
            return
    
    # –ò—â–µ–º –ø–æ—Å—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    favorites = state.get("favorites", [])
    for fav_id in favorites:
        if fav_id in state["pending"]:
            record = state["pending"][fav_id]
            success = await publish_release(bot, record)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state["last_auto_publish"] = datetime.now(timezone.utc).isoformat()
                state["favorites"].remove(fav_id)
                state["pending"].pop(fav_id, None)
                state["sent_links"].append(record["link"])
                save_state()
                
                if config.ADMIN_CHAT_ID:
                    await bot.send_message(
                        config.ADMIN_CHAT_ID,
                        f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:\n{record['title'][:50]}...",
                        parse_mode=ParseMode.HTML
                    )
                break

