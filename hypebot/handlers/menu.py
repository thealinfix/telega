"""
Menu handlers
"""
import logging
from datetime import datetime
from typing import Optional

# Common button text constants
BACK_TO_MENU_TEXT = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"

import pytz
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from .base import BaseHandler
from ..config.constants import AVAILABLE_TIMEZONES
from ..utils.validators import is_admin
from ..utils.formatters import format_stats_text, format_scheduled_post_info
from ..utils.time_utils import format_local_time, localize_datetime
from ..utils.decorators import log_errors, answer_callback_query


class MenuHandler(BaseHandler):
    
    @log_errors
    @answer_callback_query
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help information"""
        help_text = (
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ HypeBot</b>\n\n"
            "üî• <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ –º–æ–¥—ã\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ —á–µ—Ä–µ–∑ –ò–ò\n"
            "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
            "üì± <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
            "‚Ä¢ SneakerNews\n"
            "‚Ä¢ Hypebeast\n"
            "‚Ä¢ Highsnobiety\n\n"
            "ü§ñ <b>–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤\n"
            "‚Ä¢ DALL-E 3 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫\n"
            "‚Ä¢ GPT-4 Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
            "üè∑ <b>–°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤:</b>\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n"
            "üí¨ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞"
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")]
        ])
        
        await update.callback_query.edit_message_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    @log_errors
    @answer_callback_query
    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show bot status"""
        stats = self.state_manager.get_stats()
        
        # Next scheduled post
        next_scheduled = None
        if self.state.scheduled_posts:
            next_post = min(
                self.state.scheduled_posts.items(),
                key=lambda x: x[1].time
            )
            next_time = datetime.fromisoformat(next_post[1].time.replace('Z', '+00:00'))
            local_time = localize_datetime(next_time, self.state.timezone)
            next_scheduled = f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: {local_time.strftime('%d.%m %H:%M')} ({self.state.timezone})"
        
        # Recent posts
        recent_posts = sorted(
            self.state.pending.values(),
            key=lambda x: x.timestamp,
            reverse=True
        )[:3]
        
        status_text = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
            f"üìù –ü–æ—Å—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending_count']}\n"
            f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats['scheduled_count']}\n"
            f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {stats['sent_count']}\n"
            f"üì¢ –ö–∞–Ω–∞–ª: <code>{self.state.channel}</code>\n"
        )
        
        if next_scheduled:
            status_text += f"\n{next_scheduled}\n"
        
        if recent_posts:
            status_text += "\nüÜï <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:</b>\n"
            for post in recent_posts:
                from ..utils.time_utils import format_date_for_display
                emoji = "üëü" if post.category == "sneakers" else "üëî"
                date = format_date_for_display(post.timestamp, self.state.timezone)
                status_text += f"{emoji} {date} - {post.title[:40]}...\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")]
        ])
        
        await update.callback_query.edit_message_text(
            status_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    @log_errors
    @answer_callback_query
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show statistics"""
        stats = self.state_manager.get_stats()
        
        stats_text = format_stats_text(
            stats['pending_count'],
            stats['sent_count'],
            stats['scheduled_count'],
            stats['favorites_count'],
            stats['brand_stats'],
            stats['source_stats']
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")]
        ])
        
        await update.callback_query.edit_message_text(
            stats_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    @log_errors
    @answer_callback_query
    async def show_scheduled_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show scheduled posts"""
        scheduled = self.state.scheduled_posts
        
        if not scheduled:
            text = "üì≠ <b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</b>"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")]
            ])
        else:
            text = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n\n"
            keyboard_buttons = []
            
            for post_id, sched_post in sorted(scheduled.items(), key=lambda x: x[1].time):
                scheduled_time = sched_post.get_datetime()
                local_time = localize_datetime(scheduled_time, self.state.timezone)
                
                text += format_scheduled_post_info(
                    local_time.strftime('%d.%m %H:%M'),
                    sched_post.record.title,
                    sched_post.record.source
                )
                
                # Buttons for each post
                keyboard_buttons.append([
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_schedule:{post_id}"),
            keyboard_buttons.append([InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")])
                ])
            
            keyboard_buttons.append([InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")])
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
        
        await update.callback_query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    @log_errors
    @answer_callback_query
    async def show_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show settings menu"""
        current_channel = self.state.channel
        current_timezone = self.state.timezone
        
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <code>{current_channel}</code>\n"
            f"üïê –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {current_timezone}\n"
            f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(pytz.timezone(current_timezone)).strftime('%H:%M')}\n"
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="settings_channel")],
            [InlineKeyboardButton("üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É", callback_data="settings_timezone")],
            [InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")]
        ])
        
        await update.callback_query.edit_message_text(
            settings_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    @log_errors
    @answer_callback_query
    async def show_timezone_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show timezone selection menu"""
        keyboard_buttons = []
        for name, tz in AVAILABLE_TIMEZONES:
            callback_data = f"tz_{tz.replace('/', '_')}"
            keyboard_buttons.append([InlineKeyboardButton(name, callback_data=callback_data)])
        
        keyboard_buttons.append([InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_settings")])
        
        await update.callback_query.edit_message_text(
            "üïê <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É:</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard_buttons)
        )
    
    @log_errors
    @answer_callback_query
    async def show_auto_publish_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show auto-publish menu"""
        is_enabled = self.state.auto_publish
        interval = self.state.publish_interval // 60  # In minutes
        favorites_count = len(self.state.favorites)
        
        text = (
            f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if is_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω—É—Ç\n"
            f"–ü–æ—Å—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}\n\n"
            f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"
        )
        
        keyboard_buttons = [
            [InlineKeyboardButton(
                "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if is_enabled else "üü¢ –í–∫–ª—é—á–∏—Ç—å",
                callback_data="auto_toggle"
            )],
            [
                InlineKeyboardButton("30 –º–∏–Ω", callback_data="auto_interval:1800"),
                InlineKeyboardButton("1 —á–∞—Å", callback_data="auto_interval:3600"),
                InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="auto_interval:7200")
            ],
            [InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")]
        ]
        
        keyboard = InlineKeyboardMarkup(keyboard_buttons)
        
        await update.callback_query.edit_message_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    @log_errors
    @answer_callback_query
    async def show_clean_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show clean menu"""
        clean_text = (
            "üßπ <b>–ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å:"
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üóë –°—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã", callback_data="clean_old")],
            [InlineKeyboardButton("üìù –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤", callback_data="clean_pending")],
            [InlineKeyboardButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ", callback_data="clean_sent")],
            [InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")]
        ])
        
        await update.callback_query.edit_message_text(
            clean_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    @log_errors
    @answer_callback_query
    async def show_tools_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show tools menu"""
        tools_text = (
            "üîß <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</b>\n\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîç –¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="tool_test_sources")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd_back_main")]
        ])
        
        await update.callback_query.edit_message_text(
            tools_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    @log_errors
    @answer_callback_query
    async def show_thoughts_prompt(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show thoughts creation prompt"""
        thoughts_text = (
            "üí≠ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/thoughts –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã</code>\n\n"
            "üìù <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/thoughts –Ω–æ–≤—ã–µ Jordan 4 –≤ —á–µ—Ä–Ω–æ–º —Ü–≤–µ—Ç–µ</code>\n\n"
            "üì∏ –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
            "üí° –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –ø–æ—Å—Ç –≤ –ª–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏"
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(BACK_TO_MENU_TEXT, callback_data="cmd_back_main")]
        ])
        
        await update.callback_query.edit_message_text(
            thoughts_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )


def create_moderation_keyboard(post_id: str) -> InlineKeyboardMarkup:
    """Create moderation keyboard for post"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve:{post_id}")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"regen:{post_id}")],
        [
            InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data=f"gen_cover_full:{post_id}"),
            InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç", callback_data=f"custom_prompt:{post_id}")
        ],
        [
            InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data=f"revert_img:{post_id}"),
            InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"reject:{post_id}")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–≤—å—é", callback_data=f"back_preview:{post_id}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="cmd_back_main")
        ]
    ])

class MenuHandler(BaseHandler):
    # ... (other methods remain unchanged)

    @log_errors
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show main menu"""
        # Determine if message or callback
        if update.message:
            user_id = update.message.from_user.id
            reply_func = update.message.reply_text
        else:
            user_id = update.callback_query.from_user.id
            reply_func = update.callback_query.edit_message_text

        is_admin_user = is_admin(user_id, self.admin_id)

        # Base buttons for all users
        keyboard_buttons = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", callback_data="cmd_status")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="cmd_help")]
        ]

        if is_admin_user:
            # Admin buttons
            keyboard_buttons.extend([
                [
                    InlineKeyboardButton("üëÅ –ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–æ–≤", callback_data="cmd_preview"),
                    InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ª–∏–∑—ã", callback_data="cmd_check")
                ],
                [
                    InlineKeyboardButton("üí≠ –°–æ–∑–¥–∞—Ç—å –º—ã—Å–ª–∏", callback_data="cmd_thoughts"),
                    InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="cmd_scheduled")
                ],
                [
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cmd_stats"),
                    InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è", callback_data="cmd_auto_menu")
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="cmd_settings"),
                    InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="cmd_clean_menu")
                ],
                [
                    InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="cmd_tools_menu")
                ]
            ])

        keyboard = InlineKeyboardMarkup(keyboard_buttons)

        welcome_text = (
            "üëü <b>HypeBot</b> - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ª–∏–∑–æ–≤ –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ —É–ª–∏—á–Ω–æ–π –º–æ–¥—ã\n\n"
            "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã Nike, Adidas, Jordan –∏ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤\n"
            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –æ–±–ª–æ–∂–µ–∫\n"
            "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:"
        )

        if is_admin_user:
            welcome_text += "\n\nüîê <i>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</i>"

        await reply_func(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )