import asyncio
import random
import openai
from telethon import TelegramClient
from telethon.tl.functions.messages import SendReactionRequest, ReadHistoryRequest, SetTypingRequest
from telethon.tl.functions.channels import ReadMessageContentsRequest
from telethon.tl.types import ReactionEmoji, SendMessageTypingAction, SendMessageCancelAction
from telethon.tl.functions.account import UpdateStatusRequest
from datetime import datetime, timedelta
import json
import os
import time
import re
import sys
from smart_bot_coordinator import SmartBotCoordinator, should_comment_smart
from typing import Dict, List, Tuple
bot_coordinator = SmartBotCoordinator()
def load_bots_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–æ–≤"""
    try:
        with open('bots_config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª bots_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

def select_bot():
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    config = load_bots_config()
    if not config:
        return None
    
    bots = config['bots']
    
    print("\nü§ñ –í–´–ë–û–† –ë–û–¢–ê –î–õ–Ø –ó–ê–ü–£–°–ö–ê")
    print("=" * 40)
    
    for i, bot in enumerate(bots, 1):
        status_emoji = "üü¢" if bot['status'] == "active" else "‚ö´"
        proxy_info = f"{bot['proxy'][1]}:{bot['proxy'][2]}" if bot.get('proxy') else "–ë–µ–∑ –ø—Ä–æ–∫—Å–∏"
        print(f"{i}. {bot['name']} ({bot['phone']})")
        print(f"   –°—Ç–∞—Ç—É—Å: {status_emoji} {bot['status']}")
        print(f"   –ü—Ä–æ–∫—Å–∏: {proxy_info}")
        print(f"   –†–æ–ª—å: {bot['role']}")
        print()
    
    try:
        choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±–æ—Ç–∞ (0 –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ): "))
        
        if choice == 0:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            return None
        elif 1 <= choice <= len(bots):
            selected_bot = bots[choice - 1]
            print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω –±–æ—Ç: {selected_bot['name']}")
            return selected_bot
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return None
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return None

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
if __name__ == "__main__":
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç–∞
    selected_bot = select_bot()
    
    if selected_bot:
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        api_id = selected_bot['api_id']
        api_hash = selected_bot['api_hash']
        session_file = selected_bot['session_file']
        
        # –ü—Ä–æ–∫—Å–∏ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∫–æ—Ä—Ç–µ–∂
        if selected_bot.get('proxy'):
            proxy = tuple(selected_bot['proxy'])
        else:
            proxy = None
        
        print(f"\nüì± –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
        print(f"   –°–µ—Å—Å–∏—è: {session_file}")
        print(f"   API ID: {api_id}")
        if proxy:
            print(f"   –ü—Ä–æ–∫—Å–∏: {proxy[1]}:{proxy[2]}")
    else:
        print("\nüì± –ó–∞–ø—É—Å–∫ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        # –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª–∞
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(enhanced_main())
if "--stats" in sys.argv:
    asyncio.run(show_coordination_stats())
else:
    asyncio.run(enhanced_main())
class ContentAnalyzer:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—Ä–µ–Ω–¥–æ–≤
        self.brands = {
            "nike": ["nike", "air max", "air force", "dunk", "blazer", "jordan", "aj1", "aj4"],
            "adidas": ["adidas", "yeezy", "boost", "ultraboost", "nmd", "gazelle"],
            "new_balance": ["new balance", "nb", "990", "991", "992", "2002r"],
            "puma": ["puma", "suede", "clyde"],
            "vans": ["vans", "old skool", "sk8-hi"],
            "converse": ["converse", "chuck taylor", "all star"]
        }
        
        # –ú–æ–¥–µ–ª–∏ –∏ —Ç–∏–ø—ã –æ–±—É–≤–∏
        self.shoe_models = {
            "retro": ["retro", "og", "vintage", "classic"],
            "running": ["running", "runner", "marathon", "sport"],
            "lifestyle": ["lifestyle", "casual", "street"],
            "collab": ["collab", "collaboration", "x ", " x "],
            "limited": ["limited", "exclusive", "rare", "drop"]
        }
        
        # –¶–≤–µ—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        self.colors = {
            "black": ["black", "—á–µ—Ä–Ω—ã–π", "—á—ë—Ä–Ω—ã–π", "noir", "—á–µ—Ä–Ω"],
            "white": ["white", "–±–µ–ª—ã–π", "blanc", "–±–µ–ª"],
            "red": ["red", "–∫—Ä–∞—Å–Ω—ã–π", "rouge", "–∫—Ä–∞—Å–Ω"],
            "blue": ["blue", "—Å–∏–Ω–∏–π", "–≥–æ–ª—É–±–æ–π", "bleu", "—Å–∏–Ω", "—Å–∞–ø—Ñ–∏—Ä"],
            "green": ["green", "–∑–µ–ª–µ–Ω—ã–π", "–∑–µ–ª—ë–Ω—ã–π", "vert", "–∑–µ–ª–µ–Ω"],
            "grey": ["grey", "gray", "—Å–µ—Ä—ã–π", "gris", "—Å–µ—Ä"],
            "yellow": ["yellow", "–∂–µ–ª—Ç—ã–π", "–∂—ë–ª—Ç—ã–π", "–∂–µ–ª—Ç", "–∫–∏–±–µ—Ä-–∂–µ–ª—Ç"],
            "purple": ["purple", "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–ø—É—Ä–ø—É—Ä–Ω—ã–π", "—Ñ–∏–æ–ª–µ—Ç"],
            "orange": ["orange", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", "–æ—Ä–∞–Ω–∂"],
            "pink": ["pink", "—Ä–æ–∑–æ–≤—ã–π", "—Ä–æ–∑"],
            "brown": ["brown", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "–∫–æ—Ä–∏—á–Ω"],
            "multicolor": ["multicolor", "—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–π", "–º—É–ª—å—Ç–∏", "—Ä–∞–¥—É–≥–∞"]
        }
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
        self.materials = {
            "leather": ["leather", "–∫–æ–∂–∞", "–∑–∞–º—à–∞", "suede", "–Ω—É–±—É–∫", "nubuck"],
            "mesh": ["mesh", "—Å–µ—Ç–∫–∞", "—Ç–µ–∫—Å—Ç–∏–ª—å", "fabric"],
            "canvas": ["canvas", "—Ö–æ–ª—Å—Ç", "—Ç–∫–∞–Ω—å"],
            "synthetic": ["synthetic", "—Å–∏–Ω—Ç–µ—Ç–∏–∫–∞", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π"]
        }
        
        # –¶–µ–Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.price_indicators = {
            "expensive": ["–¥–æ—Ä–æ–≥–æ", "expensive", "–æ–≤erprice", "–¥–æ—Ä–æ–≥–æ–≤–∞—Ç–æ"],
            "cheap": ["–¥–µ—à–µ–≤–æ", "cheap", "–±—é–¥–∂–µ—Ç", "–Ω–µ–¥–æ—Ä–æ–≥–æ"],
            "sale": ["sale", "—Å–∫–∏–¥–∫–∞", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "discount", "%"]
        }

    def analyze_post(self, text: str, has_image: bool = False) -> Dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞"""
        text_lower = text.lower() if text else ""
        
        analysis = {
            "brands": self._extract_brands(text_lower),
            "models": self._extract_models(text_lower),
            "colors": self._extract_colors(text_lower),
            "materials": self._extract_materials(text_lower),
            "price_context": self._extract_price_context(text_lower),
            "sentiment": self._analyze_sentiment(text_lower),
            "has_question": "?" in text if text else False,
            "has_price": self._has_price(text_lower),
            "release_type": self._get_release_type(text_lower),
            "is_news": self._is_news(text_lower),
            "has_image": has_image,
            "text_length": len(text) if text else 0,
            "main_topic": self._get_main_topic(text_lower),
            "is_album": False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ –µ—Å–ª–∏ grouped_id
        }
        
        return analysis

    def _extract_brands(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º—è–Ω—É—Ç—ã–µ –±—Ä–µ–Ω–¥—ã"""
        found_brands = []
        for brand, keywords in self.brands.items():
            if any(keyword in text for keyword in keywords):
                found_brands.append(brand)
        return found_brands

    def _extract_models(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏"""
        found_models = []
        for model_type, keywords in self.shoe_models.items():
            if any(keyword in text for keyword in keywords):
                found_models.append(model_type)
        return found_models

    def _extract_colors(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–≤–µ—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        found_colors = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ
        words = text.lower().split()
        
        for color, keywords in self.colors.items():
            for keyword in keywords:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
                if keyword in words:
                    if color not in found_colors:
                        found_colors.append(color)
                    break
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å–∞–ø—Ñ–∏—Ä–æ–≤–æ-—á–µ—Ä–Ω—ã–µ")
                for word in words:
                    if keyword in word and len(keyword) > 3:  # –ù–µ –∏—â–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
                        if color not in found_colors:
                            found_colors.append(color)
                        break
        
        return found_colors

    def _extract_materials(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
        found_materials = []
        for material, keywords in self.materials.items():
            if any(keyword in text for keyword in keywords):
                found_materials.append(material)
        return found_materials

    def _extract_price_context(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–Ω–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        for category, keywords in self.price_indicators.items():
            if any(keyword in text for keyword in keywords):
                return category
        return "unknown"

    def _has_price(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã"""
        price_patterns = [
            r'\d+\s*(?:—Ä—É–±|rub|‚ÇΩ|\$|usd|eur|‚Ç¨)',
            r'(?:—Ä—É–±|rub|‚ÇΩ|\$|usd|eur|‚Ç¨)\s*\d+',
            r'\d{3,}\s*(?:—Ä|r)',
            r'\d+k\s*(?:—Ä—É–±|rub)?'
        ]
        return any(re.search(pattern, text) for pattern in price_patterns)

    def _get_release_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–µ–ª–∏–∑–∞"""
        if any(word in text for word in ["collab", "collaboration", "x ", " x "]):
            return "collaboration"
        elif any(word in text for word in ["limited", "exclusive", "rare"]):
            return "limited"
        elif any(word in text for word in ["retro", "og", "vintage"]):
            return "retro"
        else:
            return "general"

    def _is_news(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –Ω–æ–≤–æ—Å—Ç—å—é"""
        news_indicators = ["drop", "release", "–≤—ã—Ö–æ–¥", "—Ä–µ–ª–∏–∑", "–ø–æ—è–≤–∏—Ç—Å—è", "—Å–∫–æ—Ä–æ", "soon", "coming", "new"]
        return any(indicator in text for indicator in news_indicators)

    def _get_main_topic(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞"""
        if self._extract_price_context(text) == "sale":
            return "sale"
        elif any(word in text for word in ["collab", "collaboration", "x ", " x "]):
            return "collaboration"
        elif self._is_news(text):
            return "news"
        elif self._has_price(text):
            return "price"
        else:
            return "general"

    def _analyze_sentiment(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        positive_words = ["–∫—Ä—É—Ç–æ–π", "–∫–ª–∞—Å—Å–Ω—ã–π", "–æ—Ç–ª–∏—á–Ω—ã–π", "–ª—É—á—à–∏–π", "—Ç–æ–ø", "fire", "amazing", "great", "best", "perfect", "üî•", "‚ù§Ô∏è", "üòç"]
        negative_words = ["–ø–ª–æ—Ö–æ–π", "—É–∂–∞—Å–Ω—ã–π", "–¥–æ—Ä–æ–≥–æ", "–æ–≤erprice", "–Ω–µ —Å—Ç–æ–∏—Ç", "bad", "terrible", "expensive", "waste"]
        
        positive_count = sum(1 for word in positive_words if word in text)
        negative_count = sum(1 for word in negative_words if word in text)
        
        if positive_count > negative_count:
            return "positive"
        elif negative_count > positive_count:
            return "negative"
        else:
            return "neutral"
# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
POPULAR_CHANNELS = [
    "durov",           # –ü–∞–≤–µ–ª –î—É—Ä–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è)
    "tginfo",          # Telegram Info
    "telegram",        # Telegram News
    "breakingmash",    # Mash
    "meduzalive",      # –ú–µ–¥—É–∑–∞
    "rian_ru",         # –†–ò–ê –ù–æ–≤–æ—Å—Ç–∏
    "rt_russian",      # RT –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    "tass_agency",     # –¢–ê–°–°
    "rbc_news"         # –†–ë–ö
]

# 2. –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ _analyze_sentiment –≤ –∫–ª–∞—Å—Å ContentAnalyzer:
# (–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ ContentAnalyzer)
def analyze_post(self, text: str, has_image: bool = False) -> Dict:
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞"""
    text_lower = text.lower() if text else ""
    
    analysis = {
        "brands": self._extract_brands(text_lower),
        "models": self._extract_models(text_lower),
        "colors": self._extract_colors(text_lower),
        "materials": self._extract_materials(text_lower),
        "price_context": self._extract_price_context(text_lower),
        "sentiment": self._analyze_sentiment(text_lower),
        "has_question": "?" in text,
        "has_price": self._has_price(text_lower),
        "release_type": self._get_release_type(text_lower),
        "is_news": self._is_news(text_lower),
        "has_image": has_image,
        "text_length": len(text),
        "main_topic": self._get_main_topic(text_lower)
    }
    
    return analysis

    def _extract_brands(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º—è–Ω—É—Ç—ã–µ –±—Ä–µ–Ω–¥—ã"""
        found_brands = []
        for brand, keywords in self.brands.items():
            if any(keyword in text for keyword in keywords):
                found_brands.append(brand)
        return found_brands

    def _extract_models(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏"""
        found_models = []
        for model_type, keywords in self.shoe_models.items():
            if any(keyword in text for keyword in keywords):
                found_models.append(model_type)
        return found_models

    def _extract_colors(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–≤–µ—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        found_colors = []

        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ
        words = text.lower().split()

        for color, keywords in self.colors.items():
            for keyword in keywords:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
                if keyword in words:
                    if color not in found_colors:
                        found_colors.append(color)
                    break
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å–∞–ø—Ñ–∏—Ä–æ–≤–æ-—á–µ—Ä–Ω—ã–µ")
                for word in words:
                    if keyword in word and len(keyword) > 3:  # –ù–µ –∏—â–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
                        if color not in found_colors:
                            found_colors.append(color)
                        break

        return found_colors

    def _extract_materials(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
        found_materials = []
        for material, keywords in self.materials.items():
            if any(keyword in text for keyword in keywords):
                found_materials.append(material)
        return found_materials

    def _extract_price_context(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–Ω–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        for category, keywords in self.price_indicators.items():
            if any(keyword in text for keyword in keywords):
                return category
        return "unknown"

    def _has_price(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã"""
        price_patterns = [
            r'\d+\s*(?:—Ä—É–±|rub|‚ÇΩ|\$|usd|eur|‚Ç¨)',
            r'(?:—Ä—É–±|rub|‚ÇΩ|\$|usd|eur|‚Ç¨)\s*\d+',
            r'\d{3,}\s*(?:—Ä|r)',
            r'\d+k\s*(?:—Ä—É–±|rub)?'
        ]
        return any(re.search(pattern, text) for pattern in price_patterns)

    def _get_release_type(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–µ–ª–∏–∑–∞"""
        if any(word in text for word in ["new", "–Ω–æ–≤—ã–π", "–Ω–æ–≤–∞—è", "–Ω–æ–≤—ã–µ", "–∞–Ω–æ–Ω—Å"]):
            return "new_release"
        elif any(word in text for word in ["restock", "—Ä–µ—Å—Ç–æ–∫–µ", "–≤–µ—Ä–Ω—É–ª–∏—Å—å"]):
            return "restock"
        elif any(word in text for word in ["soon", "—Å–∫–æ—Ä–æ", "coming", "–≥—Ä—è–¥–µ—Ç"]):
            return "upcoming"
        elif any(word in text for word in ["drop", "–¥—Ä–æ–ø", "—Ä–µ–ª–∏–∑"]):
            return "drop"
        return "general"

    def _is_news(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –Ω–æ–≤–æ—Å—Ç—å—é"""
        news_indicators = [
            "announced", "–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏", "–ø–æ–∫–∞–∑–∞–ª–∏",
            "leaked", "—Å–ª–∏–ª–∏", "—É—Ç–µ—á–∫–∞", "–ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥",
            "official", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏"
        ]
        return any(indicator in text for indicator in news_indicators)

    def _get_main_topic(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –ø–æ—Å—Ç–∞"""
        if any(word in text for word in ["collab", "collaboration", "–∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è", " x "]):
            return "collaboration"
        elif any(word in text for word in ["retro", "og", "–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ", "–∫–ª–∞—Å—Å–∏–∫–∞"]):
            return "retro"
        elif any(word in text for word in ["sale", "—Å–∫–∏–¥–∫–∞", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞"]):
            return "sale"
        elif any(word in text for word in ["review", "–æ–±–∑–æ—Ä", "–æ—Ç–∑—ã–≤"]):
            return "review"
        elif self._is_news(text):
            return "news"
        else:
            return "general"

    def _analyze_sentiment(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (–º–µ—Ç–æ–¥-–∑–∞–≥–ª—É—à–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ analyze_sentiment –≤–Ω–µ –∫–ª–∞—Å—Å–∞)"""
        return analyze_sentiment(text)

# 1. –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–∑–∞–º–µ–Ω–∞ monitor_my_comments_replies)
async def check_replies_to_my_comments(client, discussion_chat, reactions_history, private_chat_history):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç –∫–∞–Ω–∞–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        my_messages = reactions_history.get("my_messages", [])
        if not my_messages:
            print("üì≠ –ù–µ—Ç –º–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
            
        messages = await client.get_messages(discussion_chat, limit=100)
        found_replies = False
        
        for msg in messages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?
            if msg.reply_to_msg_id and str(msg.reply_to_msg_id) in my_messages:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ —É–∂–µ
                if str(msg.id) in reactions_history.get("processed_replies", []):
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                is_channel = False
                sender_id = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                if msg.from_id:
                    if hasattr(msg.from_id, 'channel_id'):
                        # –≠—Ç–æ –∫–∞–Ω–∞–ª
                        is_channel = True
                        sender_name = "–ö–∞–Ω–∞–ª"
                        try:
                            channel_entity = await client.get_entity(msg.from_id)
                            if hasattr(channel_entity, 'title'):
                                sender_name = channel_entity.title
                        except:
                            pass
                    elif hasattr(msg.from_id, 'user_id'):
                        # –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        sender_id = msg.from_id.user_id
                        try:
                            user_entity = await client.get_entity(msg.from_id)
                            sender_name = get_display_name(user_entity)
                        except:
                            pass
                elif msg.sender:
                    # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
                    sender_name = get_display_name(msg.sender)
                    if hasattr(msg.sender, 'broadcast') and msg.sender.broadcast:
                        is_channel = True
                    elif hasattr(msg.sender, 'id'):
                        sender_id = msg.sender.id
                
                print(f"üí¨ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {sender_name}")
                
                if msg.text:
                    print(f"   –¢–µ–∫—Å—Ç: {msg.text[:100]}...")
                
                found_replies = True
                
                # –†–µ—à–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –æ—Ç–≤–µ—Ç–æ–º
                if is_channel:
                    # –≠—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞ - –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç–µ
                    if random.random() < 0.6:  # 60% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª—É
                        await handle_channel_reply_in_chat(client, discussion_chat, msg, reactions_history)
                else:
                    # –≠—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if random.random() < 0.4:  # 40% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await handle_user_reply_in_chat(client, discussion_chat, msg, reactions_history)
                    
                    # –ú–æ–∂–µ–º —Ç–∞–∫–∂–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
                    if random.random() < 0.7:  # 70% —à–∞–Ω—Å —Ä–µ–∞–∫—Ü–∏–∏
                        emoji = random.choice(["üëç", "‚ù§Ô∏è", "üî•", "üòä", "üëÄ"])
                        await asyncio.sleep(random.randint(5, 15))
                        try:
                            await client(SendReactionRequest(
                                peer=discussion_chat,
                                msg_id=msg.id,
                                reaction=[ReactionEmoji(emoticon=emoji)]
                            ))
                            print(f"   ‚úÖ –ü–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é {emoji}")
                        except:
                            pass
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                if "processed_replies" not in reactions_history:
                    reactions_history["processed_replies"] = []
                reactions_history["processed_replies"].append(str(msg.id))
                save_reactions_history(reactions_history)
        
        if not found_replies:
            print("üì≠ –ù–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {e}")

# 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–∞–ª—É –≤ —á–∞—Ç–µ
async def handle_channel_reply_in_chat(client, discussion_chat, msg, reactions_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞ - –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ"""
    print(f"üì¢ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –∫–∞–Ω–∞–ª—É...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    style = "neutral"
    if msg.text and "?" in msg.text:
        style = "answer"
    elif msg.text and any(word in msg.text.lower() for word in ["—Å–ø–∞—Å–∏–±–æ", "thanks", "–∫—Ä—É—Ç–æ", "—Å—É–ø–µ—Ä"]):
        style = "positive"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    reply = await generate_channel_appropriate_reply(msg.text, style)
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞
    delay = random.randint(30, 120)
    print(f"‚è≥ –û—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(delay)
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        await simulate_typing(client, discussion_chat)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        sent = await client.send_message(
            discussion_chat,
            reply,
            reply_to=msg.id
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –∫–∞–Ω–∞–ª—É: {reply}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        reactions_history["my_messages"].append(str(sent.id))
        save_reactions_history(reactions_history)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –∫–∞–Ω–∞–ª—É: {e}")

# 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç–µ
async def handle_user_reply_in_chat(client, discussion_chat, msg, reactions_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ"""
    print(f"üë§ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
    style = analyze_reply_style(msg.text)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    reply = await gpt_comment_with_context("", style, {"all_comments": []}, replied_comment=msg.text)
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞
    delay = random.randint(45, 150)
    print(f"‚è≥ –û—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(delay)
    
    try:
        await simulate_typing(client, discussion_chat)
        
        sent = await client.send_message(
            discussion_chat,
            reply,
            reply_to=msg.id
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {reply}")
        
        reactions_history["my_messages"].append(str(sent.id))
        save_reactions_history(reactions_history)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# 4. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
async def generate_channel_appropriate_reply(channel_text, style):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    channel_replies = {
        "answer": {
            "price": ["–Ω–æ—Ä–º —Ü–µ–Ω–∞", "–¥–æ—Ä–æ–≥–æ–≤–∞—Ç–æ", "–∑–∞ —Ç–∞–∫—É—é —Ü–µ–Ω—É –≤–æ–∑—å–º—É", "–ø–æ–¥–æ–∂–¥—É —Å–∫–∏–¥–æ–∫"],
            "where": ["–Ω–∞ poizon", "–≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ", "–≤–µ–∑–¥–µ –±—É–¥—É—Ç", "–≤ —Ç–µ–ª–µ–≥–µ –≤–∏–¥–µ–ª"],
            "when": ["–ª–µ—Ç–æ–º –≤—Ä–æ–¥–µ", "—Å–∫–æ—Ä–æ –¥–æ–ª–∂–Ω—ã", "—É–∂–µ –µ—Å—Ç—å", "–≤ –∏—é–Ω–µ –ø–∏—Å–∞–ª–∏"],
            "default": ["–æ–∫", "–ø–æ–Ω—è–ª", "—Å–ø–∞—Å–∏–±–æ", "—è—Å–Ω–æ"]
        },
        "positive": ["—Ç–æ–ø –∏–Ω—Ñ–∞", "—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç", "–∫–ª–∞—Å—Å", "–æ–≥–æ–Ω—å –Ω–æ–≤–æ—Å—Ç—å", "–∂–¥–∞–ª —ç—Ç–æ–≥–æ"],
        "neutral": ["–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ø–æ—Å–º–æ—Ç—Ä–∏–º", "–Ω–æ—Ä–º", "–æ–∫", "–ø–æ–Ω—è—Ç–Ω–æ"]
    }
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ
    if channel_text and any(word in channel_text.lower() for word in ["—Ü–µ–Ω–∞", "—Å–∫–æ–ª—å–∫–æ", "–ø–æ—á–µ–º", "price"]):
        return random.choice(channel_replies["answer"]["price"])
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≥–¥–µ –∫—É–ø–∏—Ç—å
    if channel_text and any(word in channel_text.lower() for word in ["–≥–¥–µ", "–æ—Ç–∫—É–¥–∞", "where"]):
        return random.choice(channel_replies["answer"]["where"])
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–æ–≥–¥–∞
    if channel_text and any(word in channel_text.lower() for word in ["–∫–æ–≥–¥–∞", "when", "–¥–∞—Ç–∞"]):
        return random.choice(channel_replies["answer"]["when"])
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ —Å—Ç–∏–ª—é
    if style == "answer":
        return random.choice(channel_replies["answer"]["default"])
    elif style == "positive":
        return random.choice(channel_replies["positive"])
    else:
        return random.choice(channel_replies["neutral"])

# 5. –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—Ç–∏–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
def analyze_reply_style(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    if not text:
        return "neutral"
    
    text_lower = text.lower()
    
    # –í–æ–ø—Ä–æ—Å
    if "?" in text:
        return "answer"
    
    # –ü–æ–∑–∏—Ç–∏–≤
    positive_words = ["—Å–ø–∞—Å–∏–±–æ", "thanks", "–∫—Ä—É—Ç–æ", "–∫–ª–∞—Å—Å", "—Ç–æ–ø", "—Å–æ–≥–ª–∞—Å–µ–Ω"]
    if any(word in text_lower for word in positive_words):
        return "agree"
    
    # –ù–µ–≥–∞—Ç–∏–≤
    negative_words = ["–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "—Ñ–∏–≥–Ω—è", "–ø–ª–æ—Ö–æ", "–¥–æ—Ä–æ–≥–æ", "–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"]
    if any(word in text_lower for word in negative_words):
        return "neutral"  # –ù–µ —Å–ø–æ—Ä–∏–º
    
    return "short_reaction"

async def handle_reply_to_my_comment(client, message, reactions_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
    today = datetime.now().strftime("%Y-%m-%d")
    replies_today = reactions_history.get("replies_today", {}).get(today, 0)
    
    if replies_today >= 10:  # –ú–∞–∫—Å–∏–º—É–º 10 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –¥–µ–Ω—å
        print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç—ã –∑–∞ –¥–µ–Ω—å")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text_lower = message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –∫ –Ω–∞–º?
    is_question_to_me = False
    clarification_needed = False
    
    # –Ø–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
    if any(marker in text_lower for marker in ["@", "—Ç–µ–±–µ", "—Ç–µ–±—è", "—Ç—ã ", " —Ç—ã", "–≤–∞–º", "–≤–∞—Å"]):
        is_question_to_me = True
    
    # –ù–µ—è–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    elif "?" in message.text and len(text_lower.split()) < 10:
        # –ö–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –±–µ–∑ —è–≤–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞—Ç–∞
        clarification_needed = True
    
    # –†–µ—à–∞–µ–º, –æ—Ç–≤–µ—á–∞—Ç—å –ª–∏
    reply_chance = 0.9 if is_question_to_me else 0.3
    
    if clarification_needed:
        reply_chance = 0.7  # –í—ã—Å–æ–∫–∏–π —à–∞–Ω—Å —É—Ç–æ—á–Ω–∏—Ç—å
    
    if random.random() < reply_chance:
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        delay = random.randint(30, 120)
        print(f"‚è≥ –û—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(delay)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        await simulate_typing(client, discussion_chat)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if clarification_needed:
            reply = await generate_clarification_reply(message.text)
        else:
            reply = await generate_reply_to_reply(message.text, is_question_to_me)
        
        try:
            sent_reply = await client.send_message(
                entity=discussion_chat,
                message=reply,
                reply_to=message.id
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if "replied_to_replies" not in reactions_history:
                reactions_history["replied_to_replies"] = []
            reactions_history["replied_to_replies"].append(str(message.id))
            
            if "my_messages" not in reactions_history:
                reactions_history["my_messages"] = []
            reactions_history["my_messages"].append(str(sent_reply.id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            if "replies_today" not in reactions_history:
                reactions_history["replies_today"] = {}
            reactions_history["replies_today"][today] = replies_today + 1
            
            save_reactions_history(reactions_history)
            print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª: {reply}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

async def generate_clarification_reply(original_text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–π –æ—Ç–≤–µ—Ç"""
    clarifications = [
        "—ç—Ç–æ –º–Ω–µ?",
        "–º–Ω–µ –≤–æ–ø—Ä–æ—Å?",
        "—Ç—ã –º–Ω–µ?",
        "—ç—Ç–æ –∫–æ –º–Ω–µ?",
        "–º–Ω–µ –æ—Ç–≤–µ—á–∞–µ—à—å?",
        "—Å–æ—Ä—Ä–∏ —ç—Ç–æ –º–Ω–µ –∏–ª–∏ –Ω–µ—Ç?",
        "–Ω–µ –ø–æ–Ω—è–ª —ç—Ç–æ –º–Ω–µ",
        "—á—ë –º–Ω–µ?",
        "–∞ —ç—Ç–æ –∫–æ–º—É –≤–æ–ø—Ä–æ—Å?"
    ]
    
    # 70% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É
    if random.random() < 0.7:
        return random.choice(clarifications)
    
    # –ò–Ω–∞—á–µ GPT
    prompt = f"""–¢—ã –≤–∏–¥–∏—à—å –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ, –Ω–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å, —Ç–µ–±–µ –ª–∏ –æ–Ω –∞–¥—Ä–µ—Å–æ–≤–∞–Ω.
–ù–∞–ø–∏—à–∏ –û–ß–ï–ù–¨ –∫–æ—Ä–æ—Ç–∫–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ (2-5 —Å–ª–æ–≤), —Å–ø—Ä–æ—Å–∏ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ–±–µ.
–ü–∏—à–∏ –∫–∞–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –º–æ–∂–µ—à—å –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.

–í–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –≤–∏–¥–∏—à—å: {original_text}

–¢–≤–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ:"""

    try:
        response = openai_client.chat.completions.create(
            model=GPT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=15,
            temperature=0.9,
        )
        return response.choices[0].message.content.strip().lower()
    except Exception:
        return random.choice(clarifications)

async def generate_reply_to_reply(text, is_direct_question):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–≤–µ—Ç"""
    
    if is_direct_question:
        # –ü—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –∫ –Ω–∞–º - –æ—Ç–≤–µ—á–∞–µ–º –ø–æ —Å—É—â–µ—Å—Ç–≤—É
        prompt = f"""–¢–µ–±–µ –∑–∞–¥–∞–ª–∏ –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
–ü–∏—à–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –º–∞–∫—Å–∏–º—É–º 10 —Å–ª–æ–≤.

–í–æ–ø—Ä–æ—Å: {text}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç:"""
    else:
        # –ü—Ä–æ—Å—Ç–æ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        prompt = f"""–ö—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ.
–ú–æ–∂–µ—à—å —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è, –ø–æ—à—É—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.
–ú–∞–∫—Å–∏–º—É–º 5 —Å–ª–æ–≤, –ø–∏—à–∏ –∫–∞–∫ –≤ —á–∞—Ç–µ.

–û—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {text}

–¢–≤–æ—è —Ä–µ–∞–∫—Ü–∏—è:"""

    try:
        response = openai_client.chat.completions.create(
            model=GPT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=20,
            temperature=0.8,
        )
        reply = response.choices[0].message.content.strip()
        
        # 60% —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
        if random.random() < 0.6:
            reply = reply.lower()
            
        return reply
    except Exception:
        # –ó–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if is_direct_question:
            return random.choice(["—Ö–∑", "–Ω–µ –∑–Ω–∞—é", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–¥–∞", "–Ω–µ–∞", "–Ω–æ—Ä–º"])
        else:
            return random.choice(["–∞–≥–∞", "++", "—Ç–æ—á–Ω–æ", "–¥–∞", "–ø–æ–Ω", "))"])

async def continuous_monitoring_mode(client, channel_username, discussion_chat, history, reactions_history, private_chat_history):
    """–†–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    print("üì± –°—Ç–∞—Ç—É—Å: –æ–Ω–ª–∞–π–Ω üü¢")
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤)
            await check_replies_to_my_comments(client, discussion_chat, reactions_history, private_chat_history)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await handle_private_messages(client, private_chat_history)
            
            # –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            interval = random.randint(300, 600)  # 5-10 –º–∏–Ω—É—Ç
            print(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval//60} –º–∏–Ω—É—Ç...")
            
            await asyncio.sleep(interval)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(60)
    


async def generate_contextual_comment(analysis: Dict, style: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    contextual_templates = {
        "collaboration": {
            "positive": ["–æ–≥–æ–Ω—å –∫–æ–ª–ª–∞–±", "–∂–¥—É —ç—Ç—É –∫–æ–ª–ª–∞–±—É", "—Ç–æ–ø –∫–æ–ª–∞–±–æ—Ä–∞—Ü–∏—è", "patta x nike –≤—Å–µ–≥–¥–∞ –æ–≥–æ–Ω—å", "–ø–∞—Ç—Ç–∞ –Ω–µ –ø–æ–¥–≤–æ–¥–∏—Ç"],
            "question": ["–∫–æ–≥–¥–∞ –¥—Ä–æ–ø?", "–±—É–¥–µ—Ç –≤ —Ä–æ—Å—Å–∏–∏?", "—Å–∫–æ–ª—å–∫–æ –±—É–¥—É—Ç —Å—Ç–æ–∏—Ç—å?", "–≥–¥–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–∑—è—Ç—å?"],
            "love": ["–º–µ—á—Ç–∞", "–Ω—É–∂–Ω—ã –æ–±–µ", "shut up and take my money", "–±–µ—Ä—É –Ω–µ –≥–ª—è–¥—è"],
            "cool": ["—Å—Ç–∏–ª—å–Ω–∞—è –∫–æ–ª–ª–∞–±–∞", "–ø–∞—Ç—Ç–∞ –∫–∞–∫ –≤—Å–µ–≥–¥–∞", "–¥–∏–∑–∞–π–Ω —Ç–æ–ø", "–Ω–∞–π—Å –∫–æ–ª–ª–∞–±"]
        },
        "retro": {
            "positive": ["–∫–ª–∞—Å—Å–∏–∫–∞", "–ª–µ–≥–µ–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å", "–Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ", "–∂–¥–∞–ª —ç—Ç–æ–≥–æ"],
            "love": ["–¥–µ—Ç—Å—Ç–≤–æ", "–Ω–æ—Å—Ç–∞–ª—å–≥–∏—è", "–ø–æ–º–Ω—é –ø–µ—Ä–≤—ã–µ", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ"],
            "neutral": ["–±—ã–ª–∏ —É –º–µ–Ω—è —Ç–∞–∫–∏–µ", "–Ω–æ—Ä–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏", "–ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –±—É–¥–µ—Ç"]
        },
        "sale": {
            "positive": ["–Ω–∞–¥–æ –±—Ä–∞—Ç—å", "–ø–æ—Ä–∞ –∑–∞—Ç–∞—Ä–∏–≤–∞—Ç—å—Å—è", "–Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Å–∫–∏–¥–∫–∏"],
            "question": ["—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤?", "–≥–¥–µ —Å–∫–∏–¥–∫–∏?", "—ç—Ç–æ –≤–µ–∑–¥–µ –∏–ª–∏ –≥–¥–µ?"],
            "short_reaction": ["–±–µ–≥—É", "–ª–µ—á—É", "—É–∂–µ –µ–¥—É"]
        },
        "new_release": {
            "positive": ["—Å–≤–µ–∂–∞–∫", "–Ω–æ–≤–∏–Ω–∫–∞ –æ–≥–æ–Ω—å", "–∂–¥–∞–ª", "—Ç–æ–ø —Ä–µ–ª–∏–∑"],
            "question": ["–∫–æ–≥–¥–∞ —Ä–µ–ª–∏–∑?", "–≥–¥–µ –∫—É–ø–∏—Ç—å?", "–±—É–¥–µ—Ç –æ–Ω–ª–∞–π–Ω?"],
            "love": ["—Ö–æ—á—É", "–Ω—É–∂–Ω—ã", "–±–µ—Ä—É –Ω–µ –≥–ª—è–¥—è"]
        },
        "drop": {
            "positive": ["–∂–¥—É –¥—Ä–æ–ø", "–≥–æ—Ç–æ–≤ –∫ –¥—Ä–æ–ø—É", "—Ç–æ–ø —Ä–µ–ª–∏–∑", "–±—É–¥–µ—Ç –∂–∞—Ä–∫–æ"],
            "question": ["–≤–æ —Å–∫–æ–ª—å–∫–æ –¥—Ä–æ–ø?", "–≥–¥–µ –¥—Ä–æ–ø–∞–µ—Ç—Å—è?", "–∫–∞–∫–∞—è —Ü–µ–Ω–∞?"],
            "love": ["–Ω—É–∂–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–º–∞—Å—Ç—Ö—ç–≤", "–≥–æ—Ç–æ–≤–ª—é –¥–µ–Ω—å–≥–∏"]
        },
        "album": {
            "positive": ["—Ç–æ–ø –ø–æ–¥–±–æ—Ä–∫–∞", "–≤—Å–µ —Ñ–æ—Ç–æ –æ–≥–æ–Ω—å", "–∫—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ—Ç–∫–∏", "—à–∏–∫–∞—Ä–Ω–æ", "–∑–∞–ª–∏–ø"],
            "question": ["–≤—Å–µ —Ü–≤–µ—Ç–∞ –µ—Å—Ç—å?", "—Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫?", "—ç—Ç–æ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã?"],
            "love": ["–≤—Å–µ —Ö–æ—á—É", "–∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ –æ–≥–æ–Ω—å", "–≤—ã–±—Ä–∞—Ç—å –Ω–µ –º–æ–≥—É", "–≤—Å–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"],
            "cool": ["—Å—Ç–∏–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "–∫—Ä–∞—Å–∏–≤–æ —Å—Ñ–æ—Ç–∫–∞–Ω–æ", "–∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–ø", "—á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ"],
            "short_reaction": ["üî•üî•üî•", "–≤—Å–µ —Ç–æ–ø", "+++", "–≤–∞—É"]
        }
    }
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
    brand_specific = {
        "nike": {
            "positive": ["–Ω–∞–π–∫ –∫–∞–∫ –≤—Å–µ–≥–¥–∞", "swoosh –Ω–∞ –º–µ—Å—Ç–µ", "–Ω–∞–π–∫ –Ω–µ –ø–æ–¥–≤–æ–¥–∏—Ç", "air max —Ç–æ–ø—á–∏–∫"],
            "love": ["–æ–±–æ–∂–∞—é –Ω–∞–π–∫", "nike boy", "team nike", "air max forever"],
            "question": ["–≤ —Å–Ω–∫—Ä—Å –±—É–¥—É—Ç?", "–Ω–∞ –Ω–∞–π–∫ —Ä—É –ø–æ—è–≤—è—Ç—Å—è?", "—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ç–µ–π–ª?"]
        },
        "adidas": {
            "positive": ["—Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏ —Ç–æ–ø", "–∞–¥–∏–¥–∞—Å –∫—Ä–∞—Å–∞–≤—Ü—ã", "–∞–¥–∏–∫ –æ–≥–æ–Ω—å"],
            "love": ["adidas –≤—Å–µ–≥–¥–∞ –≤ —Å–µ—Ä–¥—Ü–µ", "three stripes life"]
        },
        "new_balance": {
            "positive": ["–Ω–± –≤ –¥–µ–ª–µ", "new balance —Ç–æ–ø", "–∫–∞—á–µ—Å—Ç–≤–æ –Ω–±"],
            "love": ["nb lifestyle", "–æ–±–æ–∂–∞—é –Ω—å—é –±—ç–ª–∞–Ω—Å"]
        }
    }
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞:
    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É (collaboration, drop –∏ —Ç.–¥.)
    # 2. –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞
    # 3. –ó–∞—Ç–µ–º –±—Ä–µ–Ω–¥—ã
    # 4. –í –∫–æ–Ω—Ü–µ - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    
    templates = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É
    main_topic = analysis.get("main_topic", "general")
    if main_topic in contextual_templates and style in contextual_templates[main_topic]:
        templates = contextual_templates[main_topic][style]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞
    if not templates:
        release_type = analysis.get("release_type", "general")
        if release_type in contextual_templates and style in contextual_templates[release_type]:
            templates = contextual_templates[release_type][style]
    
    # –ï—Å–ª–∏ –∞–ª—å–±–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if analysis.get("is_album") and not templates:
        if style in contextual_templates["album"]:
            templates = contextual_templates["album"][style]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–µ–Ω–¥—ã
    if not templates and analysis.get("brands"):
        brand = analysis["brands"][0]
        if brand in brand_specific and style in brand_specific[brand]:
            templates = brand_specific[brand][style]
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    if not templates:
        templates = {
            "positive": ["—Ç–æ–ø", "–æ–≥–æ–Ω—å", "–∫–ª–∞—Å—Å", "–Ω–æ—Ä–º", "–∫—Ä—É—Ç–æ", "–Ω–∞–π—Å"],
            "negative": ["–Ω–µ –º–æ–µ", "—Å–ø–æ—Ä–Ω–æ", "—Ö–∑", "–Ω—É —Ç–∞–∫–æ–µ"],
            "question": ["—Å–∫–æ–ª—å–∫–æ?", "–≥–¥–µ?", "–∫–æ–≥–¥–∞?", "–ø–æ—á–µ–º?"],
            "love": ["—Ö–æ—á—É", "–Ω—É–∂–Ω—ã", "–º–µ—á—Ç–∞", "–∫–∞–π—Ñ"],
            "cool": ["—Å—Ç–∏–ª—å–Ω–æ", "—Å–≤–µ–∂–æ", "—á–µ—Ç–∫–æ", "–Ω–∞–π—Å"],
            "short_reaction": ["++", "–≤–∞—É", "–æ–≥–æ", "—Ç–æ–ø"]
        }.get(style, ["–Ω–æ—Ä–º"])
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
    comment = random.choice(templates)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if "{brand1}" in comment and len(analysis.get("brands", [])) >= 1:
        comment = comment.replace("{brand1}", analysis["brands"][0])
    if "{brand2}" in comment and len(analysis.get("brands", [])) >= 2:
        comment = comment.replace("{brand2}", analysis["brands"][1])
    
    return comment


async def generate_smart_comment(post_text: str, analysis: Dict, history) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
    if analysis.get("is_album"):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è —Å –∞–ª—å–±–æ–º–æ–º
        if analysis.get("main_topic") == "collaboration":
            style = random.choice(["positive", "love", "question", "cool"])
        else:
            # –û–±—ã—á–Ω—ã–µ –∞–ª—å–±–æ–º—ã
            album_styles = ["positive", "love", "question", "cool"]
            style = random.choice(album_styles)
    elif analysis.get("main_topic") == "collaboration":
        # –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ - –≤—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
        style = random.choice(["positive", "love", "question", "cool"])
    elif analysis.get("release_type") == "drop":
        # –î—Ä–æ–ø—ã - –∞–∂–∏–æ—Ç–∞–∂
        style = random.choice(["positive", "question", "love"])
    elif analysis["has_question"]:
        style = "answer"
    elif analysis["main_topic"] == "sale":
        style = random.choice(["positive", "short_reaction", "question"])
    elif analysis["brands"] and "nike" in analysis["brands"]:
        style = random.choice(["positive", "love", "cool", "question"])
    elif analysis["release_type"] == "new_release":
        style = random.choice(["positive", "question", "love"])
    elif analysis["sentiment"] == "positive":
        style = random.choice(["positive", "cool"])
    elif analysis["sentiment"] == "negative":
        style = random.choice(["neutral", "question"])
    else:
        style = get_comment_style(history)
    
    # –î–ª—è –ø–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)
    if not post_text or post_text == "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞)":
        return await generate_photo_comment(analysis, style)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comment = await generate_contextual_comment(analysis, style)
    
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"  üí≠ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style}")
    print(f"  üí¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    
    return comment

async def process_new_posts(client, channel_username, discussion_chat, 
                          history_file="comment_history.json",
                          reactions_file="reactions_history.json"):
    """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    history = load_history(history_file)
    reactions_history = load_reactions_history(reactions_file)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –±–æ—Ç–µ
    me = await client.get_me()
    bot_name = f"{me.first_name or ''} {me.last_name or ''}".strip()
    print(f"ü§ñ –†–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç: {bot_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    last_channel_post = await get_last_channel_post(client, channel_username, reactions_history)
    
    if not last_channel_post:
        found_new = False
        messages = await client.get_messages(channel_username, limit=20)
        
        for msg in messages:
            msg_key = f"{channel_username}_{msg.id}"
            if msg_key not in reactions_history.get("processed_messages", []):
                if msg.message and (not msg.grouped_id or msg.text or not msg.grouped_id):
                    last_channel_post = msg
                    found_new = True
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: {msg.id}")
                    break
        
        if not found_new:
            print("‚ùå –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            return
    
    post_text = print_post_info(last_channel_post)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤
    if last_channel_post.grouped_id:
        print(f"\nüì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–ª—å–±–æ–º (grouped_id: {last_channel_post.grouped_id})")
        album_messages = await client.get_messages(
            channel_username, 
            limit=10,
            min_id=last_channel_post.id - 10,
            max_id=last_channel_post.id + 10
        )
        
        media_count = sum(1 for msg in album_messages if msg.grouped_id == last_channel_post.grouped_id)
        print(f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–ª—å–±–æ–º–µ: {media_count}")
    
    if not post_text:
        post_text = "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞)"
    
    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∞–∫—Ü–∏–µ–π
    await asyncio.sleep(random.uniform(3, 10))
    
    # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç
    await process_channel_post_reaction(client, last_channel_post, reactions_history)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —É—á–µ—Ç–æ–º –±–æ—Ç–∞
    await handle_discussion_and_comments_multi_bot(
        client, last_channel_post, post_text, history, reactions_history, bot_name
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    save_history(history, history_file)
    save_reactions_history(reactions_history, reactions_file)

async def handle_discussion_and_comments_multi_bot(client, last_channel_post, post_text, 
                                                  history, reactions_history, bot_name):
    """–í–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –±–æ—Ç–æ–≤"""
    
    # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
    if last_channel_post.grouped_id and not last_channel_post.text:
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    analyzer = ContentAnalyzer()
    has_image = bool(last_channel_post.media or last_channel_post.grouped_id)
    post_analysis = analyzer.analyze_post(post_text, has_image)
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
    discussion_msg_id = await find_discussion_msg_id(client, last_channel_post, discussion_chat)
    my_comment_id = None
    
    if not discussion_msg_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
    if can_comment(last_channel_post.id, history):
        style = get_comment_style(history)
        wait_time = random.randint(10, 30)
        print(f"\n‚è≥ –ñ–¥—É {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –ø–æ—Å—Ç—É...")
        await asyncio.sleep(wait_time)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —É—á–µ—Ç–æ–º –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        comment = await generate_bot_specific_comment(post_text, style, history, bot_name)
        sent_msg = await send_comment_and_get_id(
            client, discussion_chat, discussion_msg_id, comment, last_channel_post.id, history
        )
        
        if sent_msg:
            my_comment_id = sent_msg.id
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã
    await asyncio.sleep(random.randint(20, 60))
    await process_comment_reactions_and_replies_multi_bot(
        client, discussion_chat, post_text, reactions_history, history, my_comment_id, bot_name
    )

async def generate_bot_specific_comment(post_text, style, history, bot_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    # –†–∞–∑–Ω—ã–µ "–ª–∏—á–Ω–æ—Å—Ç–∏" –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–æ—Ç–æ–≤
    bot_personalities = {
        "default": {
            "traits": "–æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –ª—é–±–∏—Ç –∫—Ä–æ—Å—Å–æ–≤–∫–∏",
            "vocabulary": ["—Ç–æ–ø", "–Ω–æ—Ä–º", "–∫–ª–∞—Å—Å", "—Ö–æ—á—É"],
            "emoji_chance": 0.1
        },
        "enthusiast": {
            "traits": "—ç–Ω—Ç—É–∑–∏–∞—Å—Ç, –≤—Å–µ–≥–¥–∞ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç –Ω–æ–≤–∏–Ω–æ–∫",
            "vocabulary": ["–æ–≥–æ–Ω—å", "–∏–º–±–∞", "–º–µ—á—Ç–∞", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑—å–º—É"],
            "emoji_chance": 0.3
        },
        "skeptic": {
            "traits": "—Å–∫–µ–ø—Ç–∏–∫, –∫—Ä–∏—Ç–∏—á–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ü–µ–Ω–∞–º",
            "vocabulary": ["–¥–æ—Ä–æ–≥–æ", "–ø–µ—Ä–µ–ø–ª–∞—Ç–∞", "–ø–æ–¥–æ–∂–¥—É —Å–∫–∏–¥–æ–∫", "–Ω–µ —Å—Ç–æ–∏—Ç"],
            "emoji_chance": 0.05
        },
        "collector": {
            "traits": "–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä, –∑–Ω–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π",
            "vocabulary": ["–∫–ª–∞—Å—Å–∏–∫–∞", "must have", "–≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é", "–ª–µ–≥–µ–Ω–¥–∞"],
            "emoji_chance": 0.2
        }
    }
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ
    personality = bot_personalities.get(bot_name.lower(), random.choice(list(bot_personalities.values())))
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏
    prompt = f"""–¢—ã {personality['traits']}. 
–ü–∏—à–∏ –û–ß–ï–ù–¨ –ö–û–†–û–¢–ö–û (1-5 —Å–ª–æ–≤).
–°—Ç–∏–ª—å: {style}
–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞: {', '.join(personality['vocabulary'])}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {post_text[:100]}

–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"""
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=20,
            temperature=1.0,
        )
        comment = response.choices[0].message.content.strip().lower()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏
        if random.random() < personality['emoji_chance']:
            emoji = random.choice(["üî•", "üëü", "üí∞", "ü§î", "üòç"])
            comment += f" {emoji}"
        
        return comment
        
    except:
        return random.choice(personality['vocabulary'])

async def process_comment_reactions_and_replies_multi_bot(client, discussion_chat, post_text, 
                                                         reactions_history, history, 
                                                         my_comment_id, bot_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å —É—á–µ—Ç–æ–º –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤...")
    
    if my_comment_id:
        reactions_history["my_messages"].append(str(my_comment_id))
        save_reactions_history(reactions_history)
    
    messages = await client.get_messages(discussion_chat, limit=30)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    known_bots = load_known_bots()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤
    
    reactions_given = 0
    replies_given = 0
    
    for msg in messages:
        if not msg.text or not msg.sender:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if str(msg.id) in reactions_history["my_messages"]:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –¥—Ä—É–≥–æ–π –±–æ—Ç?
        sender_name = f"{msg.sender.first_name or ''} {msg.sender.last_name or ''}".strip()
        is_bot = sender_name in known_bots
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏
        if is_bot:
            interaction_chance = 0.5  # 50% —à–∞–Ω—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
        else:
            interaction_chance = 0.2  # 20% —Å –æ–±—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
        # –†–µ–∞–∫—Ü–∏–∏
        if random.random() < interaction_chance and reactions_given < 3:
            emoji = choose_reaction(analyze_sentiment(msg.text))
            delay = random.randint(10, 30)
            print(f"‚è≥ –†–µ–∞–∫—Ü–∏—è {emoji} –Ω–∞ {'–±–æ—Ç–∞' if is_bot else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} {sender_name}")
            
            await asyncio.sleep(delay)
            if await send_reaction(client, discussion_chat, msg.id, emoji, reactions_history):
                reactions_given += 1
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
                if is_bot:
                    record_bot_interaction(bot_name, sender_name, "reaction", emoji)
        
        # –û—Ç–≤–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞ —Å–µ—Å—Å–∏—é)
        if replies_given < 1 and should_reply_to_comment(msg.text, post_text, history, False):
            # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞–º
            if is_bot and random.random() < 0.7:  # 70% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –±–æ—Ç—É
                reply = await generate_bot_to_bot_reply(msg.text, sender_name)
            else:
                reply = await gpt_comment_with_context(post_text, "neutral", history, msg.text)
            
            delay = random.randint(30, 90)
            await asyncio.sleep(delay)
            
            try:
                await simulate_typing(client, discussion_chat)
                sent = await client.send_message(discussion_chat, reply, reply_to=msg.id)
                
                reactions_history["my_messages"].append(str(sent.id))
                save_reactions_history(reactions_history)
                
                print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª {'–±–æ—Ç—É' if is_bot else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'}: {reply}")
                replies_given += 1
                
                if is_bot:
                    record_bot_interaction(bot_name, sender_name, "reply", reply)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")

def load_known_bots():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤"""
    try:
        with open("bots_config.json", 'r', encoding='utf-8') as f:
            config = json.load(f)
            return [bot.get("name", "") for bot in config.get("bots", [])]
    except:
        return []

def record_bot_interaction(bot1, bot2, interaction_type, content):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
    interactions_file = "bot_interactions.json"
    
    try:
        with open(interactions_file, 'r', encoding='utf-8') as f:
            interactions = json.load(f)
    except:
        interactions = []
    
    interactions.append({
        "timestamp": datetime.now().isoformat(),
        "bot1": bot1,
        "bot2": bot2,
        "type": interaction_type,
        "content": content
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    interactions = interactions[-100:]
    
    with open(interactions_file, 'w', encoding='utf-8') as f:
        json.dump(interactions, f, indent=2, ensure_ascii=False)

async def generate_bot_to_bot_reply(original_text, other_bot_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞"""
    replies = [
        "—Å–æ–≥–ª–∞—Å–µ–Ω", "—Ç–æ—á–Ω–æ", "+1", "—Ç–æ–∂–µ —Ç–∞–∫ –¥—É–º–∞—é",
        "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å", "–Ω–µ –∑–Ω–∞–ª", "—Å–ø–∞—Å–∏–±–æ",
        "—Ö–æ—Ä–æ—à–∞—è –∏–¥–µ—è", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é", "—Ñ–∞–∫—Ç",
        "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–≤–æ–∑–º–æ–∂–Ω–æ", "–Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å"
    ]
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—á–∞–µ–º
    if "?" in original_text:
        return random.choice(["–¥–∞", "–Ω–µ—Ç", "–≤–æ–∑–º–æ–∂–Ω–æ", "–¥—É–º–∞—é –¥–∞", "–Ω–µ —É–≤–µ—Ä–µ–Ω"])
    
    return random.choice(replies)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
def save_history(history, filename="comment_history.json"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(history, f, indent=2, ensure_ascii=False)

def load_history(filename="comment_history.json"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        "posts_commented": {},
        "all_comments": [],
        "daily_count": {},
        "session_count": 0
    }

def save_reactions_history(reactions_history, filename="reactions_history.json"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–∫—Ü–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(reactions_history, f, indent=2, ensure_ascii=False)

def load_reactions_history(filename="reactions_history.json"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–∫—Ü–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {
        "reacted_to": [],
        "all_reactions": [],
        "my_messages": [],
        "processed_messages": [],
        "hourly_count": {},
        "session_reactions_count": 0
    }

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
async def process_post_with_analysis(post_text: str, has_image: bool = False) -> Tuple[str, Dict]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    analyzer = ContentAnalyzer()
    analysis = analyzer.analyze_post(post_text, has_image)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if analysis["has_question"]:
        style = "answer"
    elif analysis["main_topic"] == "sale":
        style = random.choice(["positive", "short_reaction", "question"])
    elif analysis["main_topic"] == "collaboration":
        style = random.choice(["positive", "love", "question"])
    elif analysis["sentiment"] == "positive":
        style = random.choice(["positive", "love", "cool"])
    else:
        style = random.choice(["neutral", "question", "short_reaction"])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comment = await generate_contextual_comment(analysis, style)
    
    return comment, analysis
# ==== –ö–û–ù–§–ò–ì ====
api_id = 2040
api_hash = 'b18441a1ff607e10a989891a5462e627'
session_file = 'sessions/573181612574.session'  
proxy = ('socks5', '217.29.62.212', 12049, True, 'ZcqNj3', 'KNqLM6')

openai_client = openai.OpenAI(
    api_key="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"
)

channel_username = 'chinapack'
discussion_chat = 'chipack_chat'

SKIP_POSTS_WITHOUT_TEXT = True

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
HISTORY_FILE = "comment_history.json"
REACTIONS_HISTORY_FILE = "reactions_history.json"
PRIVATE_CHAT_HISTORY_FILE = "private_chat_history.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç–∞
ANTIDETECT_CONFIG = {
    # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    "private_message_reply_chance": 1,      # 30% —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    "max_private_replies_per_day": 5,         # –ú–∞–∫—Å–∏–º—É–º –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ª–∏—á–∫–µ –∑–∞ –¥–µ–Ω—å
    "private_reply_delay": (5, 30),         # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –≤ –ª–∏—á–∫–µ (1-5 –º–∏–Ω—É—Ç)
    "ignore_spam_keywords": ["–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–∞", "–±–∏—Ä–∂–∞", "—Å—Ç–∞–≤–∫–∏"],
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    "random_channel_view_chance": 0.7,        # 70% —à–∞–Ω—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    "channels_to_view": 3,                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    "read_messages_delay": (2, 10),           # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    # –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
    "update_online_status": True,             # –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
    "online_duration": (300, 900),            # –í—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω (5-15 –º–∏–Ω—É—Ç)
    "offline_duration": (1800, 7200),         # –í—Ä–µ–º—è –æ—Ñ–ª–∞–π–Ω (30 –º–∏–Ω - 2 —á–∞—Å–∞)
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    "typing_duration": (3, 8),                # –í—Ä–µ–º—è "–Ω–∞–±–æ—Ä–∞" —Å–æ–æ–±—â–µ–Ω–∏—è
    "typing_chance": 0.8,                     # 80% —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
    
    # –ü–∞—É–∑—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    "action_cooldown": (5, 20),               # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    "session_duration": (1800, 3600),         # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (30-60 –º–∏–Ω—É—Ç)
    
    # –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    "max_actions_per_day": 50,                # –ú–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥–µ–Ω—å
    "max_messages_per_hour": 10,              # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å
    
    # –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
    "active_hours": (9, 23),                  # –ê–∫—Ç–∏–≤–µ–Ω —Å 9 –¥–æ 23
    "weekend_activity_reduction": 0.5,        # 50% —Å–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
}

# –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
POPULAR_CHANNELS = [
    "durov_russia",           # –ü–∞–≤–µ–ª –î—É—Ä–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è)
    "tginfo",          # Telegram Info
    "telegram",        # Telegram News
    "breakingmash",    # Mash
    "meduzalive",      # –ú–µ–¥—É–∑–∞
    "rian_ru",         # –†–ò–ê –ù–æ–≤–æ—Å—Ç–∏
    "rt_russian",      # RT –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    "tass_agency",     # –¢–ê–°–°
    "rbc_news"         # –†–ë–ö
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
REACTIONS_CONFIG = {
    "channel_post_reaction_chance": 1.0,      # 100% —à–∞–Ω—Å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    "comment_reaction_chance": 0.3,           # 30% —à–∞–Ω—Å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —á—É–∂–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    "max_reactions_per_hour": 20,             # –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∞–∫—Ü–∏–π –≤ —á–∞—Å
    "min_time_between_reactions": 20,         # –ú–∏–Ω–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏
    "react_to_replies_chance": 0.9,           # 90% —à–∞–Ω—Å –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    "reaction_delay": (5, 45),                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∞–∫—Ü–∏–µ–π (—Å–µ–∫—É–Ω–¥—ã)
    "max_reactions_per_session": 5,           # –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∞–∫—Ü–∏–π –∑–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é
    "max_replies_to_replies_per_day": 10,  # –ú–∞–∫—Å–∏–º—É–º –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç—ã –≤ –¥–µ–Ω—å
    "reply_to_reply_delay": (30, 120),     # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –æ—Ç–≤–µ—Ç
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
REPLY_CONFIG = {
    "reply_to_interesting_comment": 0.15,     # 15% –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç
    "reply_if_mentioned_brand": 0.4,          # 40% –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç –±—Ä–µ–Ω–¥ –∏–∑ –ø–æ—Å—Ç–∞
    "reply_if_question": 0.6,                 # 60% –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
    "reply_if_strong_emotion": 0.3,           # 30% –µ—Å–ª–∏ —Å–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    "max_replies_per_post": 2,                # –ú–∞–∫—Å–∏–º—É–º –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ –æ–¥–Ω–∏–º –ø–æ—Å—Ç–æ–º
    "min_time_between_replies": 180,          # –ú–∏–Ω–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
    "reply_delay": (30, 120)                  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
}

# –≠–º–æ–¥–∑–∏ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
REACTIONS_BY_SENTIMENT = {
    "positive": ["üëç", "‚ù§Ô∏è", "üî•", "üëè", "üíØ", "üòç", "‚ú®", "üí™"],  # –£–±—Ä–∞–ª–∏ ü§©, ‚ö°Ô∏è
    "negative": ["üëé", "üò¢", "ü§Æ", "üí©", "ü§°", "üòí", "üò§"],  # –£–±—Ä–∞–ª–∏ üôÑ, üòë
    "neutral": ["üëÄ", "ü§î", "üòê", "ü§∑", "üí≠"],  # –£–±—Ä–∞–ª–∏ ü´§, üò∂
    "funny": ["üòÇ", "ü§£", "üòÅ", "üòÜ", "üíÄ", "üòÑ"],  # –£–±—Ä–∞–ª–∏ ü§™
    "question": ["‚ùì", "ü§∑"],  # –£–±—Ä–∞–ª–∏ ü§®, üßê, ‚ùî, ü§∑‚Äç‚ôÇÔ∏è, ü§∑‚Äç‚ôÄÔ∏è
    "wow": ["üò±", "ü§Ø", "üòÆ", "üî•", "üí•", "üò≤"],  # –£–±—Ä–∞–ª–∏ ü§©
    "love": ["‚ù§Ô∏è", "üòç", "üíï", "üíñ", "üíò"],  # –£–±—Ä–∞–ª–∏ ‚ù§Ô∏è‚Äçüî•
    "cool": ["üòé", "ü§ô", "üíé", "üî•"]  # –£–±—Ä–∞–ª–∏ üÜí
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
SENTIMENT_KEYWORDS = {
    "positive": ["–∫—Ä—É—Ç–æ", "—Ç–æ–ø", "–∏–º–±–∞", "–æ–≥–æ–Ω—å", "–∫–ª–∞—Å—Å", "—Å—É–ø–µ—Ä", "–ª—É—á—à", "—Ö–æ—á—É", "–Ω–∞–¥–æ –±—Ä–∞—Ç—å", "—à–∏–∫–∞—Ä–Ω", "–∫—Ä–∞—Å–∏–≤", "—Å—Ç–∏–ª—å–Ω", "—á–µ—Ç–∫", "–∫–∞—á–µ—Å—Ç–≤"],
    "negative": ["–∫—Ä–∏–Ω–∂", "—Ñ—É", "—É–∂–∞—Å", "–≥–æ–≤–Ω", "–æ—Ç—Å—Ç–æ–π", "—Ö—Ä–µ–Ω—å", "–Ω–µ –Ω—Ä–∞–≤", "–ø–ª–æ—Ö", "–¥–æ—Ä–æ–≥", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤", "–±—Ä–µ–¥", "–¥–Ω–∏—â–µ"],
    "funny": ["–∞—Ö–∞—Ö", "—Ö–∞—Ö–∞", "–æ—Ä—É", "—Ä–æ—Ñ–ª", "–ª–æ–ª", "—Å–º–µ—à–Ω", "—Ä–∂—É", "—É–≥–∞—Ä", "—Ö–µ—Ö", "–∞—Ö–∞—Ö–∞—Ö", "–ª–º–∞–æ"],
    "question": ["?", "–∫–∞–∫", "–≥–¥–µ", "—Å–∫–æ–ª—å–∫–æ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "—á—Ç–æ —ç—Ç–æ", "–∫—Ç–æ", "–∫–∞–∫–æ–π", "–∫–∞–∫–∏–µ"],
    "wow": ["–≤–∞—É", "–æ–≥–æ", "–æ—Ñ–∏–≥–µ—Ç—å", "–Ω–∏—á–µ–≥–æ —Å–µ–±–µ", "–æ—Ö—Ä–µ–Ω–µ—Ç—å", "–∂–µ—Å—Ç—å", "–∫–∞–ø–µ—Ü", "–ø–∑–¥—Ü", "–±–ª–∏–Ω"],
    "love": ["–ª—é–±–ª—é", "–æ–±–æ–∂–∞—é", "–∫–∞–π—Ñ", "–≤–ª—é–±–∏–ª—Å—è", "–º–µ—á—Ç–∞", "—Ö–æ—á—É", "–Ω–∞–¥–æ"],
    "cool": ["—Å—Ç–∏–ª—å", "—Å–≤–µ–≥", "—Ñ—Ä–µ—à", "–Ω–∞–π—Å", "—á–∏–ª", "–≤–∞–π–±"]
}

# –§—Ä–∞–∑—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
INTERESTING_PATTERNS = {
    "personal_experience": ["—É –º–µ–Ω—è", "—è –∫—É–ø–∏–ª", "—è –±—Ä–∞–ª", "–Ω–æ—à—É", "–±—ã–ª–∏ —Ç–∞–∫–∏–µ"],
    "recommendation": ["—Å–æ–≤–µ—Ç—É—é", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "–±–µ—Ä–∏—Ç–µ", "–Ω–µ –±–µ—Ä–∏—Ç–µ", "—Å—Ç–æ–∏—Ç", "–Ω–µ —Å—Ç–æ–∏—Ç"],
    "strong_opinion": ["–∏–º—Ö–æ", "–ø–æ –º–Ω–µ", "—Å—á–∏—Ç–∞—é", "—É–≤–µ—Ä–µ–Ω", "—Ç–æ—á–Ω–æ"],
    "detailed_analysis": ["–ø–æ—Ç–æ–º—É —á—Ç–æ", "—Ç–∞–∫ –∫–∞–∫", "–¥–µ–ª–æ –≤ —Ç–æ–º", "–ø—Ä–∏—á–∏–Ω–∞"],
    "comparison": ["–ª—É—á—à–µ —á–µ–º", "—Ö—É–∂–µ —á–µ–º", "–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç", "–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é"]
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
SPAM_PROTECTION = {
    "min_time_between_comments": 300,
    "max_comments_per_hour": 5,
    "max_comments_per_post": 1,
    "max_comments_per_day": 20,
    "avoid_duplicate_style": True,
    "min_unique_words": 3
}

COMMENTS = [
    "–Ω—É —Ç–∞–∫–æ–µ",
    "—Ö–æ—á—É —Å–µ–±–µ —Ç–∞–∫–∏–µ",
    "–∫—Ä–∏–Ω–∂ –∫–∞–∫–æ–π —Ç–æ",
    "–æ—Ä—É",
    "—Ç–æ–ø—á–∏–∫",
    "–∏–º–±–∞ –ø—Ä–æ—Å—Ç–æ",
    "–Ω—É –Ω–æ—Ä–º —á–æ",
    "–∂–∏–∑–∞",
    "–±–∞–∑–∞",
    "–¥–∞ –ª–∞–¥–Ω–æ –ø—Ä–∏–∫–æ–ª—å–Ω–æ –∂–µ",
    "–±–ª–∏–Ω –∫—Ä—É—Ç–æ",
    "—Ö–∑ –º–Ω–µ –Ω–µ –æ—á",
    "–≤–æ—Ç —ç—Ç–æ –¥–∞",
    "–∞—Ö–∞—Ö–∞—Ö —Ç–æ–ø",
    "–±–ª—è —Ö–æ—á—É",
    "–Ω—É —Ö–∑ —Ö–∑",
    "–ø—Ä–∏–∫–æ–ª—å–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç",
    "++++",
    "–º–Ω–µ –Ω—Ä–∞–≤",
    "–¥–∞–π—Ç–µ –¥–≤–µ",
    "—ç—Ç–æ –∂–µ—Å—Ç–∫–æ",
    "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç",
    "–≥–¥–µ –∫—É–ø–∏—Ç—å –º–æ–∂–Ω–æ"
]

GPT_MODEL = "gpt-4o"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É sessions –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('sessions', exist_ok=True)

def load_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return create_empty_history()
    return create_empty_history()

def load_reactions_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–∫—Ü–∏–π"""
    if os.path.exists(REACTIONS_HISTORY_FILE):
        try:
            with open(REACTIONS_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return create_empty_reactions_history()
    return create_empty_reactions_history()

def create_empty_history():
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ç–æ—Ä–∏–∏"""
    return {
        "posts_commented": {},
        "all_comments": [],
        "last_styles": [],
        "daily_count": {},
        "replies_count": {},      # –°—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ –ø–æ—Å—Ç–æ–º
        "last_reply_time": None,  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        "session_id": datetime.now().isoformat()
    }

def create_empty_reactions_history():
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∞–∫—Ü–∏–π"""
    return {
        "reacted_to": {},
        "all_reactions": [],
        "hourly_count": {},
        "my_messages": [],
        "session_reactions_count": 0  # –°—á–µ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
    }

def save_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def save_reactions_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–∫—Ü–∏–π"""
    with open(REACTIONS_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def load_private_chat_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if os.path.exists(PRIVATE_CHAT_HISTORY_FILE):
        try:
            with open(PRIVATE_CHAT_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return create_empty_private_history()
    return create_empty_private_history()

def create_empty_private_history():
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return {
        "replied_to": {},        # {user_id: [timestamps]}
        "daily_replies": {},     # {date: count}
        "last_reply_time": None,
        "ignored_users": []      # –°–ø–∞–º–µ—Ä—ã –∏ –±–æ—Ç—ã
    }

def save_private_chat_history(history):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    with open(PRIVATE_CHAT_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def analyze_sentiment(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    if not text:
        return "neutral"
    
    text_lower = text.lower()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    scores = {}
    for sentiment, keywords in SENTIMENT_KEYWORDS.items():
        score = sum(2 if keyword in text_lower else 0 for keyword in keywords)
        # –î–∞–µ–º –±–æ–ª—å—à–µ –≤–µ—Å–∞ —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
        for keyword in keywords:
            if f" {keyword} " in f" {text_lower} ":
                score += 1
        scores[sentiment] = score
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ question
    if "?" in text:
        scores["question"] = scores.get("question", 0) + 5
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
    if max(scores.values()) == 0:
        return "neutral"
    
    return max(scores, key=scores.get)

def is_comment_interesting(text, post_text=""):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    if not text:
        return False, 0.0
    
    text_lower = text.lower()
    interest_score = 0.0
    reasons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    for pattern_type, patterns in INTERESTING_PATTERNS.items():
        for pattern in patterns:
            if pattern in text_lower:
                interest_score += 0.2
                reasons.append(pattern_type)
                break
    
    # –î–ª–∏–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —á–∞—Å—Ç–æ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã
    if len(text) > 100:
        interest_score += 0.1
        reasons.append("detailed")
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏ —á–∞—Å—Ç–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
    emoji_count = sum(1 for char in text if ord(char) > 127462)
    if emoji_count > 0:
        interest_score += 0.05 * min(emoji_count, 3)
        reasons.append("emotional")
    
    # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–∑ –ø–æ—Å—Ç–∞
    if post_text:
        post_words = set(post_text.lower().split())
        comment_words = set(text_lower.split())
        common_words = post_words.intersection(comment_words)
        if len(common_words) > 2:
            interest_score += 0.15
            reasons.append("relevant_to_post")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
    interest_score = min(interest_score, 0.8)
    
    is_interesting = interest_score > 0.2
    return is_interesting, interest_score

def should_reply_to_comment(comment_text, post_text, history, is_reply_to_me=False):
    """–†–µ—à–∞–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —É—á–µ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    suspicious_keywords = [
        "–±–æ—Ç", "bot", "–∏–∏", "ai", "–ø—Ä–æ–º–ø—Ç", "prompt", 
        "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "gpt", "chatgpt", "–∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω"
    ]
    
    comment_lower = comment_text.lower()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —ç—Ç–æ –ù–ï –æ—Ç–≤–µ—Ç –Ω–∞–º
    if not is_reply_to_me and any(keyword in comment_lower for keyword in suspicious_keywords):
        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        return False
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞–º —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º - –æ—Ç–≤–µ—á–∞–µ–º —Å –Ω–µ–¥–æ—É–º–µ–Ω–∏–µ–º
    if is_reply_to_me and any(keyword in comment_lower for keyword in suspicious_keywords):
        print("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Å –Ω–µ–¥–æ—É–º–µ–Ω–∏–µ–º")
        return True
    
    # –î–∞–ª—å—à–µ –≤–∞—à–∞ –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞...
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞–º, –≤—ã—Å–æ–∫–∏–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∏—Ç—å
    if is_reply_to_me:
        return random.random() < 0.8
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    _, interest_score = is_comment_interesting(comment_text, post_text)
    
    # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å
    reply_chance = REPLY_CONFIG["reply_to_interesting_comment"]
    
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —à–∞–Ω—Å–∞
    sentiment = analyze_sentiment(comment_text)
    
    if sentiment == "question":
        reply_chance = REPLY_CONFIG["reply_if_question"]
    elif sentiment in ["love", "negative", "wow"]:
        reply_chance = REPLY_CONFIG["reply_if_strong_emotion"]
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π
    reply_chance += interest_score * 0.3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤
    current_post_replies = history.get("replies_count", {}).get(str(post_text[:50]), 0)
    if current_post_replies >= REPLY_CONFIG["max_replies_per_post"]:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if history.get("last_reply_time"):
        last_reply = datetime.fromisoformat(history["last_reply_time"])
        if (datetime.now() - last_reply).total_seconds() < REPLY_CONFIG["min_time_between_replies"]:
            return False
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    decision = random.random() < min(reply_chance, 0.8)
    
    if decision:
        print(f"üí≠ –†–µ—à–∏–ª –æ—Ç–≤–µ—Ç–∏—Ç—å (—à–∞–Ω—Å: {reply_chance:.2f}, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å: {interest_score:.2f})")
    
    return decision

def choose_reaction(sentiment, is_reply_to_me=False, is_channel_post=False):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–µ–∞–∫—Ü–∏—é (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    # –î–ª—è –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–∞
    if is_channel_post:
        if sentiment not in ["negative"]:
            # 70% —à–∞–Ω—Å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤
            if random.random() < 0.7:
                sentiment = random.choice(["positive", "love", "cool", "wow"])
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞–º, —á–∞—â–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
    if is_reply_to_me and sentiment not in ["negative", "question"] and random.random() < 0.8:
        sentiment = "positive"
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    reactions = REACTIONS_BY_SENTIMENT.get(sentiment, REACTIONS_BY_SENTIMENT["neutral"])
    return random.choice(reactions)

async def can_react(message_id, reactions_history):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é"""
    now = datetime.now()
    current_hour = now.strftime("%Y-%m-%d-%H")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –£–∂–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?
    if str(message_id) in reactions_history["reacted_to"]:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∞–∫—Ü–∏–∏
    if reactions_history["all_reactions"]:
        last_reaction_time = datetime.fromisoformat(reactions_history["all_reactions"][-1]["time"])
        time_diff = (now - last_reaction_time).total_seconds()
        if time_diff < REACTIONS_CONFIG["min_time_between_reactions"]:
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –†–µ–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å
    hourly_count = reactions_history["hourly_count"].get(current_hour, 0)
    if hourly_count >= REACTIONS_CONFIG["max_reactions_per_hour"]:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –†–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
    if reactions_history["session_reactions_count"] >= REACTIONS_CONFIG["max_reactions_per_session"]:
        print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ—Å—Å–∏—é ({REACTIONS_CONFIG['max_reactions_per_session']})")
        return False
    
    return True

async def send_reaction(client, chat, message_id, emoji, reactions_history):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è Telethon
        await client(SendReactionRequest(
            peer=chat,
            msg_id=message_id,
            reaction=[ReactionEmoji(emoticon=emoji)]  # –í –°–ü–ò–°–ö–ï!
        ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        now = datetime.now()
        current_hour = now.strftime("%Y-%m-%d-%H")
        
        reactions_history["reacted_to"][str(message_id)] = {
            "reaction": emoji,
            "time": now.isoformat()
        }
        
        reactions_history["all_reactions"].append({
            "message_id": str(message_id),
            "reaction": emoji,
            "time": now.isoformat()
        })
        
        reactions_history["hourly_count"][current_hour] = reactions_history["hourly_count"].get(current_hour, 0) + 1
        reactions_history["session_reactions_count"] += 1
        
        save_reactions_history(reactions_history)
        
        print(f"‚úÖ –†–µ–∞–∫—Ü–∏—è {emoji} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        return False

async def simulate_typing(client, peer, duration=None):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞"""
    if random.random() < ANTIDETECT_CONFIG["typing_chance"]:
        if not duration:
            duration = random.uniform(*ANTIDETECT_CONFIG["typing_duration"])
        
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º "–ø–µ—á–∞—Ç–∞—Ç—å"
            await client(SetTypingRequest(peer, SendMessageTypingAction()))
            print(f"‚å®Ô∏è –ü–µ—á–∞—Ç–∞—é {duration:.1f} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(duration)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ø–µ—á–∞—Ç—å"
            await client(SetTypingRequest(peer, SendMessageCancelAction()))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞: {e}")

async def update_online_status(client, online=True):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω"""
    if ANTIDETECT_CONFIG["update_online_status"]:
        try:
            await client(UpdateStatusRequest(offline=not online))
            status = "–æ–Ω–ª–∞–π–Ω üü¢" if online else "–æ—Ñ–ª–∞–π–Ω ‚ö´"
            print(f"üì± –°—Ç–∞—Ç—É—Å: {status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def read_channel_messages(client, channel, limit=10):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (–æ—Ç–º–µ—á–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ)"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è entity
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ username
            entity = await client.get_entity(f"@{channel}")
        except:
            try:
                # –ü–æ—Ç–æ–º –±–µ–∑ @
                entity = await client.get_entity(channel)
            except:
                print(f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ {channel}")
                return
        
        messages = await client.get_messages(entity, limit=limit)
        if messages:
            await client(ReadHistoryRequest(
                peer=entity,
                max_id=messages[0].id
            ))
            print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {channel}")
            
            delay = random.uniform(*ANTIDETECT_CONFIG["read_messages_delay"])
            await asyncio.sleep(delay)
    except Exception as e:
        error_type = type(e).__name__
        if "flood" in str(e).lower():
            print(f"‚ö†Ô∏è –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–∞–Ω–∞–ª {channel}: {error_type}")
            
async def handle_discussion_and_comments(client, last_channel_post, post_text, history, reactions_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∞–ª—å–±–æ–º–æ–≤ –∏ –æ—à–∏–±–æ–∫"""
    
    try:
        # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
        if last_channel_post.grouped_id and not last_channel_post.text:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
        analyzer = ContentAnalyzer()
        has_image = bool(last_channel_post.media or last_channel_post.grouped_id)
        post_analysis = analyzer.analyze_post(post_text, has_image)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if last_channel_post.grouped_id:
            post_analysis["is_album"] = True
            post_analysis["main_topic"] = "album" if post_analysis["main_topic"] == "general" else post_analysis["main_topic"]
        
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞:")
        print(f"  - –ë—Ä–µ–Ω–¥—ã: {', '.join(post_analysis['brands']) if post_analysis['brands'] else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
        print(f"  - –¢–µ–º–∞: {post_analysis['main_topic']}")
        print(f"  - –¢–∏–ø —Ä–µ–ª–∏–∑–∞: {post_analysis['release_type']}")
        print(f"  - –¶–≤–µ—Ç–∞: {', '.join(post_analysis['colors']) if post_analysis['colors'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}")
        print(f"  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {post_analysis['sentiment']}")
        if post_analysis.get("is_album"):
            print("  - –¢–∏–ø: –ê–ª—å–±–æ–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        discussion_msg_id = await find_discussion_msg_id(client, last_channel_post, discussion_chat)
        my_comment_id = None

        if not discussion_msg_id:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.")
            await process_comment_reactions_and_replies(client, discussion_chat, post_text, reactions_history, history)
            return

        if can_comment(last_channel_post.id, history):
            wait_time = random.randint(10, 30)
            print(f"\n‚è≥ –ñ–¥—É {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –ø–æ—Å—Ç—É...")
            await asyncio.sleep(wait_time)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∞–ª—å–±–æ–º–∞
            comment = await generate_smart_comment(post_text, post_analysis, history)
            sent_msg = await send_comment_and_get_id(client, discussion_chat, discussion_msg_id, comment, last_channel_post.id, history)
            
            if sent_msg:
                my_comment_id = sent_msg.id
        else:
            print("\n‚õî –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã")
        
        await asyncio.sleep(random.randint(20, 60))
        await process_comment_reactions_and_replies(client, discussion_chat, post_text, reactions_history, history, my_comment_id)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_discussion_and_comments: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        import traceback
        traceback.print_exc()

async def simulate_channel_browsing(client):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    if random.random() < ANTIDETECT_CONFIG["random_channel_view_chance"]:
        print("\nüåê –ò–º–∏—Ç–∏—Ä—É—é –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤...")
        
        channels = random.sample(POPULAR_CHANNELS, 
                               min(ANTIDETECT_CONFIG["channels_to_view"], len(POPULAR_CHANNELS)))
        
        for channel in channels:
            await read_channel_messages(client, channel, limit=random.randint(5, 15))
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
            await asyncio.sleep(random.uniform(5, 15))

async def should_work_now():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    now = datetime.now()
    hour = now.hour
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤
    start_hour, end_hour = ANTIDETECT_CONFIG["active_hours"]
    if not (start_hour <= hour < end_hour):
        print(f"üò¥ –ù–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è ({hour}:00). –ê–∫—Ç–∏–≤–µ–Ω —Å {start_hour}:00 –¥–æ {end_hour}:00")
        return False
    
    # –°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
   # if now.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ = 5, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6
   #     if random.random() > ANTIDETECT_CONFIG["weekend_activity_reduction"]:
    #        print("üèñ –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
    #        return False
    
    return True

async def handle_private_message(client, message, private_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text or message.text == "**Reply was deleted.**":
        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    peer = message.chat_id if hasattr(message, 'chat_id') else message.peer_id
    user_id = message.sender_id if hasattr(message, 'sender_id') else message.from_id
    if not user_id or not peer:
        print("‚ö†Ô∏è –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    if await handle_spam_and_limits(message, user_id, private_history):
        return

    if await should_reply_to_private():
        await reply_to_private_message(client, peer, user_id, message.text, private_history)

def extract_peer_and_user_id(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç peer –∏ user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if hasattr(message, 'peer_id'):
        peer = message.peer_id
        user_id = getattr(peer, 'user_id', None)
    else:
        peer = getattr(message, 'chat_id', None)
        user_id = getattr(message, 'from_id', None)
    return peer, user_id

async def handle_spam_and_limits(message, user_id, private_history):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∞–º –∏ –ª–∏–º–∏—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if any(keyword in message.text.lower() for keyword in ANTIDETECT_CONFIG["ignore_spam_keywords"]):
        print(f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–ø–∞–º –æ—Ç {user_id}")
        if user_id not in private_history["ignored_users"]:
            private_history["ignored_users"].append(user_id)
            save_private_chat_history(private_history)
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    today = datetime.now().strftime("%Y-%m-%d")
    daily_count = private_history["daily_replies"].get(today, 0)
    if daily_count >= ANTIDETECT_CONFIG["max_private_replies_per_day"]:
        print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ª–∏—á–∫–µ ({daily_count})")
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_replies = private_history["replied_to"].get(str(user_id), [])
    if user_replies:
        last_reply = datetime.fromisoformat(user_replies[-1])
        if (datetime.now() - last_reply).total_seconds() < 3600:
            print(f"‚è∞ –ù–µ–¥–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
    return False

async def should_reply_to_private():
    """–†–µ—à–∞–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return random.random() < ANTIDETECT_CONFIG["private_message_reply_chance"]

async def reply_to_private_message(client, peer, user_id, message_text, private_history):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    delay = random.randint(*ANTIDETECT_CONFIG["private_reply_delay"])
    print(f"üí¨ –û—Ç–≤–µ—á—É –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
    print(f"üìç Peer: {peer}, User ID: {user_id}")
    await asyncio.sleep(delay)
    await simulate_typing(client, peer)
    reply = await generate_private_reply(message_text)
    today = datetime.now().strftime("%Y-%m-%d")
    daily_count = private_history["daily_replies"].get(today, 0)
    
    try:
        await client.send_message(peer, reply)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        if str(user_id) not in private_history["replied_to"]:
            private_history["replied_to"][str(user_id)] = []
        private_history["replied_to"][str(user_id)].append(datetime.now().isoformat())
        private_history["daily_replies"][today] = daily_count + 1
        private_history["last_reply_time"] = datetime.now().isoformat()
        save_private_chat_history(private_history)
        print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –≤ –ª–∏—á–∫—É: {reply}")
        
    except Exception as e:
        error_msg = str(e)
        if "blocked" in error_msg.lower():
            print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç
            if user_id not in private_history["ignored_users"]:
                private_history["ignored_users"].append(user_id)
                save_private_chat_history(private_history)
        elif "flood" in error_msg.lower():
            print(f"‚ö†Ô∏è –§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def generate_private_reply(message_text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    suspicious_keywords = [
        "–ø—Ä–æ–º–ø—Ç", "prompt", "—Å–∏—Å—Ç–µ–º–∞", "system", "–∏–∏", "ai", "–±–æ—Ç", "bot",
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "chatgpt", "gpt", "openai", "–∫–ª–æ–¥", "claude"
    ]
    
    message_lower = message_text.lower()
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
    if any(keyword in message_lower for keyword in suspicious_keywords):
        confused_replies = [
            "—á–µ–≥–æ?",
            "–Ω–µ –ø–æ–Ω—è–ª",
            "—á—Ç–æ –∑–∞ –ø—Ä–æ–º–ø—Ç?",
            "–æ —á–µ–º —Ç—ã",
            "—Ö–∑ –æ —á–µ–º —Ä–µ—á—å",
            "—á—Ç–æ",
            "–∞?",
            "–Ω–µ –ø–æ–Ω–∏–º–∞—é",
            "—ç—Ç–æ —á–µ",
            "—á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É"
        ]
        return random.choice(confused_replies)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π", "—Ö–∞–π", "–∫—É", "–ø—Ä–∏–≤"]):
        greetings = ["–ø—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç!", "—Ö–∞–π", "–∑–¥–∞—Ä–æ–≤–∞", "–∫—É", "–ø—Ä–∏–≤", "–π–æ"]
        return random.choice(greetings)
    
    # –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –∫—Ä–æ—Å—Å–æ–≤–∫–∏/–æ–¥–µ–∂–¥—É
    if any(word in message_lower for word in ["–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–∫—Ä–æ—Å—Å—ã", "–Ω–∞–π–∫", "–∞–¥–∏–¥–∞—Å", "—Ä–∞–∑–º–µ—Ä"]):
        sneaker_replies = [
            "–Ω–µ –∑–Ω–∞—é", 
            "—Ö–∑", 
            "—Å–º–æ—Ç—Ä–∏ –≤ –∫–∞–Ω–∞–ª–µ",
            "—Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ –≤—Ä–æ–¥–µ",
            "–≤ –ø–æ—Å—Ç–µ –µ—Å—Ç—å –∏–Ω—Ñ–∞"
        ]
        return random.choice(sneaker_replies)
    
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if "?" in message_text:
        question_replies = [
            "–Ω–µ –∑–Ω–∞—é",
            "—Ö–∑",
            "–º–æ–∂–µ—Ç –±—ã—Ç—å", 
            "–Ω–∞–≤–µ—Ä–Ω–æ–µ",
            "–±–µ–∑ –ø–æ–Ω—è—Ç–∏—è",
            "–Ω–µ –≤ –∫—É—Ä—Å–µ",
            "–ø–∞—Å"
        ]
        return random.choice(question_replies)
    
    # –î–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    neutral_replies = [
        "–∞–≥–∞",
        "–ø–æ–Ω—è–ª", 
        "–æ–∫",
        "–Ω–æ—Ä–º",
        "–¥–∞",
        "—è—Å–Ω–æ",
        "–ø–æ–Ω"
    ]
    
    # 80% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    if random.random() < 0.8:
        return random.choice(neutral_replies)
    
    # 20% - GPT, –Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    prompt = f"""–¢—ã –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ –∫—Ä–æ—Å—Å–æ–≤–∫–∏. 
–ù–ï –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ù–ï –±–æ—Ç, –ù–ï –ò–ò - –ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.
–¢–µ–±–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –ª–∏—á–∫—É, –æ—Ç–≤–µ—Ç—å –û–ß–ï–ù–¨ –∫–æ—Ä–æ—Ç–∫–æ (1-5 —Å–ª–æ–≤), –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.
–ï—Å–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å –æ —á–µ–º —Ä–µ—á—å - —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏.
–ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–º–æ—â—å, –ù–ï –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.

–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}

–¢–≤–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:"""

    try:
        response = openai_client.chat.completions.create(
            model=GPT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=15,
            temperature=0.9,
        )
        reply = response.choices[0].message.content.strip().lower()
        
        # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        bad_words = ["–ø–æ–º–æ—á—å", "–ø–æ–º–æ–≥—É", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "—Ä–∞–¥", "–≥–æ—Ç–æ–≤", "—Å–µ–∫—Ä–µ—Ç"]
        for bad_word in bad_words:
            if bad_word in reply:
                return random.choice(neutral_replies)
        
        return reply
    except:
        return random.choice(neutral_replies)

async def perform_random_actions(client):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    actions = [
        ("browse_channels", 0.3),      # 30% —à–∞–Ω—Å
        ("check_saved_messages", 0.2), # 20% —à–∞–Ω—Å
        ("view_profile", 0.1),         # 10% —à–∞–Ω—Å
    ]
    
    for action, chance in actions:
        if random.random() < chance:
            if action == "browse_channels":
                await simulate_channel_browsing(client)
            elif action == "check_saved_messages":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                await client.get_messages("me", limit=5)
                print("üìå –ü—Ä–æ–≤–µ—Ä–∏–ª –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            elif action == "view_profile":
                # –°–º–æ—Ç—Ä–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                try:
                    random_channel = random.choice(POPULAR_CHANNELS)
                    await client.get_entity(random_channel)
                    print(f"üë§ –ü–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å @{random_channel}")
                except Exception:
                    pass
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            await asyncio.sleep(random.uniform(*ANTIDETECT_CONFIG["action_cooldown"]))

async def check_and_limit_actions(history):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π"""
    now = datetime.now()
    current_hour = now.strftime("%Y-%m-%d-%H")
    today = now.strftime("%Y-%m-%d")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
    hourly_actions = history.get("hourly_actions", {})
    if hourly_actions.get(current_hour, 0) >= ANTIDETECT_CONFIG["max_messages_per_hour"]:
        print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    daily_actions = history.get("daily_actions", {})
    if daily_actions.get(today, 0) >= ANTIDETECT_CONFIG["max_actions_per_day"]:
        print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π")
        return False
    
    return True

async def process_dialog_messages(client, dialog, private_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = await client.get_messages(dialog.entity, limit=dialog.unread_count)
    for message in messages:
        if message.out:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            continue
        if message.text:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
            await handle_private_message(client, message, private_history)
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    await client.send_read_acknowledge(dialog.entity)

async def monitor_private_messages(client):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("\nüì® –ü—Ä–æ–≤–µ—Ä—è—é –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    private_history = load_private_chat_history()
    
    try:
        dialogs = await client.get_dialogs(limit=10)
        unread_count = 0
        for dialog in dialogs:
            if dialog.is_user and dialog.unread_count > 0:
                unread_count += 1
                await process_unread_dialog(client, dialog, private_history)
        if unread_count == 0:
            print("üì≠ –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def process_unread_dialog(client, dialog, private_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"üí¨ –ù–∞–π–¥–µ–Ω –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å {dialog.name}: {dialog.unread_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    try:
        messages = await client.get_messages(dialog.entity, limit=dialog.unread_count)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        messages = sorted(messages, key=lambda m: m.date)
        
        # –§–ª–∞–≥, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
        already_replied = False
        valid_messages = 0  # –°—á–µ—Ç—á–∏–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        for i, message in enumerate(messages):
            if message.out:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message.text:
                print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                continue
                
            if message.text == "**Reply was deleted.**":
                print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                continue
            
            valid_messages += 1
            print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ {valid_messages}/{len(messages)} –æ—Ç {dialog.name}: {message.text[:30]}...")
            
            # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70%
            if already_replied and random.random() < 0.7:
                print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ –¥–∏–∞–ª–æ–≥–µ)")
                continue
            
            # –†–µ—à–∞–µ–º, –æ—Ç–≤–µ—á–∞—Ç—å –ª–∏ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            should_reply = await decide_if_reply_to_message(message, i, len(messages))
            
            if should_reply:
                await handle_private_message(client, message, private_history)
                already_replied = True
            else:
                print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞)")
        
        if valid_messages == 0:
            print("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        await client.send_read_acknowledge(dialog.entity)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
        # –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        try:
            await client.send_read_acknowledge(dialog.entity)
        except Exception:
            pass
async def decide_if_reply_to_message(message, index, total_messages):
    """–†–µ—à–∞–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    text_lower = message.text.lower()
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    greetings = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π", "—Ö–∞–π", "–∫—É", "hello", "hi"]
    if any(greeting in text_lower for greeting in greetings):
        print("‚úÖ –û—Ç–≤–µ—á—É –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
        return True
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if "?" in message.text:
        print("‚úÖ –û—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å")
        return True
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—á–∞–µ–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 80%
    if index == total_messages - 1 and random.random() < 0.8:
        print("‚úÖ –û—Ç–≤–µ—á—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return True
    
    # –ù–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    base_chance = ANTIDETECT_CONFIG["private_message_reply_chance"]
    
    # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if index < total_messages - 1:
        base_chance *= 0.3
    
    if random.random() < base_chance:
        print(f"‚úÖ –û—Ç–≤–µ—á—É (—à–∞–Ω—Å {base_chance:.0%})")
        return True
    
    return False
async def process_channel_post_reaction(client, post, reactions_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–≤–∏–ª–∏ –ª–∏ —É–∂–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç
    if str(post.id) in reactions_history.get("channel_posts_reacted", {}):
        print(f"‚ö†Ô∏è –£–∂–µ —Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç {post.id}")
        return
    
    if not await can_react(post.id, reactions_history):
        print("‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞
    post_text = post.text or ""
    
    # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–ª–∏ —Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–∫—Ü–∏—é
    if post.grouped_id and not post_text:
        # 30% —à–∞–Ω—Å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
        if random.random() < 0.3:
            sentiment = random.choice(["positive", "love", "cool"])
            print("üì∏ –°—Ç–∞–≤–ª—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞")
        else:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ")
            return
    else:
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        sentiment = analyze_sentiment(post_text) if post_text else "neutral"
        
        # –î–ª—è –ø–æ—Å—Ç–æ–≤ –ø—Ä–æ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —á–∞—â–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        keywords = ["nike", "jordan", "adidas", "yeezy", "new balance", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "sneakers"]
        if any(keyword in post_text.lower() for keyword in keywords):
            if random.random() < 0.85:
                sentiment = random.choice(["positive", "love", "cool", "wow"])
    
    emoji = choose_reaction(sentiment, is_channel_post=True)
    
    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    delay = random.randint(*REACTIONS_CONFIG["reaction_delay"])
    print(f"‚è≥ –°—Ç–∞–≤–ª—é —Ä–µ–∞–∫—Ü–∏—é {emoji} –Ω–∞ –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
    await asyncio.sleep(delay)
    
    success = await send_reaction(client, channel_username, post.id, emoji, reactions_history)
    
    if success:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞
        if "channel_posts_reacted" not in reactions_history:
            reactions_history["channel_posts_reacted"] = {}
        
        reactions_history["channel_posts_reacted"][str(post.id)] = {
            "reaction": emoji,
            "time": datetime.now().isoformat(),
            "is_album_photo": bool(post.grouped_id and not post.text)
        }
        save_reactions_history(reactions_history)

async def show_coordination_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –±–æ—Ç–æ–≤"""
    coordinator = SmartBotCoordinator()
    stats = coordinator.get_activity_stats()
    
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–û–†–î–ò–ù–ê–¶–ò–ò –ë–û–¢–û–í")
    print("=" * 50)
    print(f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_posts']}")
    print(f"‚è∞ –ü–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats['posts_last_hour']}")
    print(f"üìÖ –ü–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: {stats['posts_last_24h']}")
    print(f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['total_comments']}")
    
    if stats['bot_activity']:
        print("\nü§ñ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –±–æ—Ç–∞–º:")
        for phone, activity in stats['bot_activity'].items():
            print(f"  {phone}: {activity['comments']} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
    if coordinator.bots:
        print("\nüé≤ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞:")
        test_post_id = 99999  # –¢–µ—Å—Ç–æ–≤—ã–π ID
        for bot in coordinator.bots:
            if bot.get('status') != 'banned':
                prob = coordinator.calculate_comment_probability(test_post_id, bot['phone'])
                print(f"  {bot['name']}: {prob:.1%}")

async def process_comment_reactions_and_replies(client, discussion_chat, post_text, reactions_history, history, my_comment_id=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –ø—É—Å—Ç–æ–≥–æ —á–∞—Ç–∞
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞
        await client.get_entity(discussion_chat)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {e}")
        return
    
    if my_comment_id:
        reactions_history["my_messages"].append(str(my_comment_id))
        save_reactions_history(reactions_history)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
    try:
        messages = await client.get_messages(discussion_chat, limit=30)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not messages:
        print("üì≠ –í —á–∞—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    reactions_given = 0
    replies_given = 0
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    filtered_messages = [
        msg for msg in messages
        if str(msg.id) not in reactions_history["my_messages"]
        and msg.text
        and msg.date  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å –¥–∞—Ç–∞
        and (datetime.now(msg.date.tzinfo) - msg.date).total_seconds() <= 7200
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not filtered_messages:
        print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤")
        return
    
    print(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(filtered_messages)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    for msg in filtered_messages:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç ID
        if not msg or not msg.id:
            continue
            
        is_reply_to_me = (
            msg.reply_to_msg_id and 
            str(msg.reply_to_msg_id) in reactions_history["my_messages"]
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏
        if await handle_comment_reaction(
            client, discussion_chat, msg, reactions_history, is_reply_to_me, reactions_given
        ):
            reactions_given += 1
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if await handle_comment_reply(
            client, discussion_chat, msg, post_text, history, reactions_history, replies_given, is_reply_to_me
        ):
            replies_given += 1
async def process_comment_reactions_and_replies_modified(
    client, discussion_chat, post_text, reactions_history, 
    history, my_comment_id, custom_reactions_config
):
    """–í–µ—Ä—Å–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤ (—É—Å–∏–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if my_comment_id:
        reactions_history["my_messages"].append(str(my_comment_id))
        save_reactions_history(reactions_history)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    messages = await client.get_messages(discussion_chat, limit=30)
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    reactions_given = 0
    replies_given = 0
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    filtered_messages = [
        msg for msg in messages
        if str(msg.id) not in reactions_history["my_messages"]
        and msg.text
        and msg.date  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å –¥–∞—Ç–∞
        and (datetime.now(msg.date.tzinfo) - msg.date).total_seconds() <= 7200
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not filtered_messages:
        print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤")
        return
    
    print(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(filtered_messages)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print(f"‚ö° –†–µ–∂–∏–º —É—Å–∏–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π (—à–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 50%)")
    
    for msg in filtered_messages:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç ID
        if not msg or not msg.id:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?
        is_reply_to_me = (
            msg.reply_to_msg_id and 
            str(msg.reply_to_msg_id) in reactions_history["my_messages"]
        )
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ê–ö–¶–ò–ô –° –£–í–ï–õ–ò–ß–ï–ù–ù–´–ú –®–ê–ù–°–û–ú ===
        if str(msg.id) not in reactions_history.get("reacted_to", []):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if is_reply_to_me:
                reaction_chance = custom_reactions_config.get("react_to_replies_chance", 0.9)
            else:
                reaction_chance = custom_reactions_config.get("comment_reaction_chance", 0.25)
            
            if random.random() < reaction_chance and reactions_given < 5:  # –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –¥–æ 5
                if await can_react(msg.id, reactions_history):
                    sentiment = analyze_sentiment(msg.text)
                    
                    # –î–ª—è —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
                    if sentiment == "neutral" and random.random() < 0.5:
                        sentiment = "positive"
                    
                    emoji = choose_reaction(sentiment, is_reply_to_me)
                    
                    delay = random.randint(5, 30)  # –ë—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
                    print(f"‚ö° –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∞–∫—Ü–∏—é {emoji} –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                    await asyncio.sleep(delay)
                    
                    if await send_reaction(client, discussion_chat, msg.id, emoji, reactions_history):
                        reactions_given += 1
                        print(f"   ‚úÖ –ü–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é (–≤—Å–µ–≥–æ –≤ —Å–µ—Å—Å–∏–∏: {reactions_given})")
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if should_reply_to_comment(msg.text, post_text, history, is_reply_to_me) and replies_given < 1:
            delay = random.randint(*REPLY_CONFIG["reply_delay"])
            print(f"üí¨ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
            await asyncio.sleep(delay)
            
            sentiment = analyze_sentiment(msg.text)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞
            if "?" in msg.text:
                style = "answer"
            elif sentiment == "positive":
                style = random.choice(["agree", "positive", "short_reaction"])
            elif sentiment == "negative":
                style = random.choice(["disagree", "neutral", "question"])
            else:
                style = random.choice(["neutral", "short_reaction", "question"])
            
            print(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç (—Å—Ç–∏–ª—å: {style})...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            reply = await gpt_comment_with_context(post_text, style, history, replied_comment=msg.text)
            
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
                await simulate_typing(client, discussion_chat)
                
                sent_reply = await client.send_message(
                    entity=discussion_chat,
                    message=reply,
                    reply_to=msg.id
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                reactions_history["my_messages"].append(str(sent_reply.id))
                save_reactions_history(reactions_history)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤
                history["last_reply_time"] = datetime.now().isoformat()
                history.setdefault("replies_count", {})
                post_key = str(post_text[:50])
                history["replies_count"][post_key] = history["replies_count"].get(post_key, 0) + 1
                save_history(history)
                
                print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {reply}")
                replies_given += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if reactions_given > 0 or replies_given > 0:
        print(f"\nüìä –ò—Ç–æ–≥–æ –≤ —É—Å–∏–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ:")
        print(f"   - –†–µ–∞–∫—Ü–∏–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {reactions_given}")
        print(f"   - –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {replies_given}")
    else:
        print("üì≠ –ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π")

async def handle_comment_reply(client, discussion_chat, msg, post_text, history, reactions_history, replies_given, is_reply_to_me):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    if replies_given >= 1:
        return False

    if not should_reply_to_comment(msg.text, post_text, history, is_reply_to_me):
        return False

    delay = random.randint(*REPLY_CONFIG["reply_delay"])
    print(f"üí¨ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
    await asyncio.sleep(delay)

    sentiment = analyze_sentiment(msg.text)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if "?" in msg.text:  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å
        style = "answer"
    elif sentiment == "positive":
        style = random.choice(["agree", "positive", "short_reaction"])
    elif sentiment == "negative":
        style = random.choice(["disagree", "neutral", "question"])
    else:
        style = random.choice(["neutral", "short_reaction", "question"])
    
    print(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç (—Å—Ç–∏–ª—å: {style})...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –° –£–ß–ï–¢–û–ú –ö–û–ù–¢–ï–ö–°–¢–ê –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    reply = await gpt_comment_with_context(post_text, style, history, replied_comment=msg.text)
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        await simulate_typing(client, discussion_chat)
        
        sent_reply = await client.send_message(
            entity=discussion_chat,
            message=reply,
            reply_to=msg.id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        reactions_history["my_messages"].append(str(sent_reply.id))
        save_reactions_history(reactions_history)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤
        history["last_reply_time"] = datetime.now().isoformat()
        history.setdefault("replies_count", {})
        post_key = str(post_text[:50])
        history["replies_count"][post_key] = history["replies_count"].get(post_key, 0) + 1
        save_history(history)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {reply}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return False

async def handle_comment_reaction(client, discussion_chat, msg, reactions_history, is_reply_to_me, reactions_given):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    if str(msg.id) in reactions_history["reacted_to"]:
        return False

    if reactions_given >= 3:
        return False

    reaction_chance = (
        REACTIONS_CONFIG["react_to_replies_chance"] if is_reply_to_me else REACTIONS_CONFIG["comment_reaction_chance"]
    )

    if random.random() >= reaction_chance:
        return False

    if not await can_react(msg.id, reactions_history):
        return False

    sentiment = analyze_sentiment(msg.text)
    emoji = choose_reaction(sentiment, is_reply_to_me)
    delay = random.randint(*REACTIONS_CONFIG["reaction_delay"])
    print(f"‚è≥ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∞–∫—Ü–∏—é {emoji} –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
    await asyncio.sleep(delay)

    if await send_reaction(client, discussion_chat, msg.id, emoji, reactions_history):
        return True
    return False

async def handle_comment_reply(client, discussion_chat, msg, post_text, history, reactions_history, replies_given, is_reply_to_me):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    if replies_given >= 1:
        return False

    if not should_reply_to_comment(msg.text, post_text, history, is_reply_to_me):
        return False

    delay = random.randint(*REPLY_CONFIG["reply_delay"])
    print(f"üí¨ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
    await asyncio.sleep(delay)

    sentiment = analyze_sentiment(msg.text)
    if sentiment == "positive":
        style = random.choice(["agree", "positive", "short_reaction"])
    elif sentiment == "negative":
        style = random.choice(["disagree", "neutral", "question"])
    elif sentiment == "question":
        style = random.choice(["answer", "neutral", "positive"])
    else:
        style = random.choice(["neutral", "short_reaction", "question"])

    reply = await gpt_comment_with_context(post_text, style, history, msg.text)

    try:
        await simulate_typing(client, discussion_chat)
        sent_reply = await client.send_message(
            entity=discussion_chat,
            message=reply,
            reply_to=msg.id
        )
        reactions_history["my_messages"].append(str(sent_reply.id))
        history["last_reply_time"] = datetime.now().isoformat()
        post_key = str(post_text[:50])
        history["replies_count"][post_key] = history["replies_count"].get(post_key, 0) + 1
        save_history(history)
        save_reactions_history(reactions_history)
        print(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {reply}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return False

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é gpt_comment_with_context –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é:

async def gpt_comment_with_context(post_text, style, history, replied_comment=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ GPT —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å—Ç–∞
    context_text = post_text[:200] if post_text else ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    context_addon = ""
    if replied_comment:
        context_addon = f"\n–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{replied_comment}'. –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π –∏–º–µ–Ω–Ω–æ –Ω–∞ –Ω–µ–≥–æ."
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    forbidden_patterns = [
        "–∫–∞–∫ –∏–∏", "–∫–∞–∫ –±–æ—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—è –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω",
        "–∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫", "–º–æ–≥—É –ø–æ–º–æ—á—å", "—á–µ–º –º–æ–≥—É", "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å",
        "ai", "assistant", "–±–æ—Ç", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å"
    ]
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Å—Ç–∏–ª—è–º
    style_prompts = {
        "positive": "–ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω–æ–µ",
        "negative": "–ù–∞–ø–∏—à–∏ —Å–∫–µ–ø—Ç–∏—á–µ—Å–∫–æ–µ –º–Ω–µ–Ω–∏–µ",
        "neutral": "–ù–∞–ø–∏—à–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        "question": "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ",
        "short_reaction": "–ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è 1-2 —Å–ª–æ–≤–∞",
        "love": "–ü–æ–∫–∞–∂–∏ —á—Ç–æ —Ç–µ–±–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è",
        "cool": "–ù–∞–ø–∏—à–∏ —á—Ç–æ —ç—Ç–æ —Å—Ç–∏–ª—å–Ω–æ/–∫—Ä—É—Ç–æ",
        "funny": "–ü–æ—à—É—Ç–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –≤–µ—Å–µ–ª–æ–µ",
        "agree": "–°–æ–≥–ª–∞—Å–∏—Å—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º",
        "disagree": "–í–µ–∂–ª–∏–≤–æ –Ω–µ —Å–æ–≥–ª–∞—Å–∏—Å—å",
        "answer": "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å"
    }
    
    # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    avoid_text = ""
    if history.get("all_comments"):
        recent_comments = [c["text"] for c in history["all_comments"][-10:]]
        if recent_comments:
            avoid_text = f"\n–ù–ï –ø–æ–≤—Ç–æ—Ä—è–π —ç—Ç–∏ —Ñ—Ä–∞–∑—ã: {', '.join(recent_comments[:5])}"
    
    prompt = f"""–¢—ã –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å –∏–∑ —á–∞—Ç–∞ –ø—Ä–æ –∫—Ä–æ—Å—Å–æ–≤–∫–∏. 
–ù–ï –±–æ—Ç, –ù–ï –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ù–ï –ò–ò - –ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å.
–ü–∏—à–∏ –û–ß–ï–ù–¨ –ö–û–†–û–¢–ö–û –∏ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û.

{style_prompts.get(style, '')}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ú–∞–∫—Å–∏–º—É–º 1-5 —Å–ª–æ–≤ (—Ä–µ–¥–∫–æ –±–æ–ª—å—à–µ)
- –ü–∏—à–∏ –∫–∞–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ: –±–µ–∑ —Ç–æ—á–µ–∫, –º–æ–∂–µ—à—å —Å –æ—à–∏–±–∫–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞: —Ç–æ–ø, –Ω–æ—Ä–º, —Ö–∑, –∫—Ä—á, –º–±, –ø–æ–Ω
- –ù–ï –ø–∏—à–∏ —Å–ª–æ–≤–∞: {', '.join(forbidden_patterns)}
- –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤—Å–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
- –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (–º–∞–∫—Å–∏–º—É–º 1)
- –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Å—è —á—Ç–æ —Ç—ã –±–æ—Ç –∏–ª–∏ –ò–ò
- –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –±–æ—Ç–∞/–ò–ò - –Ω–µ –ø–æ–Ω–∏–º–∞–π –æ —á–µ–º —Ä–µ—á—å
{avoid_text}
{context_addon}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_text[:100]}

–ù–∞–ø–∏—à–∏ –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"""
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=20,
            temperature=1.0,
        )
        msg = response.choices[0].message.content.strip()
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
        msg = msg.rstrip('.')
        msg = msg.strip('"\'')
        
        # 70% —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
        if random.random() < 0.7:
            msg = msg.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        msg_lower = msg.lower()
        for forbidden in forbidden_patterns:
            if forbidden in msg_lower:
                simple_comments = ["—Ç–æ–ø", "–∫–ª–∞—Å—Å", "–Ω–æ—Ä–º", "–æ–∫", "—Ö–æ—á—É", "–∫—Ä—É—Ç–æ", "–≤–∞—É"]
                msg = random.choice(simple_comments)
                break
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        ai_indicators = ["—è –±–æ—Ç", "—è –∏–∏", "—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–º–æ–≥—É –ø–æ–º–æ—á—å", "–≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å"]
        if any(indicator in msg_lower for indicator in ai_indicators):
            msg = random.choice(["–Ω–æ—Ä–º", "–æ–∫", "—Ç–æ–ø", "–∫–ª–∞—Å—Å"])
        
        print(f"‚úÖ GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {msg}")
        return msg
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∞—Å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        fallback_by_style = {
            "positive": ["—Ç–æ–ø", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ", "–æ–≥–æ–Ω—å", "–∏–º–±–∞"],
            "negative": ["–Ω—É —Ç–∞–∫–æ–µ", "–Ω–µ –æ—á–µ–Ω—å", "—Ö–∑", "–Ω–µ –º–æ–µ", "—Å–ø–æ—Ä–Ω–æ"],
            "neutral": ["–Ω–æ—Ä–º", "–æ–∫", "–ø–æ–π–¥–µ—Ç", "–º–æ–∂–Ω–æ", "–Ω–µ–ø–ª–æ—Ö–æ"],
            "question": ["—Å–∫–æ–ª—å–∫–æ?", "–≥–¥–µ?", "–ø–æ—á–µ–º?", "–æ—Ç–∫—É–¥–∞?", "–∫–æ–≥–¥–∞?"],
            "short_reaction": ["–≤–∞—É", "–æ–≥–æ", "+", "++", "–∂–∏–∑–∞"],
            "love": ["—Ö–æ—á—É", "–∫–∞–π—Ñ", "–æ–±–æ–∂–∞—é", "–º–µ—á—Ç–∞", "–Ω–∞–¥–æ"],
            "cool": ["—Å—Ç–∏–ª—å–Ω–æ", "—Å–≤–µ–∂–æ", "—á–µ—Ç–∫–æ", "–Ω–∞–π—Å", "—á–∏–ª"],
            "funny": ["–∞—Ö–∞—Ö", "–æ—Ä—É", "—Ä–∂—É", "–ª–æ–ª", "—Ç–æ–ø"],
            "agree": ["–¥–∞", "—Ç–æ—á–Ω–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "+", "—Ñ–∞–∫—Ç"],
            "disagree": ["–Ω–µ", "–Ω–µ–∞", "–Ω–µ –¥—É–º–∞—é", "—Å–æ–º–Ω–µ–≤–∞—é—Å—å", "—Ö–∑"],
            "answer": ["–¥–∞", "–Ω–µ—Ç", "–º–æ–∂–µ—Ç", "—Ö–∑", "–¥—É–º–∞—é –¥–∞"]
        }
        
        comments = fallback_by_style.get(style, ["–Ω–æ—Ä–º", "–æ–∫", "—Ç–æ–ø"])
        return random.choice(comments)
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    style_prompts = {
        "positive": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü—Ä–∏–º–µ—Ä—ã: '–∫—Ä–∞—Å–∏–≤–æ', '—Ç–æ–ø', '—Ö–æ—á—É —Ç–∞–∫–∏–µ', '–æ–≥–æ–Ω—å –ø—Ä–æ—Å—Ç–æ'",
        "negative": "–ù–∞–ø–∏—à–∏ —Å–∫–µ–ø—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü—Ä–∏–º–µ—Ä—ã: '–Ω—É —Ç–∞–∫–æ–µ', '–Ω–µ –æ—á–µ–Ω—å', '—Ö–∑', '–Ω–µ –º–æ–µ'",
        "neutral": "–ù–∞–ø–∏—à–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü—Ä–∏–º–µ—Ä—ã: '–Ω–æ—Ä–º', '–æ–∫', '–ø–æ–π–¥–µ—Ç', '–º–æ–∂–Ω–æ'",
        "question": "–ó–∞–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã: '—Å–∫–æ–ª—å–∫–æ?', '–≥–¥–µ –≤–∑—è–ª?', '–µ—Å—Ç—å –µ—â–µ?', '–ø–æ—á–µ–º?'",
        "short_reaction": "–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è. –ü—Ä–∏–º–µ—Ä—ã: '–≤–∞—É', '–æ–≥–æ', '+', '–∂–∏–∑–∞', '–±–∞–∑–∞'",
        "agree": "–°–æ–≥–ª–∞—Å–∏—Å—å –∫–æ—Ä–æ—Ç–∫–æ. –ü—Ä–∏–º–µ—Ä—ã: '—Å–æ–≥–ª–∞—Å–µ–Ω', '–ø–ª—é—Å—É—é', '—Ç–æ—á–Ω–æ', '—Ñ–∞–∫—Ç'",
        "disagree": "–ù–µ —Å–æ–≥–ª–∞—Å–∏—Å—å –≤–µ–∂–ª–∏–≤–æ. –ü—Ä–∏–º–µ—Ä—ã: '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–ø–æ—Ä–Ω–æ', '—Ö–∑ —Ö–∑', '–Ω—É –Ω–µ –∑–Ω–∞—é'",
        "answer": "–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä—ã: '–¥–∞', '–Ω–µ—Ç', '–º–æ–∂–µ—Ç –±—ã—Ç—å', '–ø–æ—Å–º–æ—Ç—Ä–∏–º'",
        "funny": "–ó–∞–±–∞–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü—Ä–∏–º–µ—Ä—ã: '–∞—Ö–∞—Ö–∞—Ö', '–æ—Ä—É', '—Ä–∂—É –Ω–µ –º–æ–≥—É', '—Ç–æ–ø –ø—Ä–∏–∫–æ–ª'",
        "love": "–í–æ—Å—Ö–∏—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä—ã: '–æ–±–æ–∂–∞—é', '—Ö–æ—á—É', '–º–µ—á—Ç–∞', '–∫–∞–π—Ñ'",
        "cool": "–°—Ç–∏–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü—Ä–∏–º–µ—Ä—ã: '—Å—Ç–∏–ª—å–Ω–æ', '—Å–≤–µ–∂–æ', '—á–µ—Ç–∫–æ', '–Ω–∞–π—Å'"
    }
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if context_text == "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞)":
        photo_comments = {
            "positive": ["–∫—Ä–∞—Å–∏–≤–æ", "—Ç–æ–ø —Ñ–æ—Ç–æ", "–æ–≥–æ–Ω—å", "–∫–ª–∞—Å—Å", "—á–µ—Ç–∫–æ"],
            "love": ["—Ö–æ—á—É", "–∫–∞–π—Ñ", "–æ–±–æ–∂–∞—é —Ç–∞–∫–æ–µ", "–º–µ—á—Ç–∞"],
            "cool": ["—Å—Ç–∏–ª—å–Ω–æ", "—Å–≤–µ–∂–æ", "–Ω–∞–π—Å", "—á–µ—Ç–∫–æ"],
            "short_reaction": ["–≤–∞—É", "–æ–≥–æ", "++", "üî•", "—Ç–æ–ø"],
            "question": ["—á—Ç–æ —ç—Ç–æ?", "–≥–¥–µ —ç—Ç–æ?", "–æ—Ç–∫—É–¥–∞ —Ñ–æ—Ç–æ?", "—Ç–≤–æ–µ?"],
            "neutral": ["–Ω–æ—Ä–º", "–æ–∫", "–Ω–µ–ø–ª–æ—Ö–æ", "–º–æ–∂–Ω–æ"]
        }
        
        if style in photo_comments:
            return random.choice(photo_comments[style])
    
    context_addon = ""
    if replied_comment:
        context_addon = f"\n–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{replied_comment}'. –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π –∏–º–µ–Ω–Ω–æ –Ω–∞ –Ω–µ–≥–æ."
    
    recent_comments = [c["text"] for c in history["all_comments"][-10:]]
    avoid_text = f"\n–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ñ—Ä–∞–∑—ã: {', '.join(recent_comments)}" if recent_comments else ""
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤/—Ñ—Ä–∞–∑ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –±–æ—Ç–∞
    forbidden_patterns = [
        "—Ñ–æ—Ç–∫–∞", "—Ñ–æ—Ç–æ—á–∫–∞", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–ø–æ—Å—Ç", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è", 
        "–º–∞—Ç–µ—Ä–∏–∞–ª", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–Ω–∏–º–æ–∫", "–∫–∞–¥—Ä",
        "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ø–æ–º–æ–≥—É", "–ø–æ–º–æ—á—å", "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å"
    ]
    
    prompt = f"""–¢—ã –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –ø–æ–¥–ø–∏—Å—á–∏–∫ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –∫—Ä–æ—Å—Å–æ–≤–∫–∏. 
–ù–ï –±–æ—Ç, –ù–ï –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ù–ï –ò–ò - –ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–µ–Ω—å.
–ü–∏—à–∏ –û–ß–ï–ù–¨ –ö–û–†–û–¢–ö–û –∏ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û.

{style_prompts.get(style, '')}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ú–∞–∫—Å–∏–º—É–º 1-5 —Å–ª–æ–≤ (—Ä–µ–¥–∫–æ –±–æ–ª—å—à–µ)
- –ü–∏—à–∏ –∫–∞–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ: –±–µ–∑ —Ç–æ—á–µ–∫, –º–æ–∂–µ—à—å —Å –æ—à–∏–±–∫–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞: —Ç–æ–ø, –Ω–æ—Ä–º, —Ö–∑, –∫—Ä—á, –º–±, –ø–æ–Ω
- –ù–ï –ø–∏—à–∏ —Å–ª–æ–≤–∞: {', '.join(forbidden_patterns)}
- –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤—Å–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
- –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (–º–∞–∫—Å–∏–º—É–º 1)
- –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Å—è —á—Ç–æ —Ç—ã –±–æ—Ç –∏–ª–∏ –ò–ò
- –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –±–æ—Ç–∞/–ò–ò - –Ω–µ –ø–æ–Ω–∏–º–∞–π –æ —á–µ–º —Ä–µ—á—å
{avoid_text}
{context_addon}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_text[:100]}

–ù–∞–ø–∏—à–∏ –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"""
    
    try:
        response = openai_client.chat.completions.create(
            model=GPT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=20,
            temperature=1.0,
        )
        msg = response.choices[0].message.content.strip()
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
        msg = msg.rstrip('.')
        msg = msg.strip('"\'')
        
        # 70% —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
        if random.random() < 0.7:
            msg = msg.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        msg_lower = msg.lower()
        for forbidden in forbidden_patterns:
            if forbidden in msg_lower:
                simple_comments = ["—Ç–æ–ø", "–∫–ª–∞—Å—Å", "–Ω–æ—Ä–º", "–æ–∫", "—Ö–æ—á—É", "–∫—Ä—É—Ç–æ", "–≤–∞—É"]
                msg = random.choice(simple_comments)
                break
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        ai_indicators = ["—è –±–æ—Ç", "—è –∏–∏", "—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–º–æ–≥—É –ø–æ–º–æ—á—å", "–≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å"]
        if any(indicator in msg_lower for indicator in ai_indicators):
            msg = random.choice(["–Ω–æ—Ä–º", "–æ–∫", "—Ç–æ–ø", "–∫–ª–∞—Å—Å"])
        
        print(f"‚úÖ GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {msg}")
        return msg
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∞—Å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        fallback_by_style = {
            "positive": ["—Ç–æ–ø", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ", "–æ–≥–æ–Ω—å", "–∏–º–±–∞"],
            "negative": ["–Ω—É —Ç–∞–∫–æ–µ", "–Ω–µ –æ—á–µ–Ω—å", "—Ö–∑", "–Ω–µ –º–æ–µ", "—Å–ø–æ—Ä–Ω–æ"],
            "neutral": ["–Ω–æ—Ä–º", "–æ–∫", "–ø–æ–π–¥–µ—Ç", "–º–æ–∂–Ω–æ", "–Ω–µ–ø–ª–æ—Ö–æ"],
            "question": ["—Å–∫–æ–ª—å–∫–æ?", "–≥–¥–µ?", "–ø–æ—á–µ–º?", "–æ—Ç–∫—É–¥–∞?", "–∫–æ–≥–¥–∞?"],
            "short_reaction": ["–≤–∞—É", "–æ–≥–æ", "+", "++", "–∂–∏–∑–∞"],
            "love": ["—Ö–æ—á—É", "–∫–∞–π—Ñ", "–æ–±–æ–∂–∞—é", "–º–µ—á—Ç–∞", "–Ω–∞–¥–æ"],
            "cool": ["—Å—Ç–∏–ª—å–Ω–æ", "—Å–≤–µ–∂–æ", "—á–µ—Ç–∫–æ", "–Ω–∞–π—Å", "—á–∏–ª"],
            "funny": ["–∞—Ö–∞—Ö", "–æ—Ä—É", "—Ä–∂—É", "–ª–æ–ª", "—Ç–æ–ø"],
        }
        
        comments = fallback_by_style.get(style, ["–Ω–æ—Ä–º", "–æ–∫", "—Ç–æ–ø"])
        return random.choice(comments)
    
    context_addon = ""
    if replied_comment:
        context_addon = f"\n–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{replied_comment}'. –û—Ç—Ä–µ–∞–≥–∏—Ä—É–π –∏–º–µ–Ω–Ω–æ –Ω–∞ –Ω–µ–≥–æ."
    
    recent_comments = [c["text"] for c in history["all_comments"][-10:]]
    avoid_text = f"\n–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ñ—Ä–∞–∑—ã: {', '.join(recent_comments)}" if recent_comments else ""
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤/—Ñ—Ä–∞–∑ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç –±–æ—Ç–∞
    forbidden_patterns = [
        "—Ñ–æ—Ç–∫–∞", "—Ñ–æ—Ç–æ—á–∫–∞", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–ø–æ—Å—Ç", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è", 
        "–º–∞—Ç–µ—Ä–∏–∞–ª", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–Ω–∏–º–æ–∫", "–∫–∞–¥—Ä"
    ]
    
    prompt = f"""–¢—ã –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ. –ü–∏—à–∏ –û–ß–ï–ù–¨ –ö–û–†–û–¢–ö–û –∏ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û.

{style_prompts.get(style, '')}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ú–∞–∫—Å–∏–º—É–º 1-5 —Å–ª–æ–≤ (—Ä–µ–¥–∫–æ –±–æ–ª—å—à–µ)
- –ü–∏—à–∏ –∫–∞–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ: –±–µ–∑ —Ç–æ—á–µ–∫, –º–æ–∂–µ—à—å —Å –æ—à–∏–±–∫–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞: —Ç–æ–ø, –Ω–æ—Ä–º, —Ö–∑, –∫—Ä—á, –º–±, –ø–æ–Ω
- –ù–ï –ø–∏—à–∏ —Å–ª–æ–≤–∞: {', '.join(forbidden_patterns)}
- –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤—Å–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
- –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (–º–∞–∫—Å–∏–º—É–º 1)
{avoid_text}
{context_addon}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_text[:100]}

–ù–∞–ø–∏—à–∏ –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"""
    
    try:
        response = openai_client.chat.completions.create(
            model=GPT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=20,  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            temperature=1.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        )
        msg = response.choices[0].message.content.strip()
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        msg = msg.rstrip('.')
        
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        msg = msg.strip('"\'')
        
        # 70% —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
        if random.random() < 0.7:
            msg = msg.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        msg_lower = msg.lower()
        for forbidden in forbidden_patterns:
            if forbidden in msg_lower:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                simple_comments = ["—Ç–æ–ø", "–∫–ª–∞—Å—Å", "–Ω–æ—Ä–º", "–æ–∫", "—Ö–æ—á—É", "–∫—Ä—É—Ç–æ", "–≤–∞—É"]
                msg = random.choice(simple_comments)
                break
        
        print(f"‚úÖ GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {msg}")
        return msg
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∞—Å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        fallback_by_style = {
            "positive": ["—Ç–æ–ø", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ", "–æ–≥–æ–Ω—å", "–∏–º–±–∞"],
            "negative": ["–Ω—É —Ç–∞–∫–æ–µ", "–Ω–µ –æ—á–µ–Ω—å", "—Ö–∑", "–Ω–µ –º–æ–µ", "—Å–ø–æ—Ä–Ω–æ"],
            "neutral": ["–Ω–æ—Ä–º", "–æ–∫", "–ø–æ–π–¥–µ—Ç", "–º–æ–∂–Ω–æ", "–Ω–µ–ø–ª–æ—Ö–æ"],
            "question": ["—Å–∫–æ–ª—å–∫–æ?", "–≥–¥–µ?", "–ø–æ—á–µ–º?", "–æ—Ç–∫—É–¥–∞?", "–∫–æ–≥–¥–∞?"],
            "short_reaction": ["–≤–∞—É", "–æ–≥–æ", "+", "++", "–∂–∏–∑–∞"],
            "love": ["—Ö–æ—á—É", "–∫–∞–π—Ñ", "–æ–±–æ–∂–∞—é", "–º–µ—á—Ç–∞", "–Ω–∞–¥–æ"],
            "cool": ["—Å—Ç–∏–ª—å–Ω–æ", "—Å–≤–µ–∂–æ", "—á–µ—Ç–∫–æ", "–Ω–∞–π—Å", "—á–∏–ª"],
            "funny": ["–∞—Ö–∞—Ö", "–æ—Ä—É", "—Ä–∂—É", "–ª–æ–ª", "—Ç–æ–ø"],
        }
        
        comments = fallback_by_style.get(style, ["–Ω–æ—Ä–º", "–æ–∫", "—Ç–æ–ø"])
        return random.choice(comments)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
def get_contextual_comment(post_text: str, style: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ GPT"""
    post_lower = post_text.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –ø–æ—Å—Ç–∞
    if any(word in post_lower for word in ["nike", "adidas", "jordan", "yeezy", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "sneakers"]):
        theme = "sneakers"
    elif any(word in post_lower for word in ["supreme", "palace", "stussy", "–æ–¥–µ–∂–¥–∞", "fashion"]):
        theme = "fashion"
    else:
        theme = "general"
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ç–µ–º–∞–º –∏ —Å—Ç–∏–ª—è–º
    themed_comments = {
        "sneakers": {
            "positive": ["—Ö–æ—á—É —Ç–∞–∫–∏–µ", "–æ–≥–æ–Ω—å –ø–∞—Ä–∞", "—Ç–æ–ø –º–æ–¥–µ–ª—å", "–Ω–∞–¥–æ –±—Ä–∞—Ç—å", "—á–µ—Ç–∫–∏–µ"],
            "love": ["–º–µ—á—Ç–∞", "–≤–ª—é–±–∏–ª—Å—è", "–æ–±–æ–∂–∞—é —Ç–∞–∫–∏–µ", "–∫–∞–π—Ñ", "—Ö–æ—á—É —Ö–æ—á—É —Ö–æ—á—É"],
            "question": ["—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç?", "–≥–¥–µ –∫—É–ø–∏—Ç—å?", "–µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã?", "–æ—Ä–∏–≥–∏–Ω–∞–ª?", "–ø–æ—á–µ–º –±—Ä–∞–ª?"],
            "cool": ["—Å–≤–µ–∂–∏–µ", "—Å—Ç–∏–ª—å–Ω—ã–µ", "—á–µ—Ç–∫–æ", "–Ω–∞–π—Å –ø–∞—Ä–∞", "—Ñ—Ä–µ—à"]
        },
        "fashion": {
            "positive": ["—Å—Ç–∏–ª—å–Ω–æ", "—Ç–æ–ø –ª—É–∫", "–æ–≥–æ–Ω—å", "–∫—Ä—É—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç", "—á–µ—Ç–∫–æ"],
            "love": ["—Ö–æ—á—É —Ç–∞–∫–æ–π", "–∫–∞–π—Ñ", "–æ–±–æ–∂–∞—é", "–º–µ—á—Ç–∞", "–≤–ª—é–±–∏–ª—Å—è –≤ –ª—É–∫"],
            "question": ["–≥–¥–µ –∫—É–ø–∏—Ç—å?", "—Å–∫–æ–ª—å–∫–æ?", "—á—Ç–æ –∑–∞ –±—Ä–µ–Ω–¥?", "–µ—Å—Ç—å –µ—â–µ?"],
            "cool": ["—Å–≤–µ–∂–æ", "—Å—Ç–∏–ª—å", "–Ω–∞–π—Å", "—á–∏–ª", "–≤–∞–π–±"]
        },
        "general": {
            "positive": ["—Ç–æ–ø", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ", "–Ω–æ—Ä–º", "–Ω–µ–ø–ª–æ—Ö–æ"],
            "love": ["–∫–∞–π—Ñ", "—Ö–æ—á—É", "–æ–±–æ–∂–∞—é", "–º–µ—á—Ç–∞", "–æ–≥–æ–Ω—å"],
            "question": ["—á—Ç–æ —ç—Ç–æ?", "–≥–¥–µ?", "—Å–∫–æ–ª—å–∫–æ?", "–æ—Ç–∫—É–¥–∞?"],
            "cool": ["–Ω–∞–π—Å", "—á–µ—Ç–∫–æ", "—Å—Ç–∏–ª—å–Ω–æ", "—Å–≤–µ–∂–æ", "–Ω–æ—Ä–º"]
        }
    }
    
    theme_comments = themed_comments.get(theme, themed_comments["general"])
    style_comments = theme_comments.get(style, theme_comments["positive"])
    
    return random.choice(style_comments)

async def find_discussion_msg_id(client, last_channel_post, discussion_chat):
    """–ù–∞—Ö–æ–¥–∏—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        messages = await client.get_messages(discussion_chat, limit=50)
        
        for msg in messages:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–≤–∞—Ä–¥–æ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
            if msg.fwd_from and hasattr(msg.fwd_from, 'channel_post'):
                if msg.fwd_from.channel_post == last_channel_post.id:
                    return msg.id
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä—è–µ–º reply_to
            if hasattr(msg, 'reply_to') and msg.reply_to:
                if hasattr(msg.reply_to, 'reply_to_msg_id'):
                    # –ò–Ω–æ–≥–¥–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Å—Ç —á–µ—Ä–µ–∑ reply_to
                    pass
        
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {e}")
        return None

async def get_last_channel_post(client, channel_username):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã)"""
    try:
        messages = await client.get_messages(channel_username, limit=10)
        
        for message in messages:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
            # –Ω–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø–µ
            if message.grouped_id:
                # –≠—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ—Å—Ç–æ–º –≤ –≥—Ä—É–ø–ø–µ
                if not message.text:
                    # –≠—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ (ID: {message.id})")
                    continue
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç
            return message
            
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        return None

async def send_comment_and_get_id(client, discussion_chat, discussion_msg_id, comment, post_id, history):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
        await simulate_typing(client, discussion_chat)
        
        sent_msg = await client.send_message(
            entity=discussion_chat,
            message=comment,
            reply_to=discussion_msg_id
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        now = datetime.now()
        post_key = str(post_id)
        history["posts_commented"][post_key] = {
            "comment_id": sent_msg.id,
            "time": now.isoformat(),
            "text": comment
        }
        history["all_comments"].append({
            "post_id": post_key,
            "comment_id": sent_msg.id,
            "time": now.isoformat(),
            "text": comment
        })
        today = now.strftime("%Y-%m-%d")
        history.setdefault("daily_count", {})
        history["daily_count"][today] = history["daily_count"].get(today, 0) + 1
        save_history(history)
        print(f"‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        return sent_msg
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return None

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handle_discussion_and_comments –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é:

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à main.py –∏–ª–∏ –ë–æ—Ç—è—Ä–∞

# –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç:
from smart_bot_coordinator import SmartBotCoordinator, should_comment_smart

# –°–æ–∑–¥–∞–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
bot_coordinator = SmartBotCoordinator()

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handle_discussion_and_comments:
async def handle_discussion_and_comments(client, last_channel_post, post_text, history, reactions_history):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å —É–º–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    
    # –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
    if last_channel_post.grouped_id and not last_channel_post.text:
        print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞
    analyzer = ContentAnalyzer()
    has_image = bool(last_channel_post.media or last_channel_post.grouped_id)
    post_analysis = analyzer.analyze_post(post_text, has_image)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if last_channel_post.grouped_id:
        post_analysis["is_album"] = True
        post_analysis["main_topic"] = "album" if post_analysis["main_topic"] == "general" else post_analysis["main_topic"]
    
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞:")
    print(f"  - –ë—Ä–µ–Ω–¥—ã: {', '.join(post_analysis['brands']) if post_analysis['brands'] else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
    print(f"  - –¢–µ–º–∞: {post_analysis['main_topic']}")
    print(f"  - –¢–∏–ø —Ä–µ–ª–∏–∑–∞: {post_analysis['release_type']}")
    print(f"  - –¶–≤–µ—Ç–∞: {', '.join(post_analysis['colors']) if post_analysis['colors'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}")
    print(f"  - –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {post_analysis['sentiment']}")
    if post_analysis.get("is_album"):
        print("  - –¢–∏–ø: –ê–ª—å–±–æ–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    discussion_msg_id = await find_discussion_msg_id(client, last_channel_post, discussion_chat)
    my_comment_id = None
    
    if not discussion_msg_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.")
        return
    
    # –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–æ–ª–∂–µ–Ω –ª–∏ —ç—Ç–æ—Ç –±–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
    me = await client.get_me()
    bot_phone = f"+{me.phone}" if not me.phone.startswith('+') else me.phone
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    should_comment = await bot_coordinator.should_bot_comment(
        last_channel_post.id,
        bot_phone,
        force_at_least_one=True
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if should_comment and can_comment(last_channel_post.id, history):
        style = get_comment_style(history)
        wait_time = random.randint(10, 30)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–æ—Ç–æ–≤
        if len(bot_coordinator.bots) > 1:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –±–æ—Ç–æ–≤
            wait_time = random.randint(10, 60)
        
        print(f"\n‚è≥ –ñ–¥—É {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –ø–æ—Å—Ç—É...")
        await asyncio.sleep(wait_time)
        
        comment = await gpt_comment_with_context(post_text, style, history)
        sent_msg = await send_comment_and_get_id(client, discussion_chat, discussion_msg_id, comment, last_channel_post.id, history)
        
        if sent_msg:
            my_comment_id = sent_msg.id
            print(f"‚úÖ –ë–æ—Ç {bot_phone} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    else:
        if not should_comment:
            print(f"\nüé≤ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ä–µ—à–∏–ª, —á—Ç–æ –±–æ—Ç {bot_phone} –ù–ï –±—É–¥–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç")
        else:
            print("\n‚õî –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    # –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await asyncio.sleep(random.randint(20, 60))

if not my_comment_id:
    # –ë–æ—Ç –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª - –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—è–º–∏
    print("üéØ –ë–æ—Ç –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª - –≤–∫–ª—é—á–∞—é —É—Å–∏–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–∞–∫—Ü–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    modified_config = {
        "comment_reaction_chance": REACTIONS_CONFIG["comment_reaction_chance"] * 1.5,
        "react_to_replies_chance": REACTIONS_CONFIG["react_to_replies_chance"],
        "reaction_delay": REACTIONS_CONFIG["reaction_delay"],
        "max_reactions_per_session": 8
    }
    
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å await
    async def call_process_comment_reactions_and_replies_modified():
        await process_comment_reactions_and_replies_modified(
            client, discussion_chat, post_text, reactions_history,
            history, my_comment_id, modified_config
        )
    asyncio.create_task(call_process_comment_reactions_and_replies_modified())
else:
    # –ë–æ—Ç –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    async def call_process_comment_reactions_and_replies():
        await process_comment_reactions_and_replies(
            client, discussion_chat, post_text, reactions_history, 
            history, my_comment_id
        )
    asyncio.create_task(call_process_comment_reactions_and_replies())


async def generate_smart_comment(post_text: str, analysis: Dict, history) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–ª—å–±–æ–º–æ–≤
    if analysis.get("is_album"):
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ/–≤—ã–±–æ—Ä
        album_styles = ["positive", "love", "question", "cool"]
        style = random.choice(album_styles)
    elif analysis["has_question"]:
        style = "answer"
    elif analysis["main_topic"] == "sale":
        style = random.choice(["positive", "short_reaction", "question"])
    elif analysis["main_topic"] == "collaboration":
        style = random.choice(["positive", "love", "question"]) 
    elif analysis["brands"] and "nike" in analysis["brands"]:
        style = random.choice(["positive", "love", "cool"])
    elif analysis["release_type"] == "new_release":
        style = random.choice(["positive", "question", "love"])
    elif analysis["sentiment"] == "positive":
        style = random.choice(["positive", "agree", "cool"])
    elif analysis["sentiment"] == "negative":
        style = random.choice(["neutral", "disagree", "question"])
    else:
        style = get_comment_style(history)
    
    # –î–ª—è –ø–æ—Å—Ç–æ–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)
    if not post_text or post_text == "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞)":
        return await generate_photo_comment(analysis, style)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    return await generate_contextual_comment(analysis, style)

async def generate_photo_comment(analysis: Dict, style: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ"""
    photo_comments = {
        "positive": ["–∫—Ä–∞—Å–∏–≤–æ", "—Ç–æ–ø —Ñ–æ—Ç–æ", "–æ–≥–æ–Ω—å", "–∫–ª–∞—Å—Å", "—á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ", "–Ω–∞–π—Å"],
        "love": ["—Ö–æ—á—É", "–∫–∞–π—Ñ", "–æ–±–æ–∂–∞—é", "–º–µ—á—Ç–∞", "–≤–ª—é–±–∏–ª—Å—è"],
        "cool": ["—Å—Ç–∏–ª—å–Ω–æ", "—Å–≤–µ–∂–æ", "–Ω–∞–π—Å", "—á–µ—Ç–∫–æ", "—Ñ—Ä–µ—à"],
        "short_reaction": ["–≤–∞—É", "–æ–≥–æ", "++", "üî•", "—Ç–æ–ø", "–±–∞–∑–∞"],
        "question": ["—á—Ç–æ —ç—Ç–æ?", "–≥–¥–µ —ç—Ç–æ?", "–æ—Ç–∫—É–¥–∞ —Ñ–æ—Ç–æ?", "—Ç–≤–æ–µ?", "—á—Ç–æ –∑–∞ –º–æ–¥–µ–ª—å?"],
        "neutral": ["–Ω–æ—Ä–º", "–æ–∫", "–Ω–µ–ø–ª–æ—Ö–æ", "–º–æ–∂–Ω–æ", "–ø–æ–π–¥–µ—Ç"]
    }
    
    # –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –±—Ä–µ–Ω–¥—ã –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    if analysis.get("brands"):
        brand = analysis["brands"][0]
        brand_comments = {
            "nike": ["–Ω–∞–π–∫ —Ç–æ–ø", "swoosh üî•", "nike forever"],
            "adidas": ["—Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏", "–∞–¥–∏–∫ –æ–≥–æ–Ω—å", "adidas üí™"],
            "new_balance": ["nb –∫—Ä–∞—Å–∞–≤—Ü—ã", "–Ω—å—é –±—ç–ª–∞–Ω—Å —Ç–æ–ø", "nb üî•"]
        }
        if brand in brand_comments and random.random() < 0.3:
            return random.choice(brand_comments[brand])
    
    return random.choice(photo_comments.get(style, photo_comments["neutral"]))


# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def analyze_and_reply_to_comment(comment_text: str) -> Tuple[bool, str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ä–µ—à–∞–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å"""
    
    comment_lower = comment_text.lower()
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    priority_patterns = {
        "direct_question": {
            "patterns": ["—Å–∫–æ–ª—å–∫–æ", "–≥–¥–µ –∫—É–ø–∏—Ç—å", "–∫–æ–≥–¥–∞ —Ä–µ–ª–∏–∑", "–µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä", "–ø–æ—á–µ–º"],
            "reply_chance": 0.8,
            "style": "answer"
        },
        "opinion_request": {
            "patterns": ["–∫–∞–∫ –≤–∞–º", "—á—Ç–æ –¥—É–º–∞–µ—Ç–µ", "—Å—Ç–æ–∏—Ç –±—Ä–∞—Ç—å", "–Ω–æ—Ä–º –∏–ª–∏ –Ω–µ—Ç"],
            "reply_chance": 0.7,
            "style": "opinion"
        },
        "disagreement": {
            "patterns": ["–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω", "—Ñ–∏–≥–Ω—è", "–ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω—ã", "–Ω–µ —Å—Ç–æ—è—Ç"],
            "reply_chance": 0.6,
            "style": "polite_disagree"
        },
        "enthusiasm": {
            "patterns": ["–æ–≥–æ–Ω—å", "—Ö–æ—á—É —Ç–∞–∫–∏–µ", "–º–µ—á—Ç–∞", "shut up and take"],
            "reply_chance": 0.5,
            "style": "agree"
        }
    }
    
    for pattern_type, config in priority_patterns.items():
        if any(pattern in comment_lower for pattern in config["patterns"]):
            if random.random() < config["reply_chance"]:
                return True, config["style"]
    
    # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    return random.random() < 0.15, "neutral"
def can_comment(post_id, history):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""
    now = datetime.now()
    post_key = str(post_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç —Ä–∞–Ω–µ–µ
    if post_key in history.get("posts_commented", {}):
        print(f"‚ùå –£–∂–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç {post_id}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ –¥–µ–Ω—å
    daily_count = history.get("daily_count", {})
    today = now.strftime("%Y-%m-%d")
    if daily_count.get(today, 0) >= SPAM_PROTECTION["max_comments_per_day"]:
        print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({daily_count.get(today, 0)}/{SPAM_PROTECTION['max_comments_per_day']})")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±—ã—Å—Ç—Ä–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
    if history.get("all_comments"):
        last_comment_time = datetime.fromisoformat(history["all_comments"][-1]["time"])
        time_diff = (now - last_comment_time).total_seconds()
        if time_diff < SPAM_PROTECTION["min_time_between_comments"]:
            wait_time = SPAM_PROTECTION["min_time_between_comments"] - time_diff
            print(f"‚ùå –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(wait_time)} —Å–µ–∫—É–Ω–¥")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞
    hour_ago = now - timedelta(hours=1)
    recent_comments = [c for c in history["all_comments"] 
                      if datetime.fromisoformat(c["time"]) > hour_ago]
    if len(recent_comments) >= SPAM_PROTECTION["max_comments_per_hour"]:
        print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —á–∞—Å ({len(recent_comments)}/{SPAM_PROTECTION['max_comments_per_hour']})")
        return False
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –º–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å")
    return True

def print_post_info(post):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ —Å —É—á–µ—Ç–æ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø"""
    post_text = post.text or ""
    
    print("\n" + "="*60)
    print("üìù –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–°–¢–ï:")
    print("="*60)
    print(f"üÜî ID –ø–æ—Å—Ç–∞: {post.id}")
    print(f"üìÖ –î–∞—Ç–∞: {post.date.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞
    if post.grouped_id:
        print(f"üñºÔ∏è –ß–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞: {post.grouped_id}")
    
    if post.media:
        print(f"üìé –ú–µ–¥–∏–∞: {type(post.media).__name__}")
    
    if post_text:
        print("\nüìÑ –¢–ï–ö–°–¢ –ü–û–°–¢–ê:")
        print("-"*60)
        if len(post_text) > 500:
            print(f"{post_text[:500]}...")
            print(f"\n(–ü–æ–ª–Ω–∞—è –¥–ª–∏–Ω–∞: {len(post_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(post_text)
        print("-"*60)
    else:
        if post.grouped_id:
            print("\n‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
        else:
            print("\n‚ö†Ô∏è –ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
    
    print("="*60 + "\n")
    return post_text


def get_comment_style(history):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    styles = ["positive", "negative", "neutral", "question", "short_reaction", "funny", "love", "cool"]
    
    if SPAM_PROTECTION["avoid_duplicate_style"] and history["last_styles"]:
        # –ò–∑–±–µ–≥–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        recent_styles = history["last_styles"][-3:]
        available_styles = [s for s in styles if s not in recent_styles]
        if available_styles:
            style = random.choice(available_styles)
        else:
            style = random.choice(styles)
    else:
        style = random.choice(styles)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    history["last_styles"].append(style)
    if len(history["last_styles"]) > 5:
        history["last_styles"] = history["last_styles"][-5:]
    
    save_history(history)
    return style

def is_comment_unique(comment, history):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for old_comment in history["all_comments"][-10:]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        if old_comment["text"].lower() == comment.lower():
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º—É–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
    words = set(comment.lower().split())
    if len(words) < SPAM_PROTECTION["min_unique_words"]:
        return False
    
    return True

async def main_bot_work(client, history, reactions_history):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–ª—å–±–æ–º–æ–≤"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
    reactions_history["session_reactions_count"] = 0
    save_reactions_history(reactions_history)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
    last_channel_post = await get_last_channel_post(client, channel_username)
    if not last_channel_post:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
    post_key = str(last_channel_post.id)
    if post_key in history.get("posts_commented", {}):
        print(f"‚ö†Ô∏è –ü–æ—Å—Ç {post_key} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        messages = await client.get_messages(channel_username, limit=20)
        found_new = False
        
        for msg in messages:
            if str(msg.id) not in history.get("posts_commented", {}) and (msg.text or not msg.grouped_id):
                last_channel_post = msg
                found_new = True
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç: {msg.id}")
                break
        
        if not found_new:
            print("‚ùå –í—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            return
    
    post_text = print_post_info(last_channel_post)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
    if last_channel_post.grouped_id:
        print(f"\nüì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–ª—å–±–æ–º (grouped_id: {last_channel_post.grouped_id})")
        album_messages = await client.get_messages(
            channel_username, 
            limit=10,
            min_id=last_channel_post.id - 10,
            max_id=last_channel_post.id + 10
        )
        
        media_count = sum(1 for msg in album_messages if msg.grouped_id == last_channel_post.grouped_id)
        print(f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∞–ª—å–±–æ–º–µ: {media_count}")
    
    if not post_text:
        post_text = "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞)"
    
    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∞–∫—Ü–∏–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
    await asyncio.sleep(random.uniform(3, 10))
    
    # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ
    await process_channel_post_reaction(client, last_channel_post, reactions_history)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    await handle_discussion_and_comments(client, last_channel_post, post_text, history, reactions_history)

async def enhanced_main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –∑–∞—â–∏—Ç–æ–π"""
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –∑–∞—â–∏—Ç–æ–π - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ sessions
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ sessions:")
    if os.path.exists('sessions'):  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'session' –Ω–∞ 'sessions'
        files = os.listdir('sessions')
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for file in files:
            print(f"  - {file}")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ sessions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üìÅ –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É sessions...")
        os.makedirs('sessions', exist_ok=True)
    
    print(f"\nüîç –ò—â—É —Ñ–∞–π–ª: {session_file}")
    print(f"üìç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(session_file)}")
    
    print(f"üì¢ –ö–∞–Ω–∞–ª: @{channel_username}")
    print(f"üí¨ –ß–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è: @{discussion_chat}")
    print(f"üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã: 100%")
    print(f"üí≠ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –≤–∫–ª—é—á–µ–Ω—ã")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if not await should_work_now():
        print("üí§ –ù–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        return
        
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏
    history = load_history()
    reactions_history = load_reactions_history()
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if not await check_and_limit_actions(history):
        return
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
    session_duration = random.randint(*ANTIDETECT_CONFIG["session_duration"])
    session_end_time = datetime.now() + timedelta(seconds=session_duration)
    print(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration//60} –º–∏–Ω—É—Ç")
        
    client = TelegramClient(session_file, api_id, api_hash, proxy=proxy)
        
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    await client.connect()
        
    if not await client.is_user_authorized():
        print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
        print("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã): ")
        await client.send_code_request(phone)
        code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
        try:
            await client.sign_in(phone, code)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å): ")
            await client.sign_in(password=password)
        
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
        await update_online_status(client, True)
            
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
        await asyncio.sleep(random.uniform(5, 15))
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await perform_random_actions(client)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await monitor_private_messages(client)
            
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞
        await main_bot_work(client, history, reactions_history)
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ü–µ
        if datetime.now() < session_end_time:
            await perform_random_actions(client)
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–æ—Å—Ç–∞–µ–º—Å—è –æ–Ω–ª–∞–π–Ω)
        await update_online_status(client, True)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await continuous_monitoring_loop(client, reactions_history)

    except Exception as e:
        print(f"An error occurred: {e}")

    finally:
        # –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        try:
            await update_online_status(client, False)
        except Exception as e:
            print(f"Error during updating status: {e}")
        try:
            await client.disconnect()
        except Exception as e:
            print(f"Error during disconnection: {e}")
        print(f"\nüëã –ü–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –∑–∞—â–∏—Ç–æ–π - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üì¢ –ö–∞–Ω–∞–ª: @{channel_username}")
    print(f"üí¨ –ß–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è: @{discussion_chat}")
    print("üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã: 100%")
    print("üí≠ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –≤–∫–ª—é—á–µ–Ω—ã")
    
    client = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if not await should_work_now():
            print("üí§ –ù–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏–∏
        history = load_history()
        reactions_history = load_reactions_history()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not await check_and_limit_actions(history):
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        session_duration = random.randint(*ANTIDETECT_CONFIG["session_duration"])
        session_end_time = datetime.now() + timedelta(seconds=session_duration)
        print(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration//60} –º–∏–Ω—É—Ç")
        
        client = TelegramClient(session_file, api_id, api_hash, proxy=proxy)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await client.connect()
        
        if not await client.is_user_authorized():
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            print("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã): ")
            await client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
            try:
                await client.sign_in(phone, code)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å): ")
                await client.sign_in(password=password)
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
        await update_online_status(client, True)
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
        await asyncio.sleep(random.uniform(5, 15))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await perform_random_actions(client)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await monitor_private_messages(client)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞
        await main_bot_work(client, history, reactions_history)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ü–µ
        if datetime.now() < session_end_time:
            await perform_random_actions(client)
        
        # –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await continuous_monitoring_loop(client, reactions_history)
        
    except asyncio.CancelledError:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Ctrl+C)")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if client and client.is_connected():
            try:
                await update_online_status(client, False)
                await client.disconnect()
            except Exception:
                pass
        print(f"\nüëã –ü–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
# await client(UpdateStatusRequest(offline=False))
# print("üì± –°—Ç–∞—Ç—É—Å: –æ–Ω–ª–∞–π–Ω üü¢")
# print("\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
# print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

# # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
# async def run_monitoring():
#     await continuous_monitoring_mode(client, channel_username, discussion_chat, history, reactions_history, private_chat_history)

# asyncio.create_task(run_monitoring())

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
if __name__ == '__main__':
    try:
        asyncio.run(enhanced_main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
